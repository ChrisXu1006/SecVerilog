/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         VLparse
#define yylex           VLlex
#define yyerror         VLerror
#define yydebug         VLdebug
#define yynerrs         VLnerrs

#define yylval          VLlval
#define yychar          VLchar
#define yylloc          VLlloc

/* Copy the first part of user declarations.  */
#line 2 "parse.y" /* yacc.c:339  */

/*
 * Copyright (c) 1998-2012 Stephen Williams (steve@icarus.com)
 *
 *    This source code is free software; you can redistribute it
 *    and/or modify it in source code form under the terms of the GNU
 *    General Public License as published by the Free Software
 *    Foundation; either version 2 of the License, or (at your option)
 *    any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */

# include "config.h"

# include  "parse_misc.h"
# include  "compiler.h"
# include  "pform.h"
# include  "Statement.h"
# include  "PSpec.h"
# include  "sectypes.h"
# include  <stack>
# include  <cstring>
# include  <sstream>

class PSpecPath;

extern void lex_start_table();
extern void lex_end_table();

static svector<PExpr*>* param_active_range = 0;
static bool param_active_signed = false;
static ivl_variable_type_t param_active_type = IVL_VT_LOGIC;

/* Port declaration lists use this structure for context. */
static struct {
      NetNet::Type port_net_type;
      NetNet::PortType port_type;
      ivl_variable_type_t var_type;
      SecType*sectype;
      bool sign_flag;
      svector<PExpr*>* range;
} port_declaration_context = {NetNet::NONE, NetNet::NOT_A_PORT,
                              IVL_VT_NO_TYPE, new ConstType(), false, 0};

/* The task and function rules need to briefly hold the pointer to the
   task/function that is currently in progress. */
static PTask* current_task = 0;
static PFunction* current_function = 0;
static stack<PBlock*> current_block_stack;

/* This is used to keep track of the extra arguments after the notifier
 * in the $setuphold and $recrem timing checks. This allows us to print
 * a warning message that the delayed signals will not be created. We
 * need to do this since not driving these signals creates real
 * simulation issues. */
static unsigned args_after_notifier;

/* Later version of bison (including 1.35) will not compile in stack
   extension if the output is compiled with C++ and either the YYSTYPE
   or YYLTYPE are provided by the source code. However, I can get the
   old behavior back by defining these symbols. */
# define YYSTYPE_IS_TRIVIAL 1
# define YYLTYPE_IS_TRIVIAL 1

/* Recent version of bison expect that the user supply a
   YYLLOC_DEFAULT macro that makes up a yylloc value from existing
   values. I need to supply an explicit version to account for the
   text field, that otherwise won't be copied. */
# define YYLLOC_DEFAULT(Current, Rhs, N)  do {       \
  (Current).first_line   = (Rhs)[1].first_line;      \
  (Current).first_column = (Rhs)[1].first_column;    \
  (Current).last_line    = (Rhs)[N].last_line;       \
  (Current).last_column  = (Rhs)[N].last_column;     \
  (Current).text         = (Rhs)[1].text;   } while (0)

/*
 * These are some common strength pairs that are used as defaults when
 * the user is not otherwise specific.
 */
const static struct str_pair_t pull_strength = { PGate::PULL,  PGate::PULL };
const static struct str_pair_t str_strength = { PGate::STRONG, PGate::STRONG };

static list<pair<perm_string,PExpr*> >* make_port_list(char*id, PExpr*expr)
{
      list<pair<perm_string,PExpr*> >*tmp = new list<pair<perm_string,PExpr*> >;
      tmp->push_back(make_pair(lex_strings.make(id), expr));
      delete[]id;
      return tmp;
}
static list<pair<perm_string,PExpr*> >* make_port_list(list<pair<perm_string,
                                                                 PExpr*> >*tmp,
                                                       char*id, PExpr*expr)
{
      tmp->push_back(make_pair(lex_strings.make(id), expr));
      delete[]id;
      return tmp;
}

static list<perm_string>* list_from_identifier(char*id)
{
      list<perm_string>*tmp = new list<perm_string>;
      tmp->push_back(lex_strings.make(id));
      delete[]id;
      return tmp;
}

static list<perm_string>* list_from_identifier(list<perm_string>*tmp, char*id)
{
      tmp->push_back(lex_strings.make(id));
      delete[]id;
      return tmp;
}

static svector<PExpr*>* copy_range(svector<PExpr*>* orig)
{
      svector<PExpr*>*copy = 0;

      if (orig) {
	    copy = new svector<PExpr*>(2);
	    (*copy)[0] = (*orig)[0];
	    (*copy)[1] = (*orig)[1];
      }

      return copy;
}

template <class T> void append(vector<T>&out, const vector<T>&in)
{
      for (size_t idx = 0 ; idx < in.size() ; idx += 1)
	    out.push_back(in[idx]);
}

/*
 * This is a shorthand for making a PECallFunction that takes a single
 * arg. This is used by some of the code that detects built-ins.
 */
static PECallFunction*make_call_function(perm_string tn, PExpr*arg)
{
      svector<PExpr*> parms(1);
      parms[0] = arg;
      PECallFunction*tmp = new PECallFunction(tn, parms);
      return tmp;
}

static PECallFunction*make_call_function(perm_string tn, PExpr*arg1, PExpr*arg2)
{
      svector<PExpr*> parms(2);
      parms[0] = arg1;
      parms[1] = arg2;
      PECallFunction*tmp = new PECallFunction(tn, parms);
      return tmp;
}


#line 238 "parse.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "parse.hh".  */
#ifndef YY_VL_PARSE_HH_INCLUDED
# define YY_VL_PARSE_HH_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int VLdebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENTIFIER = 258,
    SYSTEM_IDENTIFIER = 259,
    STRING = 260,
    DISCIPLINE_IDENTIFIER = 261,
    PATHPULSE_IDENTIFIER = 262,
    BASED_NUMBER = 263,
    DEC_NUMBER = 264,
    REALTIME = 265,
    K_LE = 266,
    K_GE = 267,
    K_EG = 268,
    K_EQ = 269,
    K_NE = 270,
    K_CEQ = 271,
    K_CNE = 272,
    K_LS = 273,
    K_RS = 274,
    K_RSS = 275,
    K_SG = 276,
    K_CONTRIBUTE = 277,
    K_PO_POS = 278,
    K_PO_NEG = 279,
    K_POW = 280,
    K_PSTAR = 281,
    K_STARP = 282,
    K_LOR = 283,
    K_LAND = 284,
    K_NAND = 285,
    K_NOR = 286,
    K_NXOR = 287,
    K_TRIGGER = 288,
    K_edge_descriptor = 289,
    K_meet = 290,
    K_always = 291,
    K_and = 292,
    K_assign = 293,
    K_begin = 294,
    K_buf = 295,
    K_bufif0 = 296,
    K_bufif1 = 297,
    K_case = 298,
    K_casex = 299,
    K_casez = 300,
    K_cmos = 301,
    K_deassign = 302,
    K_default = 303,
    K_defparam = 304,
    K_disable = 305,
    K_edge = 306,
    K_else = 307,
    K_end = 308,
    K_endcase = 309,
    K_endfunction = 310,
    K_endmodule = 311,
    K_endprimitive = 312,
    K_endspecify = 313,
    K_endtable = 314,
    K_endtask = 315,
    K_event = 316,
    K_for = 317,
    K_force = 318,
    K_forever = 319,
    K_fork = 320,
    K_function = 321,
    K_highz0 = 322,
    K_highz1 = 323,
    K_if = 324,
    K_ifnone = 325,
    K_initial = 326,
    K_inout = 327,
    K_input = 328,
    K_integer = 329,
    K_join = 330,
    K_large = 331,
    K_macromodule = 332,
    K_medium = 333,
    K_module = 334,
    K_nand = 335,
    K_negedge = 336,
    K_nmos = 337,
    K_nor = 338,
    K_not = 339,
    K_notif0 = 340,
    K_notif1 = 341,
    K_or = 342,
    K_output = 343,
    K_parameter = 344,
    K_pmos = 345,
    K_posedge = 346,
    K_primitive = 347,
    K_pull0 = 348,
    K_pull1 = 349,
    K_pulldown = 350,
    K_pullup = 351,
    K_rcmos = 352,
    K_real = 353,
    K_realtime = 354,
    K_reg = 355,
    K_release = 356,
    K_repeat = 357,
    K_rnmos = 358,
    K_rpmos = 359,
    K_rtran = 360,
    K_rtranif0 = 361,
    K_rtranif1 = 362,
    K_scalared = 363,
    K_small = 364,
    K_specify = 365,
    K_specparam = 366,
    K_strong0 = 367,
    K_strong1 = 368,
    K_supply0 = 369,
    K_supply1 = 370,
    K_table = 371,
    K_task = 372,
    K_time = 373,
    K_tran = 374,
    K_tranif0 = 375,
    K_tranif1 = 376,
    K_tri = 377,
    K_tri0 = 378,
    K_tri1 = 379,
    K_triand = 380,
    K_trior = 381,
    K_trireg = 382,
    K_vectored = 383,
    K_wait = 384,
    K_wand = 385,
    K_weak0 = 386,
    K_weak1 = 387,
    K_while = 388,
    K_wire = 389,
    K_wor = 390,
    K_xnor = 391,
    K_xor = 392,
    K_Shold = 393,
    K_Snochange = 394,
    K_Speriod = 395,
    K_Srecovery = 396,
    K_Ssetup = 397,
    K_Ssetuphold = 398,
    K_Sskew = 399,
    K_Swidth = 400,
    KK_attribute = 401,
    K_bool = 402,
    K_logic = 403,
    K_automatic = 404,
    K_endgenerate = 405,
    K_generate = 406,
    K_genvar = 407,
    K_localparam = 408,
    K_noshowcancelled = 409,
    K_pulsestyle_onevent = 410,
    K_pulsestyle_ondetect = 411,
    K_showcancelled = 412,
    K_signed = 413,
    K_unsigned = 414,
    K_Sfullskew = 415,
    K_Srecrem = 416,
    K_Sremoval = 417,
    K_Stimeskew = 418,
    K_cell = 419,
    K_config = 420,
    K_design = 421,
    K_endconfig = 422,
    K_incdir = 423,
    K_include = 424,
    K_instance = 425,
    K_liblist = 426,
    K_library = 427,
    K_use = 428,
    K_wone = 429,
    K_uwire = 430,
    K_always_comb = 431,
    K_always_ff = 432,
    K_always_latch = 433,
    K_assert = 434,
    K_abs = 435,
    K_abstol = 436,
    K_access = 437,
    K_acos = 438,
    K_acosh = 439,
    K_analog = 440,
    K_asin = 441,
    K_asinh = 442,
    K_atan = 443,
    K_atan2 = 444,
    K_atanh = 445,
    K_ceil = 446,
    K_continuous = 447,
    K_cos = 448,
    K_cosh = 449,
    K_ddt_nature = 450,
    K_discipline = 451,
    K_discrete = 452,
    K_domain = 453,
    K_enddiscipline = 454,
    K_endnature = 455,
    K_exclude = 456,
    K_exp = 457,
    K_floor = 458,
    K_flow = 459,
    K_from = 460,
    K_ground = 461,
    K_hypot = 462,
    K_idt_nature = 463,
    K_inf = 464,
    K_ln = 465,
    K_log = 466,
    K_max = 467,
    K_min = 468,
    K_nature = 469,
    K_potential = 470,
    K_pow = 471,
    K_sin = 472,
    K_sinh = 473,
    K_sqrt = 474,
    K_string = 475,
    K_tan = 476,
    K_tanh = 477,
    K_units = 478,
    SV_TRUE = 479,
    SV_FALSE = 480,
    SV_BOOL = 481,
    K_TAND = 482,
    UNARY_PREC = 483,
    less_than_K_else = 484
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 165 "parse.y" /* yacc.c:355  */

      bool flag;

      char letter;

	/* text items are C strings allocated by the lexor using
	   strdup. They can be put into lists with the texts type. */
      char*text;
      list<perm_string>*perm_strings;

      list<pair<perm_string,PExpr*> >*port_list;

      pform_name_t*pform_name;

      ivl_discipline_t discipline;

      hname_t*hier;

      list<string>*strings;

      struct str_pair_t drive;

      PCase::Item*citem;
      svector<PCase::Item*>*citems;

      lgate*gate;
      svector<lgate>*gates;

      Module::port_t *mport;
      LexicalScope::range_t* value_range;
      vector<Module::port_t*>*mports;

      named_pexpr_t*named_pexpr;
      svector<named_pexpr_t*>*named_pexprs;
      struct parmvalue_t*parmvalue;

      PExpr*expr;
      svector<PExpr*>*exprs;

      svector<PEEvent*>*event_expr;

      NetNet::Type nettype;
      PGBuiltin::Type gatetype;
      NetNet::PortType porttype;
      ivl_variable_type_t datatype;

      PWire*wire;
      svector<PWire*>*wires;

      PEventStatement*event_statement;
      Statement*statement;
      svector<Statement*>*statement_list;

      PTaskFuncArg function_type;

      net_decl_assign_t*net_decl_assign;

      verinum* number;

      verireal* realtime;

      PSpecPath* specpath;
      list<index_component_t> *dimensions;
      
      SecType*sectype;
      IQuantExpr*iqetype;
      BQuantExpr*bqetype;
      LQuantExpr*lqetype;

#line 578 "parse.cc" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


extern YYSTYPE VLlval;
extern YYLTYPE VLlloc;
int VLparse (void);

#endif /* !YY_VL_PARSE_HH_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 609 "parse.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  26
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   11354

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  275
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  190
/* YYNRULES -- Number of rules.  */
#define YYNRULES  754
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1851

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   484

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   253,     2,   249,     2,   239,   232,     2,
     242,   247,   237,   235,   243,   236,   250,   238,   256,   257,
       2,     2,     2,     2,     2,     2,     2,     2,   229,   248,
     233,   244,   234,   228,   251,     2,   264,     2,     2,     2,
     261,     2,     2,     2,     2,     2,     2,   267,   269,     2,
     271,   272,   266,     2,     2,     2,     2,     2,     2,     2,
       2,   254,     2,   255,   231,   274,     2,     2,   259,     2,
       2,     2,   260,     2,   263,     2,     2,     2,   262,     2,
     268,     2,   270,   273,   265,     2,     2,     2,     2,     2,
     258,     2,     2,   245,   230,   246,   252,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   240,   241
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   410,   410,   410,   413,   414,   417,   419,   421,   429,
     430,   437,   438,   442,   443,   444,   445,   457,   463,   472,
     479,   490,   495,   503,   509,   516,   520,   524,   531,   538,
     544,   549,   556,   560,   565,   570,   576,   582,   590,   594,
     599,   604,   609,   615,   621,   636,   650,   665,   670,   679,
     681,   684,   688,   689,   694,   699,   704,   708,   712,   716,
     720,   727,   728,   732,   733,   737,   744,   749,   754,   761,
     767,   775,   776,   777,   781,   782,   786,   793,   794,   798,
     802,   807,   815,   820,   825,   831,   841,   842,   846,   851,
     859,   863,   869,   880,   890,   899,   900,   901,   902,   903,
     904,   916,   916,   920,   919,   926,   927,   931,   933,   935,
     937,   943,   942,   950,   951,   955,   957,   958,   960,   962,
     967,   977,   980,   983,   985,   989,   990,   992,   994,   995,
     998,  1000,  1004,  1006,  1010,  1012,  1017,  1021,  1025,  1029,
    1033,  1037,  1044,  1045,  1049,  1050,  1051,  1052,  1056,  1057,
    1058,  1059,  1063,  1071,  1077,  1084,  1086,  1092,  1101,  1108,
    1115,  1129,  1131,  1136,  1138,  1140,  1145,  1150,  1155,  1160,
    1165,  1170,  1175,  1180,  1185,  1190,  1195,  1200,  1205,  1210,
    1215,  1220,  1225,  1230,  1235,  1240,  1245,  1250,  1255,  1260,
    1265,  1270,  1275,  1280,  1285,  1290,  1295,  1300,  1305,  1310,
    1315,  1320,  1325,  1330,  1335,  1343,  1345,  1392,  1397,  1403,
    1408,  1416,  1421,  1429,  1435,  1440,  1445,  1456,  1467,  1473,
    1480,  1485,  1494,  1501,  1508,  1515,  1522,  1529,  1536,  1543,
    1550,  1557,  1564,  1571,  1578,  1585,  1592,  1599,  1606,  1613,
    1620,  1627,  1634,  1645,  1651,  1657,  1665,  1670,  1676,  1683,
    1699,  1701,  1716,  1718,  1725,  1735,  1748,  1759,  1776,  1787,
    1802,  1815,  1830,  1838,  1847,  1848,  1849,  1850,  1851,  1852,
    1853,  1854,  1855,  1856,  1857,  1858,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1883,  1888,
    1894,  1903,  1913,  1923,  1939,  1941,  1946,  1948,  1950,  1952,
    1974,  1980,  1988,  1994,  1999,  2019,  2024,  2033,  2052,  2071,
    2090,  2109,  2135,  2136,  2139,  2139,  2146,  2152,  2164,  2173,
    2179,  2189,  2193,  2188,  2215,  2215,  2218,  2219,  2223,  2224,
    2225,  2231,  2233,  2237,  2238,  2239,  2250,  2275,  2294,  2310,
    2317,  2326,  2332,  2353,  2360,  2366,  2377,  2383,  2387,  2393,
    2397,  2401,  2405,  2410,  2414,  2421,  2425,  2430,  2434,  2438,
    2442,  2446,  2450,  2458,  2466,  2477,  2482,  2486,  2491,  2503,
    2502,  2517,  2516,  2532,  2531,  2547,  2559,  2558,  2573,  2572,
    2587,  2600,  2602,  2608,  2605,  2615,  2612,  2619,  2624,  2623,
    2630,  2637,  2637,  2650,  2653,  2657,  2666,  2673,  2678,  2684,
    2690,  2699,  2706,  2711,  2712,  2715,  2718,  2719,  2723,  2723,
    2725,  2725,  2730,  2731,  2735,  2736,  2746,  2747,  2748,  2752,
    2752,  2763,  2774,  2780,  2786,  2787,  2788,  2791,  2791,  2794,
    2795,  2796,  2797,  2798,  2799,  2800,  2801,  2802,  2803,  2804,
    2809,  2813,  2818,  2822,  2827,  2832,  2837,  2849,  2861,  2874,
    2875,  2879,  2880,  2884,  2893,  2901,  2901,  2904,  2906,  2911,
    2913,  2915,  2917,  2919,  2924,  2925,  2926,  2927,  2930,  2930,
    2949,  2955,  2961,  2973,  2984,  2990,  2994,  3001,  3011,  3016,
    3039,  3047,  3058,  3067,  3076,  3077,  3093,  3101,  3124,  3146,
    3160,  3162,  3175,  3182,  3190,  3200,  3206,  3214,  3215,  3216,
    3220,  3229,  3230,  3233,  3234,  3238,  3246,  3258,  3259,  3260,
    3261,  3262,  3263,  3264,  3273,  3289,  3299,  3305,  3314,  3329,
    3338,  3344,  3353,  3372,  3378,  3387,  3388,  3391,  3394,  3402,
    3410,  3418,  3423,  3428,  3432,  3437,  3441,  3445,  3450,  3454,
    3458,  3463,  3467,  3471,  3476,  3479,  3482,  3485,  3488,  3494,
    3495,  3499,  3501,  3508,  3508,  3511,  3515,  3519,  3523,  3530,
    3531,  3532,  3536,  3538,  3543,  3551,  3554,  3557,  3564,  3570,
    3576,  3582,  3591,  3596,  3634,  3638,  3646,  3647,  3651,  3652,
    3653,  3657,  3659,  3661,  3665,  3669,  3671,  3675,  3679,  3688,
    3689,  3694,  3695,  3699,  3701,  3703,  3705,  3714,  3726,  3732,
    3742,  3747,  3759,  3764,  3772,  3771,  3787,  3795,  3800,  3808,
    3807,  3823,  3826,  3832,  3838,  3843,  3848,  3853,  3858,  3863,
    3865,  3867,  3869,  3874,  3879,  3883,  3887,  3893,  3898,  3903,
    3907,  3912,  3916,  3923,  3934,  3941,  3948,  3953,  3958,  3963,
    3968,  3975,  3982,  3987,  3993,  3998,  4003,  4011,  4018,  4025,
    4037,  4044,  4051,  4059,  4071,  4075,  4080,  4088,  4090,  4095,
    4102,  4103,  4107,  4108,  4112,  4121,  4130,  4143,  4158,  4173,
    4191,  4205,  4219,  4236,  4244,  4252,  4263,  4269,  4274,  4277,
    4282,  4296,  4309,  4325,  4346,  4367,  4391,  4411,  4431,  4454,
    4467,  4480,  4496,  4502,  4504,  4518,  4523,  4531,  4531,  4537,
    4538,  4542,  4555,  4561,  4570,  4576,  4585,  4599,  4610,  4611,
    4615,  4621,  4633,  4634,  4635,  4636,  4637,  4638,  4639,  4640,
    4641,  4642,  4643,  4644,  4645,  4646,  4647,  4648,  4649,  4650,
    4651,  4652,  4653,  4654,  4655,  4659,  4660,  4661,  4662,  4669,
    4671,  4679,  4687,  4698,  4700,  4709,  4715,  4723,  4723,  4726,
    4727,  4731,  4737,  4750,  4765
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "SYSTEM_IDENTIFIER",
  "STRING", "DISCIPLINE_IDENTIFIER", "PATHPULSE_IDENTIFIER",
  "BASED_NUMBER", "DEC_NUMBER", "REALTIME", "K_LE", "K_GE", "K_EG", "K_EQ",
  "K_NE", "K_CEQ", "K_CNE", "K_LS", "K_RS", "K_RSS", "K_SG",
  "K_CONTRIBUTE", "K_PO_POS", "K_PO_NEG", "K_POW", "K_PSTAR", "K_STARP",
  "K_LOR", "K_LAND", "K_NAND", "K_NOR", "K_NXOR", "K_TRIGGER",
  "K_edge_descriptor", "K_meet", "K_always", "K_and", "K_assign",
  "K_begin", "K_buf", "K_bufif0", "K_bufif1", "K_case", "K_casex",
  "K_casez", "K_cmos", "K_deassign", "K_default", "K_defparam",
  "K_disable", "K_edge", "K_else", "K_end", "K_endcase", "K_endfunction",
  "K_endmodule", "K_endprimitive", "K_endspecify", "K_endtable",
  "K_endtask", "K_event", "K_for", "K_force", "K_forever", "K_fork",
  "K_function", "K_highz0", "K_highz1", "K_if", "K_ifnone", "K_initial",
  "K_inout", "K_input", "K_integer", "K_join", "K_large", "K_macromodule",
  "K_medium", "K_module", "K_nand", "K_negedge", "K_nmos", "K_nor",
  "K_not", "K_notif0", "K_notif1", "K_or", "K_output", "K_parameter",
  "K_pmos", "K_posedge", "K_primitive", "K_pull0", "K_pull1", "K_pulldown",
  "K_pullup", "K_rcmos", "K_real", "K_realtime", "K_reg", "K_release",
  "K_repeat", "K_rnmos", "K_rpmos", "K_rtran", "K_rtranif0", "K_rtranif1",
  "K_scalared", "K_small", "K_specify", "K_specparam", "K_strong0",
  "K_strong1", "K_supply0", "K_supply1", "K_table", "K_task", "K_time",
  "K_tran", "K_tranif0", "K_tranif1", "K_tri", "K_tri0", "K_tri1",
  "K_triand", "K_trior", "K_trireg", "K_vectored", "K_wait", "K_wand",
  "K_weak0", "K_weak1", "K_while", "K_wire", "K_wor", "K_xnor", "K_xor",
  "K_Shold", "K_Snochange", "K_Speriod", "K_Srecovery", "K_Ssetup",
  "K_Ssetuphold", "K_Sskew", "K_Swidth", "KK_attribute", "K_bool",
  "K_logic", "K_automatic", "K_endgenerate", "K_generate", "K_genvar",
  "K_localparam", "K_noshowcancelled", "K_pulsestyle_onevent",
  "K_pulsestyle_ondetect", "K_showcancelled", "K_signed", "K_unsigned",
  "K_Sfullskew", "K_Srecrem", "K_Sremoval", "K_Stimeskew", "K_cell",
  "K_config", "K_design", "K_endconfig", "K_incdir", "K_include",
  "K_instance", "K_liblist", "K_library", "K_use", "K_wone", "K_uwire",
  "K_always_comb", "K_always_ff", "K_always_latch", "K_assert", "K_abs",
  "K_abstol", "K_access", "K_acos", "K_acosh", "K_analog", "K_asin",
  "K_asinh", "K_atan", "K_atan2", "K_atanh", "K_ceil", "K_continuous",
  "K_cos", "K_cosh", "K_ddt_nature", "K_discipline", "K_discrete",
  "K_domain", "K_enddiscipline", "K_endnature", "K_exclude", "K_exp",
  "K_floor", "K_flow", "K_from", "K_ground", "K_hypot", "K_idt_nature",
  "K_inf", "K_ln", "K_log", "K_max", "K_min", "K_nature", "K_potential",
  "K_pow", "K_sin", "K_sinh", "K_sqrt", "K_string", "K_tan", "K_tanh",
  "K_units", "SV_TRUE", "SV_FALSE", "SV_BOOL", "K_TAND", "'?'", "':'",
  "'|'", "'^'", "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'",
  "UNARY_PREC", "less_than_K_else", "'('", "','", "'='", "'{'", "'}'",
  "')'", "';'", "'#'", "'.'", "'@'", "'~'", "'!'", "'['", "']'", "'0'",
  "'1'", "'x'", "'b'", "'f'", "'F'", "'l'", "'h'", "'B'", "'r'", "'R'",
  "'M'", "'n'", "'N'", "'p'", "'P'", "'Q'", "'q'", "'_'", "$accept",
  "main", "source_file", "number", "real_or_realtime",
  "attribute_list_opt", "attribute_instance_list", "attribute_list",
  "attribute", "sec_label", "sec_label_comp", "lqe", "iqe", "bqe",
  "block_item_decl", "block_item_decls", "block_item_decls_opt",
  "case_item", "case_items", "charge_strength", "charge_strength_opt",
  "defparam_assign", "defparam_assign_list", "delay1", "delay3",
  "delay3_opt", "delay_value_list", "delay_value", "delay_value_simple",
  "description", "optional_semicolon", "discipline_declaration", "$@1",
  "discipline_items", "discipline_item", "nature_declaration", "$@2",
  "nature_items", "nature_item", "config_declaration",
  "lib_cell_identifiers", "list_of_config_rule_statements",
  "config_rule_statement", "opt_config", "lib_cell_id",
  "list_of_libraries", "drive_strength", "drive_strength_opt",
  "dr_strength0", "dr_strength1", "event_control", "event_expression_list",
  "event_expression", "branch_probe_expression", "expression",
  "expr_mintypmax", "expression_list_with_nuls", "expression_list_proper",
  "expr_primary", "function_item_list", "function_item", "gate_instance",
  "gate_instance_list", "gatetype", "switchtype", "hierarchy_identifier",
  "list_of_identifiers", "list_of_port_identifiers", "list_of_ports",
  "list_of_port_declarations", "port_declaration", "net_type_opt",
  "signed_opt", "lpvalue", "cont_assign", "cont_assign_list", "module",
  "$@3", "$@4", "module_start", "module_attribute_foreign",
  "module_port_list_opt", "module_parameter_port_list_opt",
  "module_parameter_port_list", "module_item", "$@5", "$@6", "$@7", "$@8",
  "$@9", "$@10", "$@11", "$@12", "$@13", "automatic_opt", "generate_if",
  "generate_case_items", "generate_case_item", "$@14", "$@15",
  "module_item_list", "module_item_list_opt", "generate_block",
  "generate_block_opt", "net_decl_assign", "net_decl_assigns",
  "primitive_type", "primitive_type_opt", "net_type", "var_type",
  "param_type", "parameter_assign_list", "localparam_assign_list",
  "parameter_assign", "localparam_assign", "parameter_value_ranges_opt",
  "parameter_value_ranges", "parameter_value_range",
  "value_range_expression", "from_exclude", "parameter_value_opt",
  "parameter_value_byname", "parameter_value_byname_list", "port",
  "port_opt", "port_reference", "port_reference_list", "port_name",
  "port_name_list", "port_type", "range", "range_opt", "dimensions_opt",
  "dimensions", "function_range_or_type_opt", "register_variable",
  "register_variable_list", "real_variable", "real_variable_list",
  "net_variable", "net_variable_list", "specify_item", "specify_item_list",
  "specify_edge_path_decl", "edge_operator", "specify_edge_path",
  "polarity_operator", "specify_simple_path_decl", "specify_simple_path",
  "specify_path_identifiers", "specparam", "specparam_list",
  "spec_polarity", "spec_reference_event", "edge_descriptor_list",
  "spec_notifier_opt", "spec_notifier", "statement", "$@16", "$@17",
  "statement_list_or_null", "statement_list", "statement_or_null",
  "analog_statement", "task_item", "reg_opt", "task_port_item",
  "task_item_list", "task_item_list_opt", "task_port_decl",
  "task_port_decl_list", "udp_body", "$@18", "udp_entry_list",
  "udp_comb_entry", "udp_comb_entry_list", "udp_sequ_entry_list",
  "udp_sequ_entry", "udp_initial", "udp_init_opt", "udp_input_list",
  "udp_input_sym", "udp_output_sym", "udp_port_decl", "udp_port_decls",
  "udp_port_list", "udp_reg_opt", "udp_initial_expr_opt",
  "udp_input_declaration_list", "udp_primitive", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    63,    58,
     124,    94,    38,    60,    62,    43,    45,    42,    47,    37,
     483,   484,    40,    44,    61,   123,   125,    41,    59,    35,
      46,    64,   126,    33,    91,    93,    48,    49,   120,    98,
     102,    70,   108,   104,    66,   114,    82,    77,   110,    78,
     112,    80,    81,   113,    95
};
# endif

#define YYPACT_NINF -1359

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-1359)))

#define YYTABLE_NINF -738

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     478,   455,   106,   -69,   183,   192,   289,   328,   500,   728,
     332, -1359, -1359, -1359, -1359, -1359, -1359,   225, -1359,    15,
   -1359,   177,   542,   362,   373,   373, -1359, -1359, -1359, -1359,
     553,   470,  4458, -1359,   633,   182,   424,   510, -1359, -1359,
   -1359, -1359, -1359,    84, -1359,   444, -1359, -1359,   705, -1359,
    6176,  6176,  6176,   466,   493,   514,   528,   539,   552,   579,
     602,   611,   645,   661,   686,   714,   762,   774,   788,   791,
     800,   806,   820,   845,   859,   877,   883,  6176,  3299,  6176,
    6176,  6176,  4458,  4458,  5870,  5467, -1359, 10333, -1359,   399,
   -1359, -1359,   842,  -178,  1111, -1359,   326,   524,   796, -1359,
    3880, -1359, -1359, -1359, -1359,  4458,  4458,  4458,  4458,  4458,
    4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,
    4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458, -1359,
   -1359, -1359, -1359, -1359, -1359,  9535,   894,  9093,   325,  6176,
    6176,  6176, -1359, -1359, -1359,  4458,  4458,  4458,  4458,  4458,
    4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,
    4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,  4458,
    4458,  3961,  1149,  4458, -1359,  1156,  1200,   934,   974,    43,
     430,  1216,  1225,   307, -1359,   944,   994,  1019,  1047,  1065,
     700, -1359,  1018,  1068, -1359, 10333,   350,  7103,  7125,  7253,
    7275,  7297,  7359,  9137,  7381,  7403,  7425,  7447,  7531,  7553,
    9159,  7681,  7703,  9243,  9265,  9389,  7725,  7787,  7809,  7831,
    7853,  4458, -1359,  4458,  4458, -1359, -1359, -1359, -1359,   620,
     620,  1230,  1230,  1230,  1230,   132,   132,   132, -1359, 10355,
    5188,  1684,  9509,  9509,  9928,   874,  9509,  1684,   620,   620,
     296,   296,  1277,  1277,  1277, -1359,   503, -1359,  1641,  1078,
   -1359,   126,  1333,  1096, -1359, -1359,  1092,  1100,  1101,  1110,
   -1359, -1359,  4458,  1377,  1392,  1404,  1403, -1359, -1359,  1335,
     245,  1424, -1359, -1359, -1359, -1359, -1359, -1359, -1359,  4458,
   -1359, -1359, -1359, -1359, -1359, -1359,  4458, -1359, -1359,  4458,
    4458,  4458, -1359, -1359, -1359, -1359, -1359,  9950,   452, 10333,
    4458, -1359,  4458,  4458,  4458, -1359,  4458,  1209,  1215,  1215,
     -34, -1359,   502,  1224,  1470,   484, -1359, -1359, -1359, -1359,
    6266,  1231,  1232,  1239,  1242,   710,   617,  1237,  1489,  1490,
     672,   733,   671, -1359, -1359, -1359, -1359,  1491,  1248,  7875,
    7959,  7981,  8109,  8131,  4458,    48, 10333,   757,  5490,  5685,
   10333,  1425,    59,  1494,  1496,  1215,  1497,  1502, -1359,  1395,
   -1359, -1359, -1359,  1341,  1510, -1359,  1512, -1359, -1359, -1359,
   -1359, -1359, -1359, -1359, -1359, -1359, -1359,  1262,  4458, -1359,
    1514, -1359,   104, -1359,  2655, -1359,   472,  1278,  1012,  1012,
    1090,    50, -1359,   164, -1359, -1359,  1449, -1359, -1359, -1359,
   -1359, -1359, -1359, 10333,  1279, -1359, -1359, -1359, -1359,  1523,
     784,  1524,  1525,   396, -1359,   423,  1282,  1531,  1287,  1295,
   -1359,  1485, -1359,   704,   369, -1359,  9972,  1299, -1359,   710,
   -1359,  1289,  1960,  1489, -1359,    30, -1359, -1359, -1359, -1359,
   -1359, -1359, -1359, -1359, -1359, -1359, -1359, -1359,  1389, -1359,
    1389, -1359,  1389,  1389, -1359, -1359, -1359,  1545, 10713, -1359,
   -1359,  1477,  1303, -1359,  1322,    59,    59, -1359,  1551, -1359,
   -1359,  1307, -1359,   228,  5131, -1359,    54, -1359,  1510, -1359,
    1510,  4458,  4458,  1514, -1359,  4458, -1359, -1359,  1489,  1314,
   -1359,  1262,  1262,  1262,  1262,  1319,  1321,  1494,    69,  1325,
      25,  1494,  1328,   199,  1329,  1473,  1473,  1573,  1473,   331,
     139,   152,  1487,  1426,  1334,  1336, 10572,  1494,   381, 11103,
   -1359, -1359,  5491, 10353,  1526,  1768,  1576,  1395,   458,   320,
     320, -1359, -1359,  1337, -1359, -1359, -1359, -1359, -1359, -1359,
   -1359, -1359, -1359, -1359, -1359, -1359, -1359, -1359, -1359, -1359,
   -1359, -1359, -1359, -1359, -1359, -1359, -1359,  1527, -1359,  5131,
    5131, -1359,  5625, -1359, -1359, -1359,    56,  1354,    68,  1354,
    5732,  9904, -1359,  5758,   572, -1359, -1359,  1215,  1215,  1215,
    1215,  1579, -1359,   464,   850,  1344, -1359,  1338,  4458, -1359,
     635,   596,  1512,   754,  1585,  1534, -1359,   753,  4458,  1389,
    1389,  1345,  1389,  1346,  1514,   -22,  3346, -1359,   755,  3346,
     767,  1537, -1359,  1355,  1357,  1137,  1358,  1359,  1362,  1364,
    1369,  1373,  1374,  1375,  1593,  1593,  1593,  1593,  1376,  1378,
    1379,  1380,   649, -1359,  3228,  1371,  1393,  1385,  1394,  1620,
     496, -1359,  1262,   976,  9603,  1474,   770,  1391,  1637,  1414,
    5310, -1359, -1359, -1359, -1359, -1359,  5310,   109, -1359, -1359,
   -1359, -1359, -1359, -1359, -1359, -1359, -1359,  1016,  1083,   298,
   -1359, -1359, -1359, -1359, -1359,   169, -1359, -1359, -1359, -1359,
   -1359,  1664,   102,   103,   274,  9756, -1359, -1359, -1359,  1622,
   -1359, -1359,  1262,  1389, -1359,  1618,   725, -1359, -1359,   541,
     541, -1359, -1359,   345,  1185, -1359, -1359, -1359,  9187, -1359,
   11033, 11080, -1359, -1359,  1513,  1429, -1359,  1432, -1359,  4623,
   -1359, -1359,   980, -1359,   197, -1359,  1434,  1679,  1680,  1682,
    1683,  1441, -1359,  4458, -1359,  1444,  1448, -1359, -1359, -1359,
   -1359, -1359, -1359, -1359, -1359,  1454,  1462,   212, -1359,   105,
    8153,  1512, -1359,  4458, -1359, -1359,  1463, -1359, -1359, -1359,
   -1359, -1359,  1262, -1359,  1689,  8215,  1262,  1262, -1359,  1262,
   -1359,   803, -1359,  1528,  1464,   984,  1480, 10333,   997,   156,
   -1359,  1481,  1027, -1359, -1359,  4458,  1465,  1472,  1484,  1488,
   -1359,   812,  6023,  6023,  6023,  6023,  6023,  6023,  6023,  6023,
    1471,   840,   847,   854,   885,  6023,  6023,  6023,  6023,  1486,
   -1359, -1359,  1593,   353, -1359, -1359, -1359,   220, -1359,   232,
      98,  1495,  1501,  1504,  1338,  1505,  1500,  1731,  1700, -1359,
   -1359, -1359,  1493,   915, -1359,   155,   100,   141,   243,  1512,
     105,   625,  1515,  1519,  1520,   105,  1512,  1530,   105,  5310,
    1439,  1532,   105,  1535,  1540,  1541,  4458,   256,   137,  4966,
    1728,   667,    32, -1359, -1359,  1507,  1753,  1517,   194, -1359,
     931,  1518,   935,  1521, -1359, -1359, -1359, -1359,  1389,  1538,
    1753,  1543,  1745, -1359,  3212,   156,   103,   950,  4458,   156,
     959,  1389,  1765,  1723, -1359,  1338,  1262, -1359, -1359,   345,
    1191,   345,   312,   945,   541,   541,   541,   458,   541,   541,
     544,  5131, -1359,  1548,  1552,  1553,  1550,  1554, -1359, -1359,
   -1359, 10333, -1359,  4046,  4046, -1359, -1359, -1359, -1359,  1555,
    1762,  6394,   610,   968,   623,   685, -1359, -1359, -1359,  4458,
   -1359,  1118,  1560, -1359,   975, -1359, -1359, 10333,  4458, -1359,
      99, -1359,  1215,  1215,  1215,  1514, -1359,  1561,  1806,  1030,
   -1359,  1158,  1604,   610,   156,   968,  4458, -1359, -1359,   610,
     968,   156,  8237, -1359, -1359,  4458,  4543,  1137, -1359,  1556,
    4458,  4458,  1586,  1569,  1575,  1581,  1584,  1587,  1588,  1589,
    1590,  6176,  1816, -1359, -1359, -1359, -1359,  1594,  1595,  1598,
    1599, -1359,   353, -1359, -1359,   218,  4458, -1359,  2746, -1359,
    1769,  1596, -1359, -1359, -1359, -1359,  1215,  1580,  1839, -1359,
    1695,  4458,  1637, -1359, -1359, -1359, -1359,  4126,  1600,   986,
    4458,  4458, -1359,  4458, -1359,   583,  1606,    91, -1359,  1849,
   -1359,  5038,  4458,  4458,  4458,  1605,   615,   179,  1611, -1359,
     313, -1359,  1856,  5083,  2851,  1615,  4458,  4458,  2942,   586,
    4458, -1359,  1728,  1857,  1118, -1359, -1359, -1359,  4966,  4212,
   -1359,  3464,  3599, -1359,   292, -1359,   987, -1359,  4458,  4458,
   -1359,  1610,  1865, -1359, -1359, -1359, -1359,   -79, -1359,  1003,
    1878,  4458,  1004,   156,  1010, -1359,  1011, -1359,   222, 10854,
   -1359, 10995,   195,  1215,   541, -1359, -1359,   345, -1359, -1359,
    1655,    27,  1653, -1359, -1359, -1359, -1359,   544, -1359, -1359,
    5933,  6129, 10333,  1657,  1666,  4458, -1359, -1359,  1650,  1652,
    1654,  1658,  1659,  1660,  1167,  9994,  4458,   105, -1359,  4292,
    6416,  1845, -1359,  1662,  1494,  1494,  1905, -1359, -1359,  1667,
   -1359,  1661, -1359,  1663,  1173,  1179,  1665,  1013,  1668, 10333,
    1669,  1677,  1014,  1357, 10016,  4458, 10333, -1359,  1879, 10333,
    1687, 10333,  1698,  4458,  6023,  6023,  4458,  6023,  6023,  6023,
    6023,  4458,  1672,  1674,  6023,  6023,  6023,  6023,   499,   158,
     171,  1182, -1359,  1686,  1184, -1359,  1681,   676,  1492,  1494,
   -1359,  1688, 10854, -1359, 10333, -1359,  1927,  1187, -1359,  1189,
   -1359, -1359,  6438,  6501,  1192, -1359,  4458, -1359, -1359, -1359,
   -1359,  8259,  8281,  8303, -1359, -1359,  1690,  1701,  4458, -1359,
   -1359, -1359,  1697,  8387, -1359,  8409,  8537,  1699,  8559, -1359,
    1702,  4966,  1703,  4458,  4458,  1704,   390, -1359, 10333, -1359,
    1705,  1198,  1710,   173,  4458,  4458,  6523,  1712,  4458,  4458,
    6545,  4458, -1359,  1753, -1359, 10333, 10038,  4458, -1359,  1753,
    1215, -1359,  1201,  6567, -1359,  1023, -1359, -1359,  1215,  1338,
    1894, -1359,  1707,  1494,  1494,   458,   541,  1708, -1359, -1359,
    4046,  4046, 10333, -1359, -1359, -1359, -1359, -1359, -1359,  4458,
   -1359,  4458, 10333, -1359,  1729,   149,  3715, -1359,  4458, -1359,
     731,   676,  1024,  1037,  1713,  1040,  2293, -1359, -1359, -1359,
   -1359,   156, -1359,   156,   156,   156, -1359,  1711,  1716,  4458,
    9115, -1359,   308,  4458,  4458, 10333,  1717,  1722,    34,  1724,
    1725,  1726,  1727,  1204, -1359,  6176,  1730,  1738,  1739,  1740,
    1742,  1744,  1593,  1206,  1593,  1227,  4458, -1359, -1359, -1359,
   -1359,   581,   603,   743, -1359,   677,   749,   798,   926,   954,
   -1359, -1359, -1359,  1492,  4966,  1044,  1961,  1934,  1751, -1359,
    1746, -1359, -1359, -1359,  1747,  6589,   940,  2385,  2489,  2581,
    5310,  4458,  6673,   940,  4966,  4966,  5310,  4966,  5310,  5310,
   -1359, -1359, -1359, 10333, 10333,  1728,  3795,  3795, -1359, -1359,
    1749,  4458,  1931,  6695,  6824, -1359,  4458,  6846,  6868, -1359,
   10333, -1359,  4458, 10060,  1050,  1753,  1991, -1359, -1359, -1359,
    1995,  1215, -1359, -1359,  1056,  1057, -1359,   345, -1359,   348,
     438,  1238, 10082, -1359, -1359, -1359, -1359,  6930, -1359,  4845,
   -1359, -1359,   684, -1359, -1359,  4458,  1996, -1359,  1754, -1359,
    8581,  1058,  1060,  1073,  1085, -1359, -1359, 10311,  4458,  1966,
    6176, 10333, 10333,  4458,  4458, -1359,  1512,  1755,  1760,  4458,
    4458,  4458,  4458,  4458,  1756,  1750,  4458,  4458,  4458,  4458,
    1593,  1593,   340, -1359,   340, -1359, -1359,   940,  2003, -1359,
    2004,  2005,  1389,  2006,  2007,  2008,  1389,  2010,  2011,  2012,
    1389,   465,  1770, -1359,  1494,  1494,  1494,  1389,  1494,  1494,
    1494,  1389,  1494,  1494,  1494,  1389, -1359,  1956, -1359,  1772,
    1867,  4377, -1359, -1359, -1359, -1359,   940, -1359,     4,  4921,
   -1359,  2023,   258,   151,  2127,   255,  2219, -1359,  6952, -1359,
   -1359,  1968,  1969, -1359, -1359, -1359, -1359,  4966, -1359, -1359,
   -1359,  8643, -1359, -1359,  8665, -1359, -1359,  5784,  4458, -1359,
    1087,  1776,  1781, -1359,  1091,  2026, -1359, -1359, -1359, -1359,
   -1359, -1359,  4458, -1359,  4458,  5491,  5491,  2027, -1359,  1979,
    1787, 10333,  1792, -1359, -1359, -1359, -1359, -1359, -1359,  4458,
    8687, -1359,  1811,    34,  1796,  1118,  1794,  1512,    34,    34,
    1809,    34,  6244, -1359, -1359,  1813,  1814,    34,    34,   340,
     340, -1359, -1359, -1359,  4458,  4458,  4966, -1359, -1359, -1359,
    1262, -1359, -1359, -1359,  1262, -1359, -1359, -1359,  1262, -1359,
   -1359,   940,  1093,  1099,  1109,  1262,  1116,  1127,  1128,  1262,
    1131,  1135,  1139,  1262, -1359,  1801, -1359, -1359,  8709, -1359,
    5189, -1359,  4966,  4966, -1359,  1829, -1359, -1359,  4966, -1359,
   -1359, -1359, -1359,  3016,  5234,  4966,  4966, -1359,  1810,  1810,
   -1359,  5810, -1359, -1359,  4458,  1995, -1359,   323,  1145, -1359,
    1148,  1815, 10333, -1359, -1359,  1819, -1359,   940,  4458, 10333,
   -1359,  4458,  1818,  4458, -1359,  1118,  1825,  1833,  4458,  1834,
    1835,  4458,  4458,  1836,  1837,  4458,  4458,  8731,  8815,  2025,
    2063,  2083,  2087,  4966, -1359, -1359, -1359,  1494, -1359, -1359,
   -1359,  1494, -1359, -1359, -1359,  1494, -1359, -1359, -1359, -1359,
   -1359, -1359, -1359,  1843,  6974, -1359, -1359, -1359,  4458,  4458,
   -1359, 10333, -1359, -1359, -1359,  2092, -1359, -1359,  4458,  5310,
   10333, 10333,  1848,    34,  1850,  1852,    34,  1853,  1855,    34,
      34,  1858,  1859,  8837,  8965,  1861,  1866, -1359, -1359, -1359,
   -1359,  2037,  1154,  1155,  1161,   105,   205,  6996,  7018,  1851,
   -1359,  8987,  2049, -1359,  1869, -1359, -1359,  1876, -1359, -1359,
    1880,  1882, -1359, -1359,  1892,  1893, -1359, -1359, -1359, -1359,
   -1359, -1359,  1868,  1898,  1902, -1359, -1359, -1359, -1359,  1903,
    1906,  1907,  1908, -1359, -1359,  4458,  5310,  4458, 10995, -1359,
   -1359, -1359, -1359,  9009, -1359,  9071, -1359,  5310,  5310, -1359,
   -1359
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
      12,     0,     0,     0,     0,     0,     0,     0,    12,     0,
      11,     4,    99,    98,    97,    95,    96,    19,    13,     0,
      18,     0,     0,     0,   102,   102,     1,     5,   325,   324,
       0,     0,     0,    14,     0,     0,     0,     0,   101,   103,
     111,   321,    15,     0,   288,   216,   215,     6,     7,   214,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   213,    20,   163,   217,
      17,   745,   748,     0,     0,   121,     0,     0,   331,    16,
       0,     8,   174,   175,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   169,
     178,   170,   167,   164,   165,   205,     0,   212,     0,     0,
       0,     0,   166,   177,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   747,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   106,     0,     0,     0,     0,     0,
       0,   114,     0,   330,   221,   212,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,   247,   172,   173,   171,   198,
     199,   196,   200,   197,   201,   193,   194,   195,   180,   202,
     203,   188,   189,   190,     0,   187,   179,   186,   191,   192,
     184,   185,   181,   182,   183,   220,     0,   289,     0,   750,
     746,     0,     0,   132,   123,   122,     0,     0,     0,     0,
     104,   105,     0,     0,     0,     0,     0,   112,   113,     0,
      12,   327,   219,   243,   222,   223,   224,   225,   226,     0,
     227,   229,   230,   231,   232,   233,     0,   235,   236,     0,
       0,     0,   238,   239,   240,   241,   242,     0,     0,   211,
       0,   218,     0,     0,     0,   290,     0,     0,    22,    22,
      22,   743,   709,     0,     0,     0,   108,   107,   110,   109,
       0,     0,     0,     0,     0,   442,     0,   486,     0,     0,
       0,     0,     0,   302,   484,   300,   480,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,     0,     0,     0,
     749,     0,    28,     0,     0,    22,     0,     0,   708,     0,
     744,   100,   133,     0,     0,   120,     0,   124,   116,   117,
     119,   118,   115,   446,     9,    10,   447,   444,     0,   448,
       0,   443,     0,   332,     0,   490,     0,     0,   313,   313,
     313,   485,   328,    12,   329,   306,     0,   322,   228,   234,
     244,   245,   237,   206,     0,   248,   292,   293,   291,     0,
       0,    23,     0,     0,   294,     0,     0,     0,     0,     0,
     697,     0,   134,     0,     0,   445,     0,     0,   333,   442,
     334,     0,     0,     0,   482,     0,   432,   436,   430,   435,
     431,   434,   438,   433,   429,   437,   439,   440,   315,   312,
     315,   441,   315,   315,   301,   304,   303,     0,     0,   249,
     751,     0,     0,    24,     0,    28,    28,    21,     0,   739,
     740,     0,   741,     0,     0,   753,     0,   134,     0,   134,
       0,     0,     0,     0,   489,     0,   488,   491,     0,     0,
     314,   502,   502,   502,   502,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   499,   497,     0,   498,     0,
       0,     0,     0,   404,    75,     0,     0,     0,     0,     0,
     347,   413,     0,     0,     0,   315,     0,     0,     0,    26,
      25,   295,   742,     0,   715,   734,   717,   718,   712,   713,
     714,   716,   719,   720,   721,   722,   723,   724,   725,   726,
     727,   728,   729,   730,   731,   732,   733,     0,   702,   699,
     700,   704,     0,   710,   135,   125,     0,   130,     0,   130,
       0,   456,   335,     0,     0,   481,   501,    22,    22,    22,
      22,     0,   397,     0,     0,     0,   142,    87,     0,    77,
       0,     0,     0,     0,     0,     0,   403,   513,     0,   315,
     315,     0,   315,     0,     0,     0,   209,   263,     0,   209,
       0,     0,   393,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   549,     0,     0,     0,     0,     0,     0,
       0,    74,   502,     0,     0,     0,     0,     0,     0,   475,
       0,   264,   270,   271,   272,   280,     0,     0,   265,   276,
     267,   273,   274,   275,   266,   278,   281,     0,     0,     0,
     277,   279,   283,   286,   287,     0,   282,   284,   285,   269,
     268,     0,     0,     0,   428,     0,   420,   416,   419,   387,
     412,   323,   502,   315,   752,     0,    30,    39,    40,     0,
       0,    33,    27,     0,     0,   707,   698,   703,     0,   705,
       0,     0,   711,   128,     0,     0,   126,     0,   500,   469,
     468,   453,   455,   458,     0,   487,     0,     0,     0,     0,
       0,     0,   346,     0,   399,     0,     0,   146,   150,   145,
     149,   144,   148,   147,   151,     0,     0,     0,    86,     0,
       0,     0,   348,     0,    78,    51,     0,   400,   509,   510,
     511,   512,     0,   507,     0,     0,   502,   502,   396,   502,
      59,     0,   449,     0,   257,     0,     0,   208,     0,     0,
     356,     0,     0,   355,   395,     0,     0,     0,     0,     0,
     576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     568,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     554,   553,     0,   580,   394,   550,   527,     0,   526,     0,
       0,     0,     0,     0,    87,     0,     0,     0,     0,   381,
     382,    60,     0,     0,   451,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      12,   316,     0,   366,   367,     0,     0,     0,   503,   520,
       0,     0,     0,     0,   426,   425,   424,   427,   315,     0,
       0,     0,     0,   368,   209,     0,     0,     0,   209,     0,
       0,   315,     0,     0,   385,    87,   502,   754,    34,    29,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   738,   712,   713,   714,     0,     0,   131,   129,
     127,   463,   457,     0,     0,   483,   308,   307,   309,   310,
       0,     0,     0,     0,     0,     0,    94,    92,    93,     0,
      82,   316,     0,   320,     0,   388,    79,    76,     0,   508,
       0,   405,    22,    22,    22,     0,    52,     0,     0,     0,
     496,     0,     0,     0,     0,     0,   210,   256,   262,     0,
       0,     0,     0,   531,   530,     0,     0,     0,   525,     0,
       0,     0,   588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   548,   545,   546,   547,     0,     0,     0,
       0,   567,   580,   578,   579,     0,     0,   552,     0,   563,
       0,   371,   369,    73,    72,    71,    22,     0,     0,   391,
       0,     0,     0,    53,   474,   472,   473,   209,     0,     0,
       0,     0,   652,   209,   648,     0,     0,     0,   602,     0,
     656,     0,     0,     0,     0,     0,     0,     0,     0,   614,
       0,   607,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    80,    12,     0,   152,   658,   657,   632,     0,     0,
     651,     0,     0,    55,   503,   516,     0,    57,     0,     0,
     518,   504,     0,    49,    58,    50,    54,    22,    56,     0,
       0,     0,     0,     0,     0,   349,     0,   353,   502,     0,
     417,     0,     0,    22,     0,    32,    38,    44,    35,    36,
       0,     0,    43,    42,   735,   736,   737,     0,   701,   465,
       0,     0,   464,     0,     0,     0,   326,   398,     0,     0,
       0,     0,     0,     0,     0,    90,     0,     0,   365,     0,
       0,     0,   376,     0,     0,     0,     0,   450,   260,     0,
     254,     0,   258,     0,     0,     0,     0,     0,     0,   207,
       0,     0,     0,     0,   572,     0,   574,   577,     0,   582,
     163,   581,   163,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   570,     0,     0,     0,     0,     0,     0,
       0,     0,    88,     0,     0,   375,     0,     0,   679,     0,
     402,     0,     0,   390,   454,   452,     0,     0,   478,     0,
     364,   363,     0,     0,     0,   613,     0,   606,   604,   603,
     655,     0,     0,     0,   599,   612,     0,     0,     0,   611,
     609,   608,     0,     0,   601,     0,     0,     0,     0,   317,
       0,     0,     0,     0,     0,     0,     0,   155,   160,   633,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   514,     0,    47,   519,     0,     0,   521,     0,
      22,    48,     0,     0,   350,     0,   351,   354,    22,    87,
       0,   386,     0,     0,     0,     0,     0,     0,   466,   467,
       0,     0,   311,   141,   140,   138,   136,   139,   137,     0,
      83,     0,   318,   319,     0,     0,     0,   407,     0,   380,
      12,     0,     0,     0,   296,     0,     0,   495,   261,   255,
     259,     0,   360,     0,     0,     0,   357,     0,     0,     0,
     205,   590,     0,     0,     0,   587,     0,     0,   591,     0,
       0,     0,     0,     0,   569,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   551,   564,   562,
     373,   663,   663,   663,   693,     0,   663,   663,   663,     0,
     660,   677,   661,   678,     0,     0,     0,     0,     0,   470,
       0,   471,   639,   637,     0,     0,    64,     0,     0,     0,
       0,     0,     0,    64,     0,     0,     0,     0,     0,     0,
      81,   634,   154,   159,   158,    12,     0,     0,   153,   650,
       0,     0,     0,     0,     0,   638,     0,     0,     0,   636,
     515,   517,     0,     0,     0,     0,     0,   162,   659,   352,
       0,    22,   418,   345,     0,     0,    31,    37,   706,     0,
       0,     0,     0,   410,   408,   389,   406,     0,   253,     0,
     250,   252,     0,   344,   343,     0,     0,   342,     0,   494,
       0,     0,     0,     0,     0,   529,   528,     0,     0,     0,
       0,   584,   583,     0,     0,   597,   593,     0,   592,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   565,     0,   566,    89,    64,     0,   662,
       0,     0,   315,     0,     0,     0,   315,     0,     0,     0,
     315,   695,     0,   696,     0,     0,     0,   315,     0,     0,
       0,   315,     0,     0,     0,   315,   676,     0,   339,     0,
       0,     0,   479,   647,   598,    61,    63,   654,     0,     0,
      70,     0,     0,     0,     0,     0,     0,   629,     0,   600,
     654,   624,   622,   615,   646,   631,   630,     0,   156,   157,
     649,     0,   641,   644,     0,   640,   642,     0,     0,    46,
       0,     0,     0,   423,     0,     0,   340,   341,   462,   461,
     460,   459,     0,    84,     0,     0,     0,     0,   251,     0,
       0,   297,   298,   493,   492,   362,   361,   359,   358,     0,
       0,   589,   585,   591,     0,   594,     0,   595,   591,   591,
       0,   591,   591,   544,   571,     0,     0,   591,   591,     0,
       0,   559,   560,   561,     0,     0,     0,   685,   688,   691,
     502,   683,   686,   689,   502,   684,   687,   690,   502,   694,
     692,    64,     0,     0,     0,   502,     0,     0,     0,   502,
       0,     0,     0,   502,   370,     0,   392,   477,     0,    62,
       0,   619,     0,     0,    67,     0,   616,    69,     0,   620,
     617,   621,   618,     0,     0,     0,     0,   635,     0,     0,
     505,     0,    45,   161,     0,     0,   338,   503,     0,   523,
       0,     0,    91,   411,   409,     0,   377,    64,     0,   573,
     575,     0,     0,     0,   535,   596,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   669,   672,   675,     0,   667,   670,
     673,     0,   668,   671,   674,     0,   401,   476,   605,   653,
      68,    66,    65,     0,     0,   610,   625,   623,     0,     0,
     506,   421,   422,   522,   337,     0,   336,    85,     0,     0,
     299,   586,     0,   591,     0,     0,   591,     0,     0,   591,
     591,     0,     0,     0,     0,     0,     0,   374,   682,   680,
     681,     0,     0,     0,     0,     0,     0,     0,     0,   503,
     524,     0,     0,   533,     0,   536,   539,     0,   541,   543,
       0,     0,   538,   542,     0,     0,   555,   557,   372,   666,
     664,   665,     0,     0,     0,   645,   643,   383,   379,     0,
       0,     0,     0,   556,   558,     0,     0,     0,     0,   534,
     540,   532,   537,     0,   627,     0,   384,     0,     0,   628,
     626
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1359, -1359, -1359,  -482,  -223,     3, -1359,  2095,  2126,  -302,
     181,  -887,  -662,  -516, -1060, -1359, -1358,  -599,  -486, -1359,
   -1359,  -542, -1359,    90,  -332,  -808,  1146,  -883,   -31,  2157,
    2143, -1359, -1359, -1359,  1986, -1359, -1359, -1359,  1980, -1359,
   -1359, -1359, -1359,  1592,    70,   454,  -667, -1359,  -552,  -448,
   -1058, -1359,  -285, -1359,   -32, -1359,  -747,   -73,   166, -1359,
     713,  1388,  -509, -1359, -1359,  -341,  -364, -1359, -1359, -1359,
    1771,   797,  -431,  -704,  1031, -1359, -1359, -1359, -1359, -1359,
   -1359, -1359, -1359, -1359,  -525, -1359, -1359, -1359, -1359, -1359,
   -1359, -1359, -1359, -1359,  1656, -1359, -1359,   864, -1359, -1359,
   -1359,  -492, -1109,  -386,   487,   600, -1359,  1506,    -6,   447,
     -12, -1359, -1359,  -340,  1169, -1359, -1359,  1455,  -925, -1359,
   -1359,   814, -1359, -1359,  1785,   175,  1720,  1041,  1233, -1359,
    -190,  -464,  -718, -1359, -1359,   946,  -870,  1129,  1559,   443,
   -1359,  1602, -1359,  -619, -1359, -1359, -1127,  -618, -1359,  -621,
    1244, -1359,  1220,   130, -1359,  -498, -1359,  -647, -1359, -1359,
     678,  1383, -1074, -1359,   865,  -299, -1086, -1359, -1359,   726,
     936,  1715, -1359, -1359,  1691, -1359, -1359,  1692, -1359, -1359,
     720,  -511,  1134,  1941, -1359, -1359, -1359, -1359, -1359, -1359
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     7,     8,    86,   389,   529,    10,    19,    20,   363,
     423,   712,   713,   910,   530,  1546,  1547,  1550,  1551,   651,
     652,   599,   600,   869,   758,   759,  1201,  1202,   950,    11,
      39,    12,    96,   183,   184,    13,    97,   190,   191,    14,
     179,   325,   377,   725,   265,   486,   596,   597,   755,   756,
     870,  1256,  1257,   892,  1145,   136,   788,  1552,    88,  1459,
    1460,   617,   618,   692,   693,    89,   425,  1325,   341,   342,
     343,   458,   501,   872,   953,   954,    15,    98,   468,    30,
     348,   281,   193,   336,   531,  1208,  1207,  1507,  1320,  1153,
    1838,  1111,  1149,  1212,   607,   532,  1316,  1317,  1596,  1595,
     533,   534,   698,   699,  1583,  1584,   887,   888,   459,   463,
     390,   781,   843,   438,   844,   731,   732,   733,  1133,   734,
     846,  1218,  1219,   344,   345,   346,   396,   970,   971,   535,
     586,   587,  1763,  1091,   774,  1085,  1086,   879,   880,  1699,
    1700,   643,   644,   645,   822,   646,  1634,   647,   648,   811,
     800,   801,  1015,   993,  1342,  1487,  1488,  1076,  1396,  1403,
    1670,  1051,  1077,   893,  1381,  1512,  1382,  1383,  1384,  1374,
    1375,   431,   484,   567,   568,   569,   570,   571,   368,   369,
     572,   573,   927,   321,   322,    93,   175,   317,   420,    16
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      87,   543,  1291,     9,  1259,   796,   797,   697,   700,  1134,
     138,     9,   620,   873,   812,   813,   814,   364,   366,   874,
    1099,   823,   714,  1265,  1269,   896,  1026,   196,    44,   502,
    1120,   503,   504,   337,   655,   434,   969,  1485,   588,   589,
     590,   914,    33,  1081,   909,  1560,   263,   911,   912,   414,
     135,   137,   440,   337,   365,   952,   711,   574,  1671,   574,
     764,   722,   421,   427,   785,   176,  1144,   791,   195,   177,
     594,   574,  -143,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,  1112,   256,  1020,
    1151,  1038,  1040,   615,   702,   615,   615,   437,    44,    21,
     875,    99,   -22,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   195,
      44,   258,   615,   593,  1227,   391,  1046,   603,  1380,  1636,
     308,  1055,  1040,   582,  1058,   615,  1034,   154,  1065,   615,
    1090,   810,   838,   656,  1035,  1036,   362,   465,   786,   601,
     889,   792,   -22,    22,   810,   388,    44,  1411,   776,   777,
    1236,   779,    44,   897,   900,    91,    23,  1250,   834,   307,
       1,   195,   309,   439,   913,    24,  1292,   435,   -22,   318,
     605,  1012,  -404,   903,  1050,  1679,  1823,   722,    44,   722,
     926,   362,  1059,  1050,   319,   946,   102,   103,   104,   956,
     783,   947,   948,   946,   711,  1164,   320,   711,   711,   947,
     948,  1199,   388,  1672,  1461,   946,    47,    48,   905,  1200,
     330,   947,   948,   129,   131,   132,   133,   134,   337,   391,
     142,   144,  1117,  1118,  1119,  1121,  1296,   349,    34,   946,
    1458,   601,   915,   916,   350,   947,   948,   351,   352,   353,
      92,     1,   906,  -404,   782,   498,  1082,  1486,   356,   388,
     357,   358,   359,   340,   360,   737,   738,   739,   740,   422,
    1217,   264,    25,  1733,   415,   338,  1224,  -404,  -404,   883,
     339,  -428,   575,  1348,   723,   226,   227,   228,  1353,  1681,
    1537,   595,   962,   963,  -143,   964,   726,  -404,  -143,   871,
     602,   154,   413,  1380,  1040,   871,   914,    34,    26,   391,
    1561,  1562,   613,  1564,  -442,  1041,  1545,  1039,   391,  1042,
    1021,  -378,   898,  1545,   894,   898,  1022,  1152,   606,  1769,
     866,   757,   757,  1237,   362,   475,   436,  -404,    31,   914,
     895,   899,   442,  1631,  1632,   876,  1272,   166,   167,   168,
     169,   170,   884,  1461,  1072,  1449,  1450,  1635,  1454,  1073,
    1672,   616,   657,   890,  -442,  1041,  1102,  1104,  1239,  1042,
    1106,  1139,   224,  1143,   619,   476,   884,  1037,   898,  1458,
    1362,   714,  1122,  1123,  1230,   383,   340,  -305,  1446,  1434,
     926,  -305,  -305,  1364,   362,  1422,  1230,   773,   951,    35,
     601,   885,   886,  1168,   866,   784,  1451,   493,  1171,   384,
     385,   475,   711,   711,   711,   711,   711,   711,  1088,   933,
     362,  1288,  1113,   952,   433,   885,   886,  1545,  1089,   386,
     866,   934,  1121,  -404,   949,   383,  -428,  1097,    17,   580,
     581,   706,  1016,   583,   595,  1167,    47,    48,  1649,    32,
    1108,   476,  1172,    17,  1018,  1674,   388,  1416,    -3,   384,
     385,  1441,    18,  1506,  1672,  1043,  1669,  1678,  -485,   387,
     338,  1044,  -485,  1687,  1138,   339,  1141,    42,  1070,   386,
      -2,   224,  1725,  1726,     1,   180,   270,   614,  1045,   951,
     871,   181,  1360,   395,   951,  1056,   658,   951,   871,   871,
    1361,   951,   182,   694,   180,  1166,     1,  1074,   871,   703,
     181,  1170,   373,   168,   169,   170,  1271,  1371,  1372,   387,
     489,   182,   490,  -428,   908,    36,  1089,   915,   916,    47,
      48,  1479,  -428,  1373,  1337,  1338,    41,  1041,   577,  1115,
     579,  1042,  1729,  1480,  1103,  1580,   760,  1694,   224,  1633,
       2,   225,   831,   367,   832,   318,   775,  1089,  1363,  1365,
     915,   916,   959,  1002,   787,   388,   697,   787,  1013,  1014,
     319,  1545,     2,   224,  1285,  1588,  1002,   282,  1750,  1751,
    1613,  1614,   320,  1589,  1752,   833,  1618,  1619,  1620,  1621,
      37,  1756,  1757,  1625,  1626,  1627,  1628,  1290,   497,   172,
     499,    38,   266,   173,     3,  1157,  1047,   267,    44,   848,
    1758,  1759,   711,  1417,  1447,   388,    17,  1418,   151,   152,
     153,   171,   477,     4,  1289,   154,     3,  1545,   374,   172,
     819,   375,   810,   173,   376,  1508,   539,   540,   849,  1791,
    1154,  1155,  1156,   850,   851,     4,   478,    94,   852,   853,
     854,   479,   855,   395,     5,   856,    95,  1513,  1048,   384,
     385,  1509,   707,   708,   709,  1590,   100,   857,   858,   859,
     860,  1140,     6,  1591,   861,   224,     5,   931,   355,  1510,
     710,   384,   385,  1509,   748,   185,   186,   478,   105,  1701,
     871,   941,   742,   101,     6,   443,   951,   748,   444,   187,
    1387,  1514,   871,   750,  1209,   752,   862,   863,   908,  1846,
     820,   957,   188,    47,    48,   106,   750,   871,   752,   -34,
     821,  1502,   754,  1504,   398,   399,   224,   189,  1371,  1372,
     311,   787,  1142,  1557,   864,   754,   107,     1,   865,  1563,
     400,  1565,  1566,   982,  1373,   707,   708,   709,   145,   146,
     108,   147,   148,   149,   150,   151,   152,   153,   747,   714,
     922,   109,   154,   710,   383,   155,   156,   157,   158,   159,
    1322,  1323,   511,  1069,   110,  1279,  1017,   749,  1019,   751,
    1124,  1125,  1126,  1376,  1377,    28,   951,    29,   384,   385,
    1293,  1294,  1599,   711,   711,   443,   753,  1517,   736,  1378,
     519,   111,  1471,  1524,  1472,  1473,  1474,   768,   386,   224,
    1773,  1225,  1249,   172,   195,  1776,  1071,   173,  1779,  1780,
     763,   384,   385,  1509,   112,  1385,   172,   384,   385,  1509,
     173,   769,   770,   113,  1049,   166,   167,   168,   169,   170,
     392,  1518,   787,  1235,   393,   172,   787,  1525,   387,   173,
     866,   771,  1528,  1078,   867,   487,   868,   488,   761,  1629,
    1630,   185,   186,   762,   528,   145,   146,   114,   147,   148,
     149,   150,   151,   152,   153,   187,   384,   385,  1509,   154,
     277,  1132,  1132,   115,   157,   158,   159,  1280,   188,  1079,
     871,   772,  1554,  1556,   403,  1080,  1529,   172,   404,   405,
    1521,   173,  1074,   189,  1522,  1523,  1150,  1521,   116,  1444,
    1445,  1600,  1523,   994,   995,   996,   997,   998,   999,  1000,
     787,   576,   174,   578,  1169,  1007,  1008,  1009,  1010,   707,
     708,   709,  1677,  1174,  1176,  1677,   117,  1677,  1179,  1181,
     -34,   -34,   609,   610,   388,   612,     1,   710,   992,   992,
     992,   992,   992,   992,   992,   992,   401,   835,  1435,   836,
     402,   992,   992,   992,   992,   160,  1440,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   478,   789,  1214,
    1532,   511,   765,   790,   118,   787,  1261,   388,  1222,  1223,
     789,   787,   416,   478,   -12,   793,   119,   877,   840,   878,
    1231,  1232,  1233,  1749,   384,   385,  1509,   471,   667,   519,
     120,   472,  1243,   121,  1245,  1246,  1248,  1749,   -12,   -12,
     -12,  1258,   122,   871,  1533,   192,   965,   195,   123,  1266,
    1270,   966,   677,   678,   679,   987,  1275,  1276,   -12,   871,
     988,   747,   124,   871,   871,   871,   871,   871,   871,  1283,
     697,   697,   685,  1516,  1520,  1251,  1315,  1527,  1531,  1535,
     749,  1640,   751,  1002,   881,  1644,   878,   125,  1003,  1648,
    1002,  1822,  1824,   528,   743,  1004,  1655,  1002,   744,   753,
    1659,   126,  1005,  1302,  1663,   162,   163,   164,   165,   166,
     167,   168,   169,   170,  1312,  1712,   178,   195,   871,   127,
    1716,  1717,  1802,  1719,  1720,   128,   446,   447,  1002,  1723,
    1724,  1568,  1569,  1006,   448,   449,   450,   451,   452,  1585,
     798,   222,   453,  1340,   799,  1615,   454,   455,  1511,  1515,
    1519,  1345,   257,  1526,  1530,  1534,  1180,  1182,  1032,   259,
    1652,  1653,  1654,  1033,  1656,  1657,  1658,  1192,  1660,  1661,
    1662,  1264,  1268,  1114,  1092,   918,  1730,   919,  1092,  1093,
    1731,   729,   261,  1095,  1732,   730,   456,   457,   272,  1844,
     461,  1737,  1116,   789,  1395,  1741,   460,   462,  1105,  1745,
    1849,  1850,   789,   260,   446,   447,  1402,  1107,   871,  1703,
    1704,  1379,   448,   449,   450,   451,   452,   262,  1147,   268,
     453,  1413,  1414,  1148,   454,   455,   871,   973,   269,   789,
    1273,   974,  1423,  1424,  1221,  1274,  1427,  1428,   273,  1430,
     976,   145,   146,  1315,   977,  1433,  1273,   789,   151,   152,
     153,  1281,  1284,   789,   789,   154,   789,   789,  1286,  1287,
     279,  1332,  1336,   274,   456,   457,   789,   478,  1132,  1132,
     980,  1439,  1463,   976,   981,  1804,  1715,  1160,  1807,  1452,
     478,  1810,  1811,  1466,   195,  1464,  1457,   478,  1467,   718,
     720,   275,  1538,  1273,  1470,   871,   133,   134,  1579,   478,
     478,   789,   154,   789,  1586,  1587,  1605,  1477,  1606,   276,
     280,  1481,  1482,   697,  1346,  1347,   789,  1349,  1350,  1351,
    1352,  1607,   316,  1379,  1356,  1357,  1358,  1359,   789,   871,
    1273,   871,   871,  1608,  1695,  1692,   478,   871,   323,  1696,
     326,  1734,   478,   871,   871,   871,   324,  1735,   327,   328,
     992,   992,   478,   992,   992,   992,   992,  1736,   329,   478,
     992,   992,   992,   992,  1738,   195,   195,   195,   172,  1558,
     478,   478,   173,  1792,   478,  1739,  1740,  1793,   478,  1742,
     331,  1794,   478,  1743,  1258,  1258,  1379,  1744,  1695,  1571,
    1258,  1765,   871,  1764,  1574,   332,  1766,   478,   478,  1379,
    1577,  1161,  1819,  1820,   478,  1162,  1379,   333,   334,  1821,
    1309,   745,   746,   917,  1310,   918,   976,   919,  1567,  1114,
    1329,   918,  1161,   919,   335,  1366,  1330,  1366,   871,  1367,
     976,  1369,  1390,  1601,  1389,   976,  1391,   747,   748,  1394,
    1060,   224,    44,   848,  1436,  1420,  1610,  1493,  1437,  1002,
     347,  1494,   361,  1503,   951,   951,   749,   750,   751,   752,
     362,  1622,  1379,   164,   165,   166,   167,   168,   169,   170,
    1002,   371,   849,   372,  1505,   753,   754,   850,   851,   379,
     380,  1592,   852,   853,   854,  1593,   855,   381,   621,   856,
     382,   394,   337,   397,   406,   871,   407,   424,   419,   426,
     428,   857,   858,   859,   860,   429,   871,   871,   861,  1668,
    1379,   430,   432,   263,  1061,    44,   388,   437,     1,   195,
     445,  1495,   195,   467,   195,   469,   470,   473,   474,   967,
     480,    44,    45,    46,   481,   482,    47,    48,    49,   483,
     862,   863,   485,   492,   494,   622,  1691,   500,   505,  1379,
     536,   537,   538,   511,   541,   542,   623,   624,    50,    51,
      52,   585,  1702,   591,  1376,  1377,   -12,   598,   864,   592,
     604,   608,   865,   461,   611,   606,   650,  1709,   653,   704,
    1378,   519,   701,   724,   741,   715,   716,   757,   766,   767,
     -12,   -12,   -12,   778,   780,   794,   810,   795,   625,   642,
     802,   803,  1727,  1728,   804,  1163,   805,    44,    45,    46,
     -12,   806,    47,    48,    49,   807,   808,   809,   815,   826,
     816,   817,   818,   830,   839,   626,   627,   628,   629,   630,
     631,   632,   633,   828,    50,    51,    52,   827,   829,   841,
     842,   634,   635,   636,   637,   528,  1612,   638,   639,   640,
     641,  1754,   145,   146,  1379,   147,   148,   149,   150,   151,
     152,   153,  1761,   845,   312,   313,   154,   891,  1062,   155,
     156,   157,   158,   159,   904,   907,  1770,   929,   928,  1771,
     930,   935,   936,   937,   866,   938,   939,   942,   867,   940,
     868,   943,   960,  1783,  1784,   145,   146,   944,   147,   148,
     149,   150,   151,   152,   153,   945,   972,   958,    53,   154,
    1379,    54,    55,   983,    56,    57,    58,    59,    60,    61,
     984,    62,    63,   975,   979,  1001,  1797,  1798,   985,   642,
      64,    65,   986,  1011,  1029,    66,  1801,  1031,    67,    68,
      69,    70,  1023,  1028,    71,    72,    73,    74,  1024,    75,
      76,  1025,  1027,  1030,     1,  1083,  1084,  1052,    77,    78,
      79,  1053,  1054,    80,    81,  1087,  1094,  1101,  1109,  1096,
      82,  -209,  1057,    83,  1064,  -209,  1110,  1066,   968,  1127,
      84,    85,  1067,  1068,    53,  1100,  1098,    54,    55,  1136,
      56,    57,    58,    59,    60,    61,  -735,    62,    63,  1135,
    -736,  -737,  1128,  1843,  1146,  1845,    64,    65,  1158,  1159,
    1178,    66,  1184,  1183,    67,    68,    69,    70,  1185,  1193,
      71,    72,    73,    74,  1186,    75,    76,  1187,  1210,  1205,
    1188,  1189,  1190,  1191,    77,    78,    79,  1194,  1195,    80,
      81,  1196,  1197,  1206,  1211,  1213,    82,  -209,  1220,    83,
    1226,  -209,  1228,  1234,   968,  1238,    84,    85,  1252,  1240,
      44,    45,    46,  1244,  1277,    47,    48,    49,   878,   160,
     314,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,  1282,   446,   447,  1295,   919,  1300,    50,    51,    52,
     448,   449,   450,   451,   452,  1301,   315,  1303,   453,  1304,
    1319,  1305,   454,   455,  1321,  1306,  1307,  1308,  1324,  1326,
    1328,   968,  1331,  1341,  1343,  1333,  1334,   164,   165,   166,
     167,   168,   169,   170,  1335,  1344,   500,  1354,  1355,  1370,
    1388,  1386,  1252,  1368,    44,    45,    46,  1400,  1253,    47,
      48,    49,   456,   457,  1404,  1401,  1408,  1442,  1254,  1410,
    1412,  1415,  1421,  1419,  1426,  1443,  1448,  1465,  1453,  1475,
    1483,    50,    51,    52,  1476,  1484,  1539,  1489,  1490,  1491,
    1492,   145,   146,  1496,   147,   148,   149,   150,   151,   152,
     153,  1497,  1498,  1499,  1500,   154,  1501,  1540,   155,   156,
     157,   158,   159,  1541,  1581,  1543,  1216,  1570,  1582,  1602,
    1611,  1603,  1616,  1617,  1623,  1624,  1637,  1638,  1639,  1641,
    1642,  1643,  1253,  1645,  1646,  1647,  1664,  1666,  1651,  1665,
    1685,  1686,  1254,  1693,  1675,  1694,    44,    45,    46,  1697,
    1705,    47,    48,    49,  1706,  1707,  1708,    53,  1711,  1713,
      54,    55,  1714,    56,    57,    58,    59,    60,    61,  1746,
      62,    63,  1718,    50,    51,    52,  1721,  1722,  1672,    64,
      65,  1263,  1767,  1768,    66,  1772,  1788,    67,    68,    69,
      70,  1549,  1774,    71,    72,    73,    74,  1676,    75,    76,
    1775,  1777,  1778,  1781,  1782,  1787,  1789,    77,    78,    79,
    1790,  1795,    80,    81,  1255,  1799,  1803,  1818,  1805,    82,
    1806,  1808,    83,  1809,  1828,  1089,  1812,  1813,  1816,    84,
      85,    53,  1835,  1817,    54,    55,  1829,    56,    57,    58,
      59,    60,    61,  1830,    62,    63,    43,  1831,  1675,  1832,
      44,    45,    46,    64,    65,    47,    48,    49,    66,  1833,
    1834,    67,    68,    69,    70,  1836,  1837,    71,    72,    73,
      74,  1839,    75,    76,  1840,  1841,  1842,    50,    51,    52,
      90,    77,    78,    79,  1204,    27,    80,    81,    40,   271,
     278,   727,  1598,    82,   466,  1549,    83,   978,  1313,   649,
    1456,  1680,  1762,    84,    85,  1698,   464,   932,   160,   495,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     901,  1215,  1327,    53,  1542,  1165,    54,    55,  1800,    56,
      57,    58,    59,    60,    61,   496,    62,    63,   584,  1431,
    1675,  1278,    44,    45,    46,    64,    65,    47,    48,    49,
      66,  1177,  1198,    67,    68,    69,    70,   882,  1684,    71,
      72,    73,    74,  1063,    75,    76,   825,  1650,  1536,    50,
      51,    52,   705,    77,    78,    79,     0,  1462,    80,    81,
     717,  1297,   719,   370,     0,    82,     0,  1549,    83,     0,
       0,     0,     0,  1682,     0,    84,    85,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1468,     0,    44,    45,    46,     0,
       0,    47,    48,    49,     0,     0,     0,    53,     0,     0,
      54,    55,     0,    56,    57,    58,    59,    60,    61,     0,
      62,    63,     0,    50,    51,    52,     0,     0,     0,    64,
      65,     0,     0,     0,    66,     0,     0,    67,    68,    69,
      70,     0,     0,    71,    72,    73,    74,     0,    75,    76,
       0,     0,     0,     0,     0,     0,     0,    77,    78,    79,
       0,     0,    80,    81,     0,     0,     0,     0,     0,    82,
       0,     0,    83,     0,     0,     0,     0,     0,     0,    84,
      85,     0,     0,     0,     0,     0,  1548,     0,    44,    45,
      46,     0,     0,    47,    48,    49,     0,     0,     0,    53,
       0,     0,    54,    55,     0,    56,    57,    58,    59,    60,
      61,     0,    62,    63,     0,    50,    51,    52,     0,     0,
       0,    64,    65,     0,     0,     0,    66,     0,     0,    67,
      68,    69,    70,  1549,     0,    71,    72,    73,    74,     0,
      75,    76,     0,     0,     0,     0,     0,     0,     0,    77,
      78,    79,     0,     0,    80,    81,     0,     0,     0,     0,
       0,    82,     0,     0,    83,     0,     0,     0,     0,     0,
       0,    84,    85,    53,     0,     0,    54,    55,     0,    56,
      57,    58,    59,    60,    61,     0,    62,    63,     0,     0,
    1553,     0,    44,    45,    46,    64,    65,    47,    48,    49,
      66,     0,     0,    67,    68,    69,    70,     0,     0,    71,
      72,    73,    74,     0,    75,    76,     0,     0,     0,    50,
      51,    52,     0,    77,    78,    79,     0,     0,    80,    81,
       0,     0,     0,     0,     0,    82,     0,  1549,    83,     0,
    1469,     0,     0,     0,     0,    84,    85,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    53,     0,     0,    54,    55,
       0,    56,    57,    58,    59,    60,    61,     0,    62,    63,
       0,     0,  1555,     0,    44,    45,    46,    64,    65,    47,
      48,    49,    66,     0,     0,    67,    68,    69,    70,     0,
       0,    71,    72,    73,    74,     0,    75,    76,     0,     0,
       0,    50,    51,    52,     0,    77,    78,    79,     0,     0,
      80,    81,     0,     0,     0,     0,     0,    82,     0,  1549,
      83,     0,     0,     0,     0,     0,     0,    84,    85,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   441,     0,    44,    45,
      46,     0,     0,    47,    48,    49,     0,     0,     0,    53,
       0,     0,    54,    55,     0,    56,    57,    58,    59,    60,
      61,     0,    62,    63,     0,    50,    51,    52,     0,     0,
       0,    64,    65,     0,     0,     0,    66,     0,     0,    67,
      68,    69,    70,     0,     0,    71,    72,    73,    74,     0,
      75,    76,     0,     0,     0,     0,     0,     0,     0,    77,
      78,    79,     0,     0,    80,    81,     0,     0,     0,     0,
       0,    82,     0,     0,    83,     0,     0,     0,     0,     0,
       0,    84,    85,     0,     0,     0,     0,  1203,     0,    44,
      45,    46,     0,     0,    47,    48,    49,     0,     0,     0,
       0,    53,     0,     0,    54,    55,     0,    56,    57,    58,
      59,    60,    61,     0,    62,    63,    50,    51,    52,     0,
       0,     0,     0,    64,    65,     0,     0,     0,    66,     0,
       0,    67,    68,    69,    70,     0,     0,    71,    72,    73,
      74,     0,    75,    76,     0,     0,     0,     0,     0,     0,
       0,    77,    78,    79,     0,     0,    80,    81,     0,     0,
       0,     0,     0,    82,     0,     0,    83,     0,     0,     0,
       0,     0,     0,    84,    85,    53,     0,     0,    54,    55,
       0,    56,    57,    58,    59,    60,    61,     0,    62,    63,
       0,     0,  1242,     0,    44,    45,    46,    64,    65,    47,
      48,    49,    66,     0,     0,    67,    68,    69,    70,     0,
       0,    71,    72,    73,    74,     0,    75,    76,     0,     0,
       0,    50,    51,    52,     0,    77,    78,    79,     0,     0,
      80,    81,     0,     0,     0,     0,     0,    82,     0,     0,
      83,     0,     0,     0,     0,     0,     0,    84,    85,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    53,     0,     0,    54,
      55,     0,    56,    57,    58,    59,    60,    61,     0,    62,
      63,     0,     0,  1247,     0,    44,    45,    46,    64,    65,
      47,    48,    49,    66,     0,     0,    67,    68,    69,    70,
       0,     0,    71,    72,    73,    74,     0,    75,    76,     0,
       0,     0,    50,    51,    52,     0,    77,    78,    79,     0,
       0,    80,    81,     0,     0,     0,     0,     0,    82,     0,
       0,    83,     0,     0,     0,     0,     0,     0,    84,    85,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1753,     0,    44,
      45,    46,     0,     0,    47,    48,    49,     0,     0,     0,
       0,    53,     0,     0,    54,    55,     0,    56,    57,    58,
      59,    60,    61,     0,    62,    63,    50,    51,    52,     0,
       0,     0,     0,    64,    65,     0,     0,     0,    66,     0,
       0,    67,    68,    69,    70,     0,     0,    71,    72,    73,
      74,     0,    75,    76,     0,     0,     0,     0,     0,     0,
       0,    77,    78,    79,     0,     0,    80,    81,     0,     0,
       0,     0,     0,    82,     0,     0,    83,     0,     0,     0,
       0,     0,     0,    84,    85,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    53,     0,     0,    54,    55,     0,    56,    57,
      58,    59,    60,    61,     0,    62,    63,     0,     0,     0,
       0,     0,     0,     0,    64,    65,     0,     0,     0,    66,
       0,     0,    67,    68,    69,    70,     0,     0,    71,    72,
      73,    74,     0,    75,    76,     0,     0,     0,     0,     0,
       0,     0,    77,    78,    79,     0,     0,    80,    81,     0,
       0,     0,     0,     0,    82,     0,     0,    83,     0,     0,
       0,     0,     0,     0,    84,    85,    53,     0,     0,    54,
      55,     0,    56,    57,    58,    59,    60,    61,     0,    62,
      63,     0,     0,     0,     0,    44,    45,    46,    64,    65,
      47,    48,    49,    66,     0,     0,    67,    68,    69,    70,
       0,     0,    71,    72,    73,    74,     0,    75,    76,     0,
       0,     0,    50,    51,    52,     0,    77,    78,    79,     0,
       0,    80,    81,     0,     0,     0,     0,     0,    82,     0,
       0,    83,     0,     0,     0,     0,     0,     0,    84,    85,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   745,
     746,     0,     0,     0,     0,     0,   824,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   623,   624,     0,
     130,     0,    44,    45,    46,   747,   748,    47,    48,    49,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   749,   750,   751,   752,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   625,
       0,     0,     0,   753,   754,     0,     0,     0,     0,    44,
      45,    46,     0,     0,    47,    48,    49,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   626,   627,   628,   629,
     630,   631,   632,   633,     0,     0,    50,    51,    52,     0,
       0,     0,   634,   635,   636,   637,     0,     0,   638,   639,
     640,   641,    53,     0,     0,    54,    55,     0,    56,    57,
      58,    59,    60,    61,     0,    62,    63,     0,     0,     0,
       0,     0,     0,     0,    64,    65,     0,     0,     0,    66,
       0,     0,    67,    68,    69,    70,     0,     0,    71,    72,
      73,    74,     0,    75,    76,     0,     0,     0,     0,   747,
     748,     0,    77,    78,    79,     0,     0,    80,    81,     0,
       0,     0,     0,     0,    82,     0,     0,    83,   749,   750,
     751,   752,     0,     0,    84,    85,     0,    44,    45,    46,
     642,     0,    47,    48,    49,     0,     0,   753,   754,    53,
       0,     0,    54,    55,     0,    56,    57,    58,    59,    60,
      61,     0,    62,    63,    50,    51,    52,     0,     0,     0,
       0,    64,    65,     0,     0,     0,    66,     0,     0,    67,
      68,    69,    70,     0,     0,    71,    72,    73,    74,     0,
      75,    76,     0,     0,     0,     0,    53,     0,     0,    54,
      55,     0,    56,    57,    58,    59,    60,    61,     0,    62,
      63,    82,     0,     0,    83,     0,     0,     0,    64,    65,
       0,     0,     0,    66,     0,     0,    67,    68,    69,    70,
       0,     0,    71,    72,    73,    74,  1262,    75,    76,     0,
       0,     0,     0,     0,     0,     0,    77,    78,    79,     0,
       0,    80,    81,     0,     0,     0,     0,     0,    82,     0,
       0,    83,     0,     0,     0,     0,     0,     0,    84,    85,
       0,     0,    44,    45,    46,     0,     0,    47,    48,    49,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    50,
      51,    52,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    53,     0,     0,    54,    55,     0,
      56,    57,    58,    59,    60,    61,     0,    62,    63,     0,
       0,     0,     0,     0,     0,     0,    64,    65,     0,     0,
       0,    66,     0,     0,    67,    68,    69,    70,     0,     0,
      71,    72,    73,    74,     0,    75,    76,     0,     0,     0,
       0,     0,     0,     0,    77,    78,    79,     0,     0,    80,
      81,  1267,     0,     0,     0,     0,    82,     0,     0,    83,
       0,     0,     0,   867,     0,  1263,    84,    85,    44,    45,
      46,     0,     0,    47,    48,    49,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,    51,    52,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1314,     0,     0,     0,     0,     0,  1455,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    53,
       0,     0,    54,    55,     0,    56,    57,    58,    59,    60,
      61,     0,    62,    63,     0,     0,     0,     0,    44,    45,
      46,    64,    65,    47,    48,    49,    66,     0,     0,    67,
      68,    69,    70,     0,     0,    71,    72,    73,    74,     0,
      75,    76,     0,     0,     0,    50,    51,    52,     0,    77,
      78,    79,     0,     0,    80,    81,     0,     0,     0,     0,
       0,    82,     0,     0,    83,     0,     0,     0,   867,     0,
    1263,    84,    85,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1253,     0,     0,     0,
       0,     0,     0,    44,    45,    46,  1254,     0,    47,    48,
      49,     0,     0,     0,     0,    53,     0,     0,    54,    55,
       0,    56,    57,    58,    59,    60,    61,     0,    62,    63,
      50,    51,    52,     0,     0,     0,     0,    64,    65,     0,
       0,     0,    66,     0,     0,    67,    68,    69,    70,     0,
       0,    71,    72,    73,    74,     0,    75,    76,     0,     0,
       0,     0,     0,     0,     0,    77,    78,    79,     0,     0,
      80,    81,     0,     0,     0,     0,     0,    82,     0,     0,
      83,     0,     0,     0,    44,    45,    46,    84,    85,    47,
      48,    49,     0,     0,     0,    53,     0,     0,    54,    55,
       0,    56,    57,    58,    59,    60,    61,     0,    62,    63,
       0,    50,    51,    52,     0,     0,     0,    64,    65,     0,
       0,     0,    66,     0,     0,    67,    68,    69,    70,     0,
       0,    71,    72,    73,    74,     0,    75,    76,     0,     0,
       0,     0,     0,     0,     0,    77,    78,    79,     0,     0,
      80,    81,     0,     0,     0,     0,     0,    82,     0,     0,
      83,     0,     0,     0,     0,     0,     0,    84,    85,    44,
      45,    46,     0,     0,    47,    48,    49,     0,     0,     0,
      53,     0,     0,    54,    55,     0,    56,    57,    58,    59,
      60,    61,     0,    62,    63,     0,    50,    51,    52,     0,
       0,     0,    64,    65,     0,     0,     0,    66,     0,     0,
      67,    68,    69,    70,     0,     0,    71,    72,    73,    74,
       0,    75,    76,     0,     0,     0,     0,     0,     0,     0,
      77,    78,    79,     0,     0,    80,    81,     0,     0,     0,
       0,     0,    82,     0,     0,    83,     0,   194,     0,    44,
      45,    46,    84,    85,    47,    48,    49,     0,     0,     0,
       0,    53,     0,     0,    54,    55,     0,    56,    57,    58,
      59,    60,    61,     0,    62,    63,    50,    51,    52,     0,
       0,     0,     0,    64,    65,     0,     0,     0,    66,     0,
       0,    67,    68,    69,    70,     0,     0,    71,    72,    73,
      74,     0,    75,    76,     0,     0,     0,     0,     0,     0,
       0,    77,    78,    79,     0,     0,    80,    81,     0,     0,
       0,     0,     0,    82,     0,     0,    83,     0,   255,     0,
       0,     0,     0,    84,    85,    44,    45,    46,     0,     0,
      47,    48,    49,     0,     0,     0,    53,     0,     0,    54,
      55,     0,    56,    57,    58,    59,    60,    61,     0,    62,
      63,     0,    50,    51,    52,     0,     0,     0,    64,    65,
       0,     0,     0,    66,     0,  1129,    67,    68,    69,    70,
       0,     0,    71,    72,    73,    74,     0,    75,    76,     0,
       0,     0,     0,     0,     0,     0,    77,    78,    79,     0,
       0,  1130,  1131,     0,     0,     0,     0,     0,    82,     0,
       0,    83,     0,     0,     0,    44,    45,    46,    84,    85,
      47,    48,    49,     0,     0,     0,    53,     0,     0,    54,
      55,     0,    56,    57,    58,    59,    60,    61,     0,    62,
      63,     0,    50,    51,    52,     0,     0,     0,    64,    65,
       0,     0,     0,    66,     0,     0,    67,    68,    69,    70,
    1314,     0,    71,    72,    73,    74,     0,    75,    76,     0,
       0,     0,     0,     0,     0,     0,    77,    78,    79,     0,
       0,    80,    81,     0,     0,     0,     0,     0,    82,     0,
       0,    83,     0,     0,     0,     0,  1216,     0,    84,    85,
      44,    45,    46,     0,     0,    47,    48,    49,     0,     0,
       0,     0,    53,     0,     0,    54,    55,     0,    56,    57,
      58,    59,    60,    61,     0,    62,    63,    50,    51,    52,
       0,     0,     0,     0,    64,    65,     0,     0,     0,    66,
       0,     0,    67,    68,    69,    70,     0,     0,    71,    72,
      73,    74,     0,    75,    76,     0,     0,     0,     0,     0,
       0,     0,    77,    78,    79,     0,     0,    80,    81,     0,
       0,     0,     0,     0,    82,     0,     0,    83,     0,  1260,
       0,    44,    45,    46,    84,    85,    47,    48,    49,     0,
       0,     0,    53,     0,     0,    54,    55,     0,    56,    57,
      58,    59,    60,    61,     0,    62,    63,     0,    50,    51,
      52,     0,     0,     0,    64,    65,     0,     0,     0,    66,
       0,     0,    67,    68,    69,    70,     0,     0,    71,    72,
      73,    74,     0,    75,    76,     0,     0,     0,     0,     0,
       0,     0,    77,    78,    79,     0,     0,    80,    81,     0,
       0,     0,     0,     0,    82,     0,     0,    83,     0,     0,
       0,     0,     0,     0,    84,    85,    44,    45,    46,     0,
       0,    47,    48,    49,     0,     0,     0,    53,     0,     0,
      54,    55,     0,    56,    57,    58,    59,    60,    61,     0,
      62,    63,     0,    50,    51,    52,     0,     0,     0,    64,
      65,     0,     0,     0,    66,     0,     0,    67,    68,    69,
      70,     0,     0,    71,    72,    73,    74,     0,    75,    76,
       0,     0,     0,     0,     0,     0,     0,    77,    78,    79,
       0,     0,    80,    81,     0,     0,     0,     0,     0,    82,
       0,     0,    83,     0,  1667,     0,    44,    45,    46,    84,
      85,    47,    48,    49,     0,     0,     0,     0,    53,     0,
       0,    54,    55,     0,    56,    57,    58,    59,    60,    61,
       0,    62,    63,    50,    51,    52,     0,     0,     0,     0,
      64,    65,     0,     0,     0,    66,     0,     0,    67,    68,
      69,    70,     0,     0,    71,    72,    73,    74,     0,    75,
      76,     0,     0,     0,     0,     0,     0,     0,    77,    78,
      79,     0,     0,    80,    81,     0,     0,     0,     0,     0,
      82,     0,     0,    83,     0,     0,     0,     0,     0,     0,
      84,    85,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    53,     0,     0,    54,    55,     0,    56,
      57,    58,    59,    60,    61,     0,    62,    63,     0,     0,
       0,     0,     0,     0,     0,    64,    65,     0,     0,     0,
      66,     0,     0,    67,    68,    69,    70,     0,     0,    71,
      72,    73,    74,     0,    75,    76,     0,     0,     0,     0,
       0,     0,     0,    77,    78,    79,     0,     0,    80,    81,
       0,     0,     0,     0,     0,  1175,     0,     0,    83,     0,
       0,     0,     0,     0,     0,    84,    85,     0,     0,     0,
       0,     0,     0,    53,     0,     0,    54,    55,     0,    56,
      57,    58,    59,    60,    61,     0,    62,    63,     0,     0,
       0,     0,     0,     0,     0,    64,    65,     0,     0,     0,
      66,     0,     0,    67,    68,    69,    70,     0,     0,    71,
      72,    73,    74,     0,    75,    76,   847,     0,    44,   848,
       0,     0,     0,    77,    78,    79,     0,     0,    80,    81,
       0,     0,     0,     0,     0,     0,     0,     0,    83,     0,
       0,     1,     0,     0,     0,    84,    85,     0,   849,     0,
       0,     0,     0,   850,   851,     0,     0,     0,   852,   853,
     854,     0,   855,     0,     0,   856,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   511,   857,   858,   859,
     860,     0,     0,     0,   861,     0,     0,  1376,  1377,   -12,
       0,     0,   847,     0,    44,   848,     0,     0,     0,     0,
       0,     0,     0,  1378,   519,     0,     0,     0,     0,     0,
       0,     0,     0,   -12,   -12,   -12,   862,   863,     0,     0,
       0,     0,     0,     0,   849,     0,     0,     0,     0,   850,
     851,     0,     0,   -12,   852,   853,   854,   847,   855,    44,
     848,   856,     0,     0,   864,     0,     0,     0,   865,     0,
       0,     0,     0,   857,   858,   859,   860,     0,     0,     0,
     861,     0,     0,     0,     0,     0,     0,     0,   528,   849,
       0,     0,     0,     0,   850,   851,     0,     0,     0,   852,
     853,   854,     0,   855,     0,     0,   856,     0,     0,     0,
       0,     0,   862,   863,     0,     0,     0,     0,   857,   858,
     859,   860,     0,     0,     0,   861,     0,     0,     0,   847,
       0,    44,   848,     0,     0,     0,     0,     0,     0,     0,
     864,     0,     0,     0,   865,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   862,   863,     0,
       0,   849,     0,     0,     0,     0,   850,   851,     0,     0,
       0,   852,   853,   854,   847,   855,    44,   848,   856,     0,
     866,  1229,     0,     0,   867,   864,   868,     0,     0,   865,
     857,   858,   859,   860,     0,     0,     0,   861,     0,     0,
       0,     0,     0,     0,     0,     0,   849,     0,     0,     0,
       0,   850,   851,     0,     0,     0,   852,   853,   854,     0,
     855,     0,     0,   856,     0,     0,     0,     0,     0,   862,
     863,     0,     0,     0,     0,   857,   858,   859,   860,     0,
    1673,     0,   861,     0,     0,     0,     0,     0,  1241,     0,
       0,     0,     0,     0,     0,     0,   866,   864,     0,  1075,
     867,   865,   868,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   862,   863,     0,     0,     0,     0,
     847,     0,    44,   848,     0,     0,     0,     0,     0,   145,
     146,     0,   147,   148,   149,   150,   151,   152,   153,     0,
       0,   866,   864,   154,  1075,   867,   865,   868,   157,   158,
     159,     0,   849,     0,     0,     0,     0,   850,   851,     0,
       0,     0,   852,   853,   854,   847,   855,    44,   848,   856,
       0,     0,  1748,     0,     0,     0,     0,     0,     0,     0,
       0,   857,   858,   859,   860,     0,     0,     0,   861,     0,
       0,     0,     0,     0,     0,     0,     0,   849,     0,     0,
       0,     0,   850,   851,     0,     0,     0,   852,   853,   854,
       0,   855,     0,   866,   856,     0,     0,   867,     0,   868,
     862,   863,     0,     0,     0,     0,   857,   858,   859,   860,
       0,     0,     0,   861,     0,     0,     0,     0,     0,  1755,
       0,   847,     0,    44,   848,     0,     0,     0,   864,     0,
       0,     0,   865,     0,     0,     0,     0,     0,   866,     0,
       0,     0,   867,     0,   868,   862,   863,     0,     0,     0,
       0,     0,     0,   849,     0,     0,     0,     0,   850,   851,
       0,     0,     0,   852,   853,   854,     0,   855,     0,   544,
     856,     0,     0,   864,     0,     0,   545,   865,   546,     0,
     547,     0,   857,   858,   859,   860,     0,     0,     0,   861,
       0,     0,     0,     0,     0,     0,     0,   548,   549,   550,
     551,   552,   553,   554,   555,   556,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,     0,     0,     0,     0,
       0,   862,   863,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,     0,
       0,     0,     0,     0,   866,     0,     0,     0,   867,   864,
     868,     0,     0,   865,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   143,     0,
      44,    45,    46,     0,     0,    47,    48,    49,     0,   866,
       0,     0,     0,   867,     0,   868,     0,     0,     0,     0,
       0,     0,   506,     0,   -12,     0,     0,   507,     0,     0,
       0,   145,   146,     0,   147,   148,   149,   150,   151,   152,
     153,     0,     0,     0,     0,   154,     0,     1,   155,   156,
     157,   158,   159,     0,     0,     0,     0,   -12,   -12,   508,
     695,   -12,   -12,   -12,   509,     0,     0,   -12,     0,     0,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   511,   512,     0,   866,     0,   513,     0,   867,
     514,   868,   -12,   515,   516,   -12,     0,     0,     0,     0,
     517,   -12,     0,   -12,   -12,   -12,   -12,   -12,   -12,   518,
     519,   -12,     0,     0,     0,     0,   520,   521,   -12,   -12,
     -12,   -12,     0,     0,   -12,   -12,   -12,   -12,   -12,     0,
       0,   522,     0,     0,     0,   -12,   -12,     0,   523,   -12,
     -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   524,     0,
       0,   -12,     0,     0,     0,   -12,   -12,   -12,   -12,     0,
       0,     0,     0,     0,     0,     0,     0,   525,     0,     0,
       0,     0,   526,   527,   528,     0,     0,    53,     0,     0,
      54,    55,     0,    56,    57,    58,    59,    60,    61,     0,
      62,    63,     0,     0,     0,   -12,   -12,     0,     0,    64,
      65,     0,     0,     0,    66,     0,   -12,    67,    68,    69,
      70,     0,     0,    71,    72,    73,    74,     0,    75,    76,
       0,     0,     0,     0,     0,     0,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,    82,
     154,     0,    83,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   696,
       0,     0,     0,   145,   146,   417,   147,   148,   149,   150,
     151,   152,   153,     0,     0,     0,     0,   154,     0,     0,
     155,   156,   157,   158,   159,     0,     0,     0,     0,   145,
     146,     0,   147,   148,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,     0,   155,   156,   157,   158,
     159,     0,     0,     0,     0,   145,   146,     0,   147,   148,
     149,   150,   151,   152,   153,     0,     0,     0,     0,   154,
       0,     0,   155,   156,   157,   158,   159,     0,     0,     0,
       0,   145,   146,     0,   147,   148,   149,   150,   151,   152,
     153,     0,     0,     0,     0,   154,     0,     0,   155,   156,
     157,   158,   159,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   544,   721,     0,     0,     0,     0,     0,
     545,     0,   546,     0,   547,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,     0,     0,    47,    48,
      49,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,     0,
     418,    47,    48,    49,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     160,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   160,   728,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   160,   735,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,     0,    44,    45,    46,     0,
       0,    47,    48,    49,     0,     0,     0,     0,   160,  1690,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
      53,     0,     0,    54,    55,     0,    56,    57,    58,    59,
      60,    61,     0,    62,    63,  1760,     0,     0,     0,     0,
       0,     0,    64,    65,   989,     0,     0,    66,     0,     0,
      67,    68,    69,    70,     0,     0,    71,    72,    73,    74,
       0,    75,    76,     0,     0,     0,     0,     0,     0,     0,
     139,   140,   141,     0,   990,     0,     0,     0,     0,     0,
       0,     0,    82,    53,   991,    83,    54,    55,     0,    56,
      57,    58,    59,    60,    61,     0,    62,    63,     0,     0,
       0,     0,    44,    45,    46,    64,    65,    47,    48,    49,
      66,     0,  1298,    67,    68,    69,    70,     0,     0,    71,
      72,    73,    74,     0,    75,    76,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    82,     0,     0,    83,    44,
      45,    46,     0,     0,    47,    48,    49,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    53,     0,     0,    54,    55,     0,    56,
      57,    58,    59,    60,    61,     0,    62,    63,     0,     0,
       0,     0,     0,     0,     0,    64,    65,     0,     0,     0,
      66,     0,     0,    67,    68,    69,    70,     0,     0,    71,
      72,    73,    74,     0,    75,    76,     0,  1485,     0,     0,
       0,     0,     0,     0,     0,   145,   146,     0,   147,   148,
     149,   150,   151,   152,   153,    82,     0,     0,    83,   154,
       0,     0,   155,   156,   157,   158,   159,   145,   146,     0,
     147,   148,   149,   150,   151,   152,   153,     0,     0,     0,
       0,   154,     0,     0,   155,   156,   157,   158,   159,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    53,
       0,     0,    54,    55,     0,    56,    57,    58,    59,    60,
      61,     0,    62,    63,     0,     0,     0,     0,     0,     0,
       0,    64,    65,     0,     0,     0,    66,     0,  1299,    67,
      68,    69,    70,     0,     0,    71,    72,    73,    74,     0,
      75,    76,     0,     0,     0,     0,    53,     0,     0,    54,
      55,     0,    56,    57,    58,    59,    60,    61,     0,    62,
      63,    82,     0,     0,    83,     0,     0,     0,    64,    65,
       0,     0,     0,    66,     0,     0,    67,    68,    69,    70,
       0,     0,    71,    72,    73,    74,     0,    75,    76,     0,
       0,     0,     0,     0,     0,   145,   146,     0,   147,   148,
     149,   150,   151,   152,   153,     0,     0,     0,    82,   154,
       0,    83,   155,   156,   157,   158,   159,   145,   146,     0,
     147,   148,   149,   150,   151,   152,   153,     0,     0,     0,
       0,   154,     0,     0,   155,   156,   157,   158,   159,   145,
     146,     0,   147,   148,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,     0,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,     0,     0,  1486,     0,     0,
       0,     0,     0,     0,   160,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,     0,     0,     0,
       0,     0,   145,   146,   378,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,     0,     0,     0,     0,     0,
       0,     0,  1137,     0,   160,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,     0,     0,     0,
       0,     0,     0,     0,  1318,     0,   160,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,     0,
       0,     0,     0,     0,   145,   146,  1392,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,     0,  1393,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
       0,  1425,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,     0,  1429,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,     0,     0,     0,  1438,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,   145,   146,  1544,   147,   148,
     149,   150,   151,   152,   153,     0,     0,     0,     0,   154,
       0,     0,   155,   156,   157,   158,   159,   145,   146,     0,
     147,   148,   149,   150,   151,   152,   153,     0,     0,     0,
       0,   154,     0,     0,   155,   156,   157,   158,   159,   145,
     146,     0,   147,   148,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
       0,  1559,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,   145,   146,  1572,   147,   148,   149,   150,   151,   152,
     153,     0,     0,     0,     0,   154,     0,     0,   155,   156,
     157,   158,   159,   145,   146,     0,   147,   148,   149,   150,
     151,   152,   153,     0,     0,     0,     0,   154,     0,     0,
     155,   156,   157,   158,   159,   145,   146,     0,   147,   148,
     149,   150,   151,   152,   153,     0,     0,     0,     0,   154,
       0,     0,   155,   156,   157,   158,   159,   145,   146,     0,
     147,   148,   149,   150,   151,   152,   153,     0,     0,     0,
       0,   154,     0,     0,   155,   156,   157,   158,   159,   145,
     146,     0,   147,   148,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,     0,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,     0,   160,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,     0,     0,     0,
       0,     0,     0,     0,  1575,     0,   160,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,     0,
       0,     0,     0,     0,   145,   146,  1576,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,     0,     0,     0,     0,     0,     0,     0,  1597,     0,
     160,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,     0,     0,     0,     0,     0,     0,     0,
    1683,     0,   160,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,     0,     0,     0,     0,     0,
       0,     0,  1796,     0,   160,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,     0,     0,     0,
       0,     0,     0,     0,  1825,     0,   160,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,     0,
       0,     0,     0,     0,   145,   146,  1826,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
     145,   146,   284,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
     285,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,   286,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,   145,   146,   287,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,     0,   288,     0,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,   290,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
     291,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,   292,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,   145,   146,   293,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,   294,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,   145,   146,
     295,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,   297,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
     298,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
     145,   146,   302,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,     0,     0,   303,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,     0,   304,     0,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,   305,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
     306,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
     145,   146,   408,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,     0,   409,     0,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,   145,   146,   410,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,     0,   411,     0,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,   412,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,   145,   146,
     955,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,   961,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,     0,     0,  1173,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,     0,  1397,     0,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,  1398,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,   145,   146,
    1399,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,     0,     0,  1405,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,   145,   146,  1406,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,     0,     0,  1407,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,     0,  1409,     0,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,   145,   146,  1604,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,     0,     0,
    1688,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,  1689,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,     0,     0,  1710,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,     0,     0,  1747,     0,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,   145,   146,  1785,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,  1786,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,   145,   146,  1814,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,     0,   155,   156,   157,   158,   159,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,   155,   156,   157,
     158,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     0,     0,
       0,     0,  1815,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
       0,     0,     0,     0,  1827,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
       0,     0,     0,     0,   145,   146,  1847,   147,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,  1848,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,     0,     0,   223,     0,
       0,     0,     0,   160,   221,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,  1478,     0,
       0,     0,     0,     0,     0,   160,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,     0,     0,
     289,     0,     0,     0,     0,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     145,   146,   296,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,   544,   920,   155,   156,   157,
     158,   159,   545,     0,   546,     0,   547,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,     0,     0,   299,     0,     0,     0,
       0,     0,     0,   160,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,     0,     0,     0,   157,
       0,     0,     0,     0,     0,     0,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,     0,   155,   156,   157,   158,   159,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   506,     0,   -12,     0,     0,   507,
       0,     0,     0,     0,     0,     0,     0,   160,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     1,
       0,     0,   301,     0,     0,     0,     0,     0,     0,   -12,
     -12,   508,     0,   -12,   -12,   -12,   509,     0,     0,   -12,
       0,     0,   510,     0,     0,     0,  -415,     0,     0,     0,
       0,     0,     0,     0,   511,   512,     0,     0,     0,   513,
       0,     0,   514,     0,   -12,   515,   516,   -12,     0,     0,
       0,     0,   517,   -12,     0,   -12,   -12,   -12,   -12,   -12,
     -12,   518,   519,   -12,     0,     0,     0,     0,   520,   521,
     -12,   -12,   -12,   -12,     0,     0,   -12,   -12,   -12,   -12,
     -12,     0,     0,   522,     0,     0,     0,   -12,   -12,     0,
     523,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
     524,     0,     0,   -12,     0,     0,     0,   -12,   -12,   -12,
     -12,   163,   164,   165,   166,   167,   168,   169,   170,   525,
       0,     0,     0,     0,   526,   527,   528,   506,     0,   -12,
       0,     0,   507,   160,   221,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,   -12,   -12,     0,
       0,     0,     1,     0,     0,     0,     0,     0,   -12,     0,
       0,     0,   -12,   -12,   508,     0,   -12,   -12,   -12,   509,
       0,     0,   -12,     0,     0,   510,     0,     0,     0,  -415,
       0,     0,     0,     0,     0,     0,     0,   511,   512,     0,
       0,     0,   513,     0,     0,   514,     0,   -12,   515,   516,
     -12,     0,   837,     0,     0,   517,   -12,     0,   -12,   -12,
     -12,   -12,   -12,   -12,   518,   519,   -12,     0,     0,     0,
       0,   520,   521,   -12,   -12,   -12,   -12,     0,     0,   -12,
     -12,   -12,   -12,   -12,     0,     0,   522,     0,     0,     0,
     -12,   -12,     0,   523,   -12,   -12,   -12,   -12,   -12,   -12,
     -12,   -12,   -12,   524,     0,     0,   -12,     0,     0,     0,
     -12,   -12,   -12,   -12,     0,     0,     0,     0,     0,     0,
       0,     0,   525,     0,     0,     0,     0,   526,   527,   528,
       0,     0,     0,     0,     0,   145,   146,     0,   147,   148,
     149,   150,   151,   152,   153,     0,     0,     0,     0,   154,
     -12,   -12,   155,   156,   157,   158,   159,     0,     0,   145,
     146,   -12,   147,   148,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,     0,   155,   156,   157,   158,
     159,   145,   146,     0,   147,   148,   149,   150,   151,   152,
     153,     0,     0,     0,     0,   154,     0,     0,   155,   156,
     157,   158,   159,   145,   146,   902,   147,   148,   149,   150,
     151,   152,   153,     0,     0,     0,     0,   154,     0,     0,
     155,   156,   157,   158,   159,   145,   146,     0,   147,   148,
     149,   150,   151,   152,   153,     0,     0,     0,     0,   154,
       0,     0,   155,   156,   157,   158,   159,   145,   146,     0,
     147,   148,   149,   150,   151,   152,   153,     0,     0,     0,
       0,   154,     0,     0,   155,   156,   157,   158,   159,   145,
     146,     0,   147,   148,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,     0,   155,   156,   157,   158,
     159,   145,   146,     0,   147,   148,   149,   150,   151,   152,
     153,     0,     0,     0,     0,   154,     0,     0,   155,   156,
     157,   158,   159,   145,   146,     0,   147,   148,   149,   150,
     151,   152,   153,     0,     0,   729,     0,   154,     0,   730,
     155,   156,   157,   158,   159,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   160,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   160,   310,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   160,   354,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     160,   491,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   160,  1311,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   160,  1339,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   160,  1432,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   160,  1578,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     160,  1594,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,     0,     0,   155,
     156,   157,   158,   159,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,   506,     0,   -12,     0,   154,   507,
       0,   155,   156,   157,   158,   159,   145,   146,     0,   147,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     1,
     154,     0,     0,     0,   156,   157,   158,   159,     0,   -12,
     -12,   508,     0,   -12,   -12,   -12,   509,     0,     0,   -12,
       0,     0,   510,     0,     0,     0,  -414,     0,     0,  -414,
       0,     0,     0,     0,   511,   512,     0,     0,     0,   513,
       0,     0,   514,     0,   -12,   515,   516,   -12,     0,     0,
       0,     0,   517,   -12,     0,   -12,   -12,   -12,   -12,   -12,
     -12,   518,   519,   -12,     0,     0,     0,     0,   520,   521,
     -12,   -12,   -12,   -12,     0,     0,   -12,   -12,   -12,   -12,
     -12,     0,     0,   522,     0,     0,     0,   -12,   -12,     0,
     523,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
     524,     0,     0,   -12,     0,     0,     0,   -12,   -12,   -12,
     -12,     0,     0,     0,     0,     0,     0,     0,     0,   525,
       0,     0,     0,  -414,   526,   527,   528,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -12,   -12,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -12,   160,
    1609,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   160,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   506,     0,   -12,     0,     0,   507,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -12,   -12,
     508,   654,   -12,   -12,   -12,   509,     0,     0,   -12,     0,
       0,   510,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   511,   512,     0,     0,     0,   513,     0,
       0,   514,     0,   -12,   515,   516,   -12,     0,     0,     0,
       0,   517,   -12,     0,   -12,   -12,   -12,   -12,   -12,   -12,
     518,   519,   -12,     0,     0,     0,     0,   520,   521,   -12,
     -12,   -12,   -12,     0,     0,   -12,   -12,   -12,   -12,   -12,
       0,     0,   522,     0,     0,     0,   -12,   -12,     0,   523,
     -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   524,
       0,     0,   -12,     0,     0,     0,   -12,   -12,   -12,   -12,
       0,     0,     0,     0,   506,     0,   -12,     0,   525,   507,
       0,     0,  -415,   526,   527,   528,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,   -12,   -12,     0,   -12,
     -12,   508,     0,   -12,   -12,   -12,   509,   -12,     0,   -12,
       0,     0,   510,     0,     0,     0,     0,     0,     0,  -415,
       0,     0,     0,     0,   511,   512,     0,     0,     0,   513,
       0,     0,   514,     0,   -12,   515,   516,   -12,     0,     0,
       0,     0,   517,   -12,     0,   -12,   -12,   -12,   -12,   -12,
     -12,   518,   519,   -12,     0,     0,     0,     0,   520,   521,
     -12,   -12,   -12,   -12,     0,     0,   -12,   -12,   -12,   -12,
     -12,     0,     0,   522,     0,     0,     0,   -12,   -12,     0,
     523,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
     524,     0,     0,   -12,     0,     0,     0,   -12,   -12,   -12,
     -12,     0,     0,     0,     0,   506,     0,   -12,     0,   525,
     507,     0,     0,     0,   526,   527,   528,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,   -12,   -12,     0,
     -12,   -12,   508,     0,   -12,   -12,   -12,   509,   -12,     0,
     -12,     0,     0,   510,     0,     0,     0,  -415,     0,     0,
       0,     0,     0,     0,     0,   511,   512,     0,     0,     0,
     513,     0,     0,   514,     0,   -12,   515,   516,   -12,     0,
       0,     0,     0,   517,   -12,     0,   -12,   -12,   -12,   -12,
     -12,   -12,   518,   519,   -12,     0,     0,     0,     0,   520,
     521,   -12,   -12,   -12,   -12,     0,     0,   -12,   -12,   -12,
     -12,   -12,     0,     0,   522,     0,     0,     0,   -12,   -12,
       0,   523,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
     -12,   524,     0,     0,   -12,     0,     0,     0,   -12,   -12,
     -12,   -12,     0,     0,     0,     0,   506,     0,   -12,     0,
     525,   507,     0,     0,     0,   526,   527,   528,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,   -12,   -12,
       0,   -12,   -12,   508,   695,   -12,   -12,   -12,   509,   -12,
       0,   -12,     0,     0,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   511,   512,     0,     0,
       0,   513,     0,     0,   514,     0,   -12,   515,   516,   -12,
       0,     0,     0,     0,   517,   -12,     0,   -12,   -12,   -12,
     -12,   -12,   -12,   518,   519,   -12,     0,     0,     0,     0,
     520,   521,   -12,   -12,   -12,   -12,     0,     0,   -12,   -12,
     -12,   -12,   -12,     0,     0,   522,   659,     0,     0,   -12,
     -12,     0,   523,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
     -12,   -12,   524,     0,     0,   -12,     0,     0,     0,   -12,
     -12,   -12,   -12,     0,     0,     0,     0,     0,     0,   660,
     661,   525,     0,   662,   663,   664,   526,   527,   528,   665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -12,
     -12,     0,     0,     0,   666,     0,     0,   667,     0,     0,
     -12,     0,     0,   668,     0,   669,   670,   671,   672,   673,
     674,     0,     0,   675,     0,     0,     0,     0,     0,     0,
     676,   677,   678,   679,     0,     0,   680,   681,   682,   683,
     684,     0,     0,     0,     0,     0,     0,   446,   447,     0,
       0,   685,   686,   687,   688,   448,   449,   450,   451,   452,
       0,     0,     0,   453,     0,     0,     0,   454,   455,   689,
     690,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   544,   921,     0,     0,     0,     0,     0,   545,     0,
     546,     0,   547,     0,     0,     0,     0,   456,   457,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   691,   548,
     549,   550,   551,   552,   553,   554,   555,   556,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   544,     0,
       0,     0,     0,     0,     0,   545,   922,   546,     0,   547,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   923,   924,   925,   551,
     552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
     562,   563,   564,   565,   566
};

static const yytype_int16 yycheck[] =
{
      32,   483,  1111,     0,  1078,   624,   624,   532,   533,   934,
      83,     8,   521,   660,   635,   636,   637,   319,   320,   666,
     890,   642,   538,  1081,  1082,   692,   834,   100,     3,   460,
     917,   462,   463,     3,   526,   376,   783,     3,   502,   503,
     504,    14,    27,    11,   706,  1403,     3,   709,   710,     1,
      82,    83,   392,     3,    88,   759,   538,     3,    54,     3,
     602,   572,     3,   365,   616,   243,   949,   619,   100,   247,
       1,     3,     3,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   905,   171,     1,
       1,     1,    11,     3,   535,     3,     3,     3,     3,     3,
       1,    27,     3,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
       3,   173,     3,   507,    53,   335,   850,   511,  1208,  1507,
     223,   855,    11,   493,   858,     3,     1,    25,   862,     3,
     878,     3,   654,   527,     9,    10,   245,     3,   616,   510,
       1,   619,     3,   242,     3,   254,     3,  1251,   609,   610,
       1,   612,     3,   692,   693,     3,     3,  1070,   652,   221,
      26,   223,   224,    89,   710,     3,     1,   387,     3,    73,
       1,   822,     3,   695,   851,    54,     1,   718,     3,   720,
     721,   245,   859,   860,    88,     3,    50,    51,    52,   761,
     242,     9,    10,     3,   706,   972,   100,   709,   710,     9,
      10,    13,   254,   229,  1320,     3,     8,     9,   702,    21,
     272,     9,    10,    77,    78,    79,    80,    81,     3,   439,
      84,    85,   914,   915,   916,   917,   229,   289,   243,     3,
    1320,   602,   235,   236,   296,     9,    10,   299,   300,   301,
      88,    26,   703,    74,   614,   245,   244,   243,   310,   254,
     312,   313,   314,   280,   316,   587,   588,   589,   590,   230,
    1037,   248,     3,  1651,   246,   245,  1043,    98,    99,     1,
     250,     3,   248,  1186,   248,   139,   140,   141,  1191,    54,
    1384,   242,   776,   777,   245,   779,   248,   118,   249,   660,
     510,    25,   354,  1383,    11,   666,    14,   243,     0,   519,
    1404,  1405,     1,  1407,     3,   244,  1396,   846,   528,   248,
     242,   242,   242,  1403,   242,   242,   248,   248,   149,  1707,
     245,   249,   249,  1057,   245,    35,   388,   158,    26,    14,
     692,   693,   394,    23,    24,   667,  1084,   235,   236,   237,
     238,   239,    98,  1459,   237,  1300,  1301,  1504,   229,   242,
     229,   242,     1,   685,     3,   244,   895,   896,    75,   248,
     899,   943,   243,   945,   242,    75,    98,   242,   242,  1459,
     242,   917,   918,   919,  1051,    74,   403,   243,  1295,  1279,
     921,   247,   248,   242,   245,   242,  1063,   607,   759,   242,
     761,   147,   148,   975,   245,   615,  1309,   439,   980,    98,
      99,    35,   914,   915,   916,   917,   918,   919,   244,   242,
     245,  1108,   906,  1147,   374,   147,   148,  1507,   254,   118,
     245,   254,  1114,   254,   242,    74,   158,   888,     3,   491,
     492,     3,   242,   495,   242,   974,     8,     9,     3,   244,
     901,    75,   981,     3,   242,  1549,   254,    87,     0,    98,
      99,  1289,    27,  1366,   229,   242,  1546,   229,   243,   158,
     245,   248,   247,  1567,   942,   250,   944,    27,   242,   118,
       0,   243,  1629,  1630,    26,   198,   199,   519,   849,   850,
     851,   204,    13,   338,   855,   856,   528,   858,   859,   860,
      21,   862,   215,   529,   198,   973,    26,   868,   869,   535,
     204,   979,    48,   237,   238,   239,   244,    72,    73,   158,
     171,   215,   173,   245,     3,     3,   254,   235,   236,     8,
       9,   243,   254,    88,  1173,  1173,     3,   244,   488,   247,
     490,   248,  1636,   255,   896,  1435,   598,   244,   243,   229,
      92,   246,    76,    71,    78,    73,   608,   254,  1199,  1200,
     235,   236,   772,   243,   616,   254,  1111,   619,   235,   236,
      88,  1651,    92,   243,  1103,   247,   243,   247,  1672,  1673,
    1483,  1484,   100,   255,  1678,   109,  1489,  1490,  1491,  1492,
     248,  1685,  1686,  1496,  1497,  1498,  1499,  1109,   443,   250,
     445,   248,   192,   254,   146,   965,     1,   197,     3,     4,
    1688,  1689,  1114,   243,  1296,   254,     3,   247,    18,    19,
      20,   242,   246,   165,  1108,    25,   146,  1707,   164,   250,
       1,   167,     3,   254,   170,    74,   475,   476,    33,  1733,
     962,   963,   964,    38,    39,   165,   243,   243,    43,    44,
      45,   248,    47,   498,   196,    50,   166,    74,    53,    98,
      99,   100,   224,   225,   226,   247,   242,    62,    63,    64,
      65,    68,   214,   255,    69,   243,   196,   729,   246,   118,
     242,    98,    99,   100,    94,   181,   182,   243,   242,  1592,
    1051,   743,   248,     8,   214,   243,  1057,    94,   246,   195,
    1212,   118,  1063,   113,  1026,   115,   101,   102,     3,  1838,
      81,   763,   208,     8,     9,   242,   113,  1078,   115,    14,
      91,  1362,   132,  1364,    72,    73,   243,   223,    72,    73,
     247,   783,    67,  1400,   129,   132,   242,    26,   133,  1406,
      88,  1408,  1409,   795,    88,   224,   225,   226,    11,    12,
     242,    14,    15,    16,    17,    18,    19,    20,    93,  1295,
     236,   242,    25,   242,    74,    28,    29,    30,    31,    32,
    1154,  1155,    61,   866,   242,  1097,   827,   112,   829,   114,
     256,   257,   258,    72,    73,    77,  1147,    79,    98,    99,
    1112,  1113,  1459,  1295,  1296,   243,   131,    74,   246,    88,
      89,   242,  1331,    74,  1333,  1334,  1335,    74,   118,   243,
    1713,   248,   246,   250,   866,  1718,   867,   254,  1721,  1722,
     244,    98,    99,   100,   242,  1209,   250,    98,    99,   100,
     254,    98,    99,   242,   229,   235,   236,   237,   238,   239,
     243,   118,   894,   248,   247,   250,   898,   118,   158,   254,
     245,   118,    74,   870,   249,   171,   251,   173,   243,  1500,
    1501,   181,   182,   248,   153,    11,    12,   242,    14,    15,
      16,    17,    18,    19,    20,   195,    98,    99,   100,    25,
     200,   933,   934,   242,    30,    31,    32,  1097,   208,   242,
    1251,   158,  1398,  1399,   243,   248,   118,   250,   247,   248,
     243,   254,  1263,   223,   247,   248,   958,   243,   242,  1293,
    1294,   247,   248,   803,   804,   805,   806,   807,   808,   809,
     972,   487,   100,   489,   976,   815,   816,   817,   818,   224,
     225,   226,  1551,   985,   986,  1554,   242,  1556,   990,   991,
     235,   236,   515,   516,   254,   518,    26,   242,   802,   803,
     804,   805,   806,   807,   808,   809,   243,     1,  1280,     3,
     247,   815,   816,   817,   818,   228,  1288,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   243,   243,  1031,
      74,    61,   248,   248,   242,  1037,  1079,   254,  1040,  1041,
     243,  1043,   255,   243,    74,   248,   242,     1,   248,     3,
    1052,  1053,  1054,  1670,    98,    99,   100,   243,    74,    89,
     242,   247,  1064,   242,  1066,  1067,  1068,  1684,    98,    99,
     100,  1073,   242,  1384,   118,   249,   243,  1079,   242,  1081,
    1082,   248,    98,    99,   100,   243,  1088,  1089,   118,  1400,
     248,    93,   242,  1404,  1405,  1406,  1407,  1408,  1409,  1101,
    1595,  1596,   118,  1372,  1373,  1072,  1149,  1376,  1377,  1378,
     112,  1512,   114,   243,     1,  1516,     3,   242,   248,  1520,
     243,  1795,  1796,   153,   244,   248,  1527,   243,   248,   131,
    1531,   242,   248,  1135,  1535,   231,   232,   233,   234,   235,
     236,   237,   238,   239,  1146,  1613,     5,  1149,  1459,   242,
    1618,  1619,  1769,  1621,  1622,   242,   114,   115,   243,  1627,
    1628,  1416,  1417,   248,   122,   123,   124,   125,   126,  1441,
       3,   247,   130,  1175,     7,  1486,   134,   135,  1371,  1372,
    1373,  1183,     3,  1376,  1377,  1378,   990,   991,   243,     3,
    1524,  1525,  1526,   248,  1528,  1529,  1530,  1001,  1532,  1533,
    1534,  1081,  1082,   228,   243,   230,  1640,   232,   243,   248,
    1644,   201,   248,   248,  1648,   205,   174,   175,   244,  1836,
     100,  1655,   247,   243,  1226,  1659,   399,   400,   248,  1663,
    1847,  1848,   243,     3,   114,   115,  1238,   248,  1549,  1595,
    1596,  1208,   122,   123,   124,   125,   126,   243,   243,     3,
     130,  1253,  1254,   248,   134,   135,  1567,   243,     3,   243,
     243,   247,  1264,  1265,   248,   248,  1268,  1269,   244,  1271,
     243,    11,    12,  1316,   247,  1277,   243,   243,    18,    19,
      20,   248,   248,   243,   243,    25,   243,   243,   248,   248,
     242,   248,   248,   244,   174,   175,   243,   243,  1300,  1301,
     243,   248,   248,   243,   247,  1773,  1617,   247,  1776,  1311,
     243,  1779,  1780,   243,  1316,   248,  1318,   243,   248,   569,
     570,   244,   248,   243,  1326,  1636,  1130,  1131,   248,   243,
     243,   243,    25,   243,   248,   248,   248,  1339,   248,   244,
     242,  1343,  1344,  1838,  1184,  1185,   243,  1187,  1188,  1189,
    1190,   248,   244,  1320,  1194,  1195,  1196,  1197,   243,  1670,
     243,  1672,  1673,   248,   243,   248,   243,  1678,     5,   248,
     248,   248,   243,  1684,  1685,  1686,   250,   248,   248,   248,
    1184,  1185,   243,  1187,  1188,  1189,  1190,   248,   248,   243,
    1194,  1195,  1196,  1197,   248,  1397,  1398,  1399,   250,  1401,
     243,   243,   254,  1737,   243,   248,   248,  1741,   243,   248,
       3,  1745,   243,   248,  1416,  1417,  1383,   248,   243,  1421,
    1422,   243,  1733,   248,  1426,     3,   248,   243,   243,  1396,
    1432,   243,   248,   248,   243,   247,  1403,     3,     5,   248,
     243,    67,    68,   228,   247,   230,   243,   232,  1415,   228,
     247,   230,   243,   232,    89,   243,   247,   243,  1769,   247,
     243,   247,   243,  1465,   247,   243,   247,    93,    94,   247,
       1,   243,     3,     4,   243,   247,  1478,   243,   247,   243,
      26,   247,   243,   247,  1795,  1796,   112,   113,   114,   115,
     245,  1493,  1459,   233,   234,   235,   236,   237,   238,   239,
     243,   247,    33,     3,   247,   131,   132,    38,    39,   248,
     248,   243,    43,    44,    45,   247,    47,   248,     1,    50,
     248,   254,     3,     3,     3,  1836,   248,     3,    73,     3,
       3,    62,    63,    64,    65,     3,  1847,  1848,    69,  1541,
    1507,   116,   171,     3,    75,     3,   254,     3,    26,  1551,
     242,  1355,  1554,    74,  1556,   246,     3,     3,     3,     1,
     248,     3,     4,     5,     3,   248,     8,     9,    10,   244,
     101,   102,    57,   244,   255,    58,  1578,   158,     3,  1546,
      73,   248,   230,    61,     3,   248,    69,    70,    30,    31,
      32,   247,  1594,   244,    72,    73,    74,   242,   129,   248,
     242,   242,   133,   100,     1,   149,   242,  1609,   242,     3,
      88,    89,    56,   229,     5,   248,    59,   249,     3,    55,
      98,    99,   100,   248,   248,    58,     3,   242,   111,   242,
     242,   242,  1634,  1635,   242,     1,   242,     3,     4,     5,
     118,   242,     8,     9,    10,   242,   242,   242,   242,   248,
     242,   242,   242,     3,   150,   138,   139,   140,   141,   142,
     143,   144,   145,   248,    30,    31,    32,   244,   244,   248,
       3,   154,   155,   156,   157,   153,  1480,   160,   161,   162,
     163,  1683,    11,    12,  1651,    14,    15,    16,    17,    18,
      19,    20,  1694,   249,    23,    24,    25,     3,   229,    28,
      29,    30,    31,    32,    52,    57,  1708,   248,   165,  1711,
     248,   247,     3,     3,   245,     3,     3,   243,   249,   248,
     251,   243,     3,  1725,  1726,    11,    12,   243,    14,    15,
      16,    17,    18,    19,    20,   243,   242,   244,   180,    25,
    1707,   183,   184,   248,   186,   187,   188,   189,   190,   191,
     248,   193,   194,   243,   243,   254,  1758,  1759,   244,   242,
     202,   203,   244,   247,     3,   207,  1768,   244,   210,   211,
     212,   213,   247,   243,   216,   217,   218,   219,   247,   221,
     222,   247,   247,    53,    26,   248,     3,   242,   230,   231,
     232,   242,   242,   235,   236,   248,   248,    22,     3,   248,
     242,   243,   242,   245,   242,   247,    53,   242,   250,   229,
     252,   253,   242,   242,   180,   242,   248,   183,   184,    27,
     186,   187,   188,   189,   190,   191,   248,   193,   194,   244,
     248,   248,   248,  1835,   244,  1837,   202,   203,   247,     3,
     254,   207,   243,   227,   210,   211,   212,   213,   243,     3,
     216,   217,   218,   219,   243,   221,   222,   243,   248,    60,
     243,   243,   243,   243,   230,   231,   232,   243,   243,   235,
     236,   243,   243,   247,     5,   150,   242,   243,   248,   245,
     244,   247,     3,   248,   250,   244,   252,   253,     1,     3,
       3,     4,     5,   248,   254,     8,     9,    10,     3,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,     3,   114,   115,   229,   232,   229,    30,    31,    32,
     122,   123,   124,   125,   126,   229,   255,   247,   130,   247,
      55,   247,   134,   135,   242,   247,   247,   247,     3,   242,
     247,   250,   247,    34,   227,   247,   247,   233,   234,   235,
     236,   237,   238,   239,   247,   227,   158,   255,   254,   248,
       3,   243,     1,   247,     3,     4,     5,   247,    81,     8,
       9,    10,   174,   175,   247,   244,   247,    53,    91,   247,
     247,   247,   242,   248,   242,   248,   248,   244,   229,   248,
     243,    30,    31,    32,   248,   243,     5,   243,   243,   243,
     243,    11,    12,   243,    14,    15,    16,    17,    18,    19,
      20,   243,   243,   243,   242,    25,   242,    53,    28,    29,
      30,    31,    32,   242,     3,   248,   250,   248,     3,     3,
      34,   247,   247,   243,   248,   255,     3,     3,     3,     3,
       3,     3,    81,     3,     3,     3,    60,   150,   248,   247,
      52,    52,    91,   247,     1,   244,     3,     4,     5,     3,
       3,     8,     9,    10,    55,   248,   244,   180,   227,   243,
     183,   184,   248,   186,   187,   188,   189,   190,   191,   248,
     193,   194,   243,    30,    31,    32,   243,   243,   229,   202,
     203,   251,   247,   244,   207,   247,     3,   210,   211,   212,
     213,    48,   247,   216,   217,   218,   219,    54,   221,   222,
     247,   247,   247,   247,   247,    60,     3,   230,   231,   232,
       3,   248,   235,   236,   237,     3,   248,    60,   248,   242,
     248,   248,   245,   248,    55,   254,   248,   248,   247,   252,
     253,   180,   244,   247,   183,   184,   247,   186,   187,   188,
     189,   190,   191,   247,   193,   194,    31,   247,     1,   247,
       3,     4,     5,   202,   203,     8,     9,    10,   207,   247,
     247,   210,   211,   212,   213,   247,   244,   216,   217,   218,
     219,   248,   221,   222,   248,   248,   248,    30,    31,    32,
      34,   230,   231,   232,  1018,     8,   235,   236,    25,   183,
     190,   579,  1459,   242,   403,    48,   245,   789,  1147,   523,
    1316,    54,  1695,   252,   253,  1585,   401,   732,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     694,  1032,  1161,   180,  1390,   972,   183,   184,  1765,   186,
     187,   188,   189,   190,   191,   255,   193,   194,   498,  1273,
       1,  1092,     3,     4,     5,   202,   203,     8,     9,    10,
     207,   987,  1012,   210,   211,   212,   213,   678,  1560,   216,
     217,   218,   219,   860,   221,   222,   644,  1521,  1383,    30,
      31,    32,   537,   230,   231,   232,    -1,  1321,   235,   236,
     569,  1127,   570,   322,    -1,   242,    -1,    48,   245,    -1,
      -1,    -1,    -1,    54,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,    -1,
      -1,     8,     9,    10,    -1,    -1,    -1,   180,    -1,    -1,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,    -1,    30,    31,    32,    -1,    -1,    -1,   202,
     203,    -1,    -1,    -1,   207,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,   219,    -1,   221,   222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,   231,   232,
      -1,    -1,   235,   236,    -1,    -1,    -1,    -1,    -1,   242,
      -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,   252,
     253,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,    -1,    30,    31,    32,    -1,    -1,
      -1,   202,   203,    -1,    -1,    -1,   207,    -1,    -1,   210,
     211,   212,   213,    48,    -1,   216,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,
     231,   232,    -1,    -1,   235,   236,    -1,    -1,    -1,    -1,
      -1,   242,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,
      -1,   252,   253,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,    -1,    -1,
       1,    -1,     3,     4,     5,   202,   203,     8,     9,    10,
     207,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,   219,    -1,   221,   222,    -1,    -1,    -1,    30,
      31,    32,    -1,   230,   231,   232,    -1,    -1,   235,   236,
      -1,    -1,    -1,    -1,    -1,   242,    -1,    48,   245,    -1,
     247,    -1,    -1,    -1,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
      -1,    -1,     1,    -1,     3,     4,     5,   202,   203,     8,
       9,    10,   207,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,   219,    -1,   221,   222,    -1,    -1,
      -1,    30,    31,    32,    -1,   230,   231,   232,    -1,    -1,
     235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,    48,
     245,    -1,    -1,    -1,    -1,    -1,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,    -1,    30,    31,    32,    -1,    -1,
      -1,   202,   203,    -1,    -1,    -1,   207,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,
     231,   232,    -1,    -1,   235,   236,    -1,    -1,    -1,    -1,
      -1,   242,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,
      -1,   252,   253,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,
      -1,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,    30,    31,    32,    -1,
      -1,    -1,    -1,   202,   203,    -1,    -1,    -1,   207,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
     219,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,    -1,    -1,
      -1,    -1,    -1,   242,    -1,    -1,   245,    -1,    -1,    -1,
      -1,    -1,    -1,   252,   253,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
      -1,    -1,     1,    -1,     3,     4,     5,   202,   203,     8,
       9,    10,   207,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,   219,    -1,   221,   222,    -1,    -1,
      -1,    30,    31,    32,    -1,   230,   231,   232,    -1,    -1,
     235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,
     245,    -1,    -1,    -1,    -1,    -1,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,    -1,    -1,     1,    -1,     3,     4,     5,   202,   203,
       8,     9,    10,   207,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,   219,    -1,   221,   222,    -1,
      -1,    -1,    30,    31,    32,    -1,   230,   231,   232,    -1,
      -1,   235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,
      -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,   252,   253,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,
      -1,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,    30,    31,    32,    -1,
      -1,    -1,    -1,   202,   203,    -1,    -1,    -1,   207,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
     219,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,    -1,    -1,
      -1,    -1,    -1,   242,    -1,    -1,   245,    -1,    -1,    -1,
      -1,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   202,   203,    -1,    -1,    -1,   207,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,   219,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   230,   231,   232,    -1,    -1,   235,   236,    -1,
      -1,    -1,    -1,    -1,   242,    -1,    -1,   245,    -1,    -1,
      -1,    -1,    -1,    -1,   252,   253,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,    -1,    -1,    -1,    -1,     3,     4,     5,   202,   203,
       8,     9,    10,   207,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,   219,    -1,   221,   222,    -1,
      -1,    -1,    30,    31,    32,    -1,   230,   231,   232,    -1,
      -1,   235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,
      -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,   252,   253,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    -1,
       1,    -1,     3,     4,     5,    93,    94,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
      -1,    -1,    -1,   131,   132,    -1,    -1,    -1,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,    30,    31,    32,    -1,
      -1,    -1,   154,   155,   156,   157,    -1,    -1,   160,   161,
     162,   163,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   202,   203,    -1,    -1,    -1,   207,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,   219,    -1,   221,   222,    -1,    -1,    -1,    -1,    93,
      94,    -1,   230,   231,   232,    -1,    -1,   235,   236,    -1,
      -1,    -1,    -1,    -1,   242,    -1,    -1,   245,   112,   113,
     114,   115,    -1,    -1,   252,   253,    -1,     3,     4,     5,
     242,    -1,     8,     9,    10,    -1,    -1,   131,   132,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,    30,    31,    32,    -1,    -1,    -1,
      -1,   202,   203,    -1,    -1,    -1,   207,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,    -1,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   242,    -1,    -1,   245,    -1,    -1,    -1,   202,   203,
      -1,    -1,    -1,   207,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,   219,   102,   221,   222,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,
      -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,   252,   253,
      -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   180,    -1,    -1,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   202,   203,    -1,    -1,
      -1,   207,    -1,    -1,   210,   211,   212,   213,    -1,    -1,
     216,   217,   218,   219,    -1,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   230,   231,   232,    -1,    -1,   235,
     236,   102,    -1,    -1,    -1,    -1,   242,    -1,    -1,   245,
      -1,    -1,    -1,   249,    -1,   251,   252,   253,     3,     4,
       5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,    -1,    -1,    -1,    -1,     3,     4,
       5,   202,   203,     8,     9,    10,   207,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,    30,    31,    32,    -1,   230,
     231,   232,    -1,    -1,   235,   236,    -1,    -1,    -1,    -1,
      -1,   242,    -1,    -1,   245,    -1,    -1,    -1,   249,    -1,
     251,   252,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,    91,    -1,     8,     9,
      10,    -1,    -1,    -1,    -1,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
      30,    31,    32,    -1,    -1,    -1,    -1,   202,   203,    -1,
      -1,    -1,   207,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,   219,    -1,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   230,   231,   232,    -1,    -1,
     235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,
     245,    -1,    -1,    -1,     3,     4,     5,   252,   253,     8,
       9,    10,    -1,    -1,    -1,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
      -1,    30,    31,    32,    -1,    -1,    -1,   202,   203,    -1,
      -1,    -1,   207,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,   219,    -1,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   230,   231,   232,    -1,    -1,
     235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,
     245,    -1,    -1,    -1,    -1,    -1,    -1,   252,   253,     3,
       4,     5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,    -1,    30,    31,    32,    -1,
      -1,    -1,   202,   203,    -1,    -1,    -1,   207,    -1,    -1,
     210,   211,   212,   213,    -1,    -1,   216,   217,   218,   219,
      -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     230,   231,   232,    -1,    -1,   235,   236,    -1,    -1,    -1,
      -1,    -1,   242,    -1,    -1,   245,    -1,   247,    -1,     3,
       4,     5,   252,   253,     8,     9,    10,    -1,    -1,    -1,
      -1,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,    30,    31,    32,    -1,
      -1,    -1,    -1,   202,   203,    -1,    -1,    -1,   207,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
     219,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,    -1,    -1,
      -1,    -1,    -1,   242,    -1,    -1,   245,    -1,   247,    -1,
      -1,    -1,    -1,   252,   253,     3,     4,     5,    -1,    -1,
       8,     9,    10,    -1,    -1,    -1,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,    -1,    30,    31,    32,    -1,    -1,    -1,   202,   203,
      -1,    -1,    -1,   207,    -1,   209,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,   219,    -1,   221,   222,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,
      -1,   245,    -1,    -1,    -1,     3,     4,     5,   252,   253,
       8,     9,    10,    -1,    -1,    -1,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,    -1,    30,    31,    32,    -1,    -1,    -1,   202,   203,
      -1,    -1,    -1,   207,    -1,    -1,   210,   211,   212,   213,
      48,    -1,   216,   217,   218,   219,    -1,   221,   222,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,    -1,    -1,    -1,    -1,    -1,   242,    -1,
      -1,   245,    -1,    -1,    -1,    -1,   250,    -1,   252,   253,
       3,     4,     5,    -1,    -1,     8,     9,    10,    -1,    -1,
      -1,    -1,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,    30,    31,    32,
      -1,    -1,    -1,    -1,   202,   203,    -1,    -1,    -1,   207,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,   219,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   230,   231,   232,    -1,    -1,   235,   236,    -1,
      -1,    -1,    -1,    -1,   242,    -1,    -1,   245,    -1,   247,
      -1,     3,     4,     5,   252,   253,     8,     9,    10,    -1,
      -1,    -1,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,    -1,    30,    31,
      32,    -1,    -1,    -1,   202,   203,    -1,    -1,    -1,   207,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,   219,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   230,   231,   232,    -1,    -1,   235,   236,    -1,
      -1,    -1,    -1,    -1,   242,    -1,    -1,   245,    -1,    -1,
      -1,    -1,    -1,    -1,   252,   253,     3,     4,     5,    -1,
      -1,     8,     9,    10,    -1,    -1,    -1,   180,    -1,    -1,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,    -1,    30,    31,    32,    -1,    -1,    -1,   202,
     203,    -1,    -1,    -1,   207,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,   219,    -1,   221,   222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,   231,   232,
      -1,    -1,   235,   236,    -1,    -1,    -1,    -1,    -1,   242,
      -1,    -1,   245,    -1,   247,    -1,     3,     4,     5,   252,
     253,     8,     9,    10,    -1,    -1,    -1,    -1,   180,    -1,
      -1,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,    30,    31,    32,    -1,    -1,    -1,    -1,
     202,   203,    -1,    -1,    -1,   207,    -1,    -1,   210,   211,
     212,   213,    -1,    -1,   216,   217,   218,   219,    -1,   221,
     222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,   231,
     232,    -1,    -1,   235,   236,    -1,    -1,    -1,    -1,    -1,
     242,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,
     252,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   202,   203,    -1,    -1,    -1,
     207,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,   219,    -1,   221,   222,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   230,   231,   232,    -1,    -1,   235,   236,
      -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,   245,    -1,
      -1,    -1,    -1,    -1,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,    -1,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   202,   203,    -1,    -1,    -1,
     207,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,   219,    -1,   221,   222,     1,    -1,     3,     4,
      -1,    -1,    -1,   230,   231,   232,    -1,    -1,   235,   236,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,
      -1,    26,    -1,    -1,    -1,   252,   253,    -1,    33,    -1,
      -1,    -1,    -1,    38,    39,    -1,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    74,
      -1,    -1,     1,    -1,     3,     4,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    38,
      39,    -1,    -1,   118,    43,    44,    45,     1,    47,     3,
       4,    50,    -1,    -1,   129,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,   101,   102,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    -1,    -1,    -1,    69,    -1,    -1,    -1,     1,
      -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     129,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      -1,    43,    44,    45,     1,    47,     3,     4,    50,    -1,
     245,    53,    -1,    -1,   249,   129,   251,    -1,    -1,   133,
      62,    63,    64,    65,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    38,    39,    -1,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,   101,
     102,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    -1,
     229,    -1,    69,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   245,   129,    -1,   248,
     249,   133,   251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,   102,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    11,
      12,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,   245,   129,    25,   248,   249,   133,   251,    30,    31,
      32,    -1,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,
      -1,    -1,    43,    44,    45,     1,    47,     3,     4,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,   245,    50,    -1,    -1,   249,    -1,   251,
     101,   102,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    75,
      -1,     1,    -1,     3,     4,    -1,    -1,    -1,   129,    -1,
      -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   245,    -1,
      -1,    -1,   249,    -1,   251,   101,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    -1,    43,    44,    45,    -1,    47,    -1,   228,
      50,    -1,    -1,   129,    -1,    -1,   235,   133,   237,    -1,
     239,    -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   101,   102,    -1,    -1,    -1,    -1,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
      -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,   249,   129,
     251,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,    -1,    -1,     8,     9,    10,    -1,   245,
      -1,    -1,    -1,   249,    -1,   251,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,     6,    -1,    -1,
      -1,    11,    12,    -1,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    25,    -1,    26,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    -1,    -1,    46,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    -1,   245,    -1,    66,    -1,   249,
      69,   251,    71,    72,    73,    74,    -1,    -1,    -1,    -1,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,
      -1,    -1,   151,   152,   153,    -1,    -1,   180,    -1,    -1,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,    -1,    -1,    -1,   174,   175,    -1,    -1,   202,
     203,    -1,    -1,    -1,   207,    -1,   185,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,   219,    -1,   221,   222,
      -1,    -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,   242,
      25,    -1,   245,    28,    29,    30,    31,    32,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   248,
      -1,    -1,    -1,    11,    12,   255,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,
      28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    11,
      12,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    11,    12,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    28,    29,    30,    31,    32,    -1,    -1,    -1,
      -1,    11,    12,    -1,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   228,   229,    -1,    -1,    -1,    -1,    -1,
     235,    -1,   237,    -1,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,
      10,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,    -1,
     255,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     228,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   255,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   228,   255,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,     3,     4,     5,    -1,
      -1,     8,     9,    10,    -1,    -1,    -1,    -1,   228,   255,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   255,    -1,    -1,    -1,    -1,
      -1,    -1,   202,   203,    51,    -1,    -1,   207,    -1,    -1,
     210,   211,   212,   213,    -1,    -1,   216,   217,   218,   219,
      -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     230,   231,   232,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   242,   180,    91,   245,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,    -1,    -1,
      -1,    -1,     3,     4,     5,   202,   203,     8,     9,    10,
     207,    -1,   209,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,   219,    -1,   221,   222,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,   245,     3,
       4,     5,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   202,   203,    -1,    -1,    -1,
     207,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,   219,    -1,   221,   222,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    14,    15,
      16,    17,    18,    19,    20,   242,    -1,    -1,   245,    25,
      -1,    -1,    28,    29,    30,    31,    32,    11,    12,    -1,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    28,    29,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   202,   203,    -1,    -1,    -1,   207,    -1,   209,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,    -1,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   242,    -1,    -1,   245,    -1,    -1,    -1,   202,   203,
      -1,    -1,    -1,   207,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,   219,    -1,   221,   222,    -1,
      -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,   242,    25,
      -1,   245,    28,    29,    30,    31,    32,    11,    12,    -1,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    28,    29,    30,    31,    32,    11,
      12,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,
      32,    -1,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,    -1,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    11,    12,   248,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   248,    -1,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    11,    12,   248,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   248,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   248,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   248,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   248,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    11,    12,   248,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    28,    29,    30,    31,    32,    11,    12,    -1,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    28,    29,    30,    31,    32,    11,
      12,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,
      32,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   248,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    11,    12,   248,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,
      30,    31,    32,    11,    12,    -1,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,
      28,    29,    30,    31,    32,    11,    12,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    28,    29,    30,    31,    32,    11,    12,    -1,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    28,    29,    30,    31,    32,    11,
      12,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,
      32,    -1,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   248,    -1,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    11,    12,   248,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   248,    -1,
     228,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     248,    -1,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   248,    -1,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    11,    12,   248,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      11,    12,   247,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   247,    -1,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    11,    12,   247,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   247,    -1,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    11,    12,   247,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    11,    12,
     247,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      11,    12,   247,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   247,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      11,    12,   247,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    11,    12,   247,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    11,    12,
     247,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   247,    -1,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   247,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    11,    12,
     247,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   247,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    11,    12,   247,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   247,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    11,    12,   247,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   247,    -1,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   247,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    11,    12,   247,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   247,    -1,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    11,    12,   247,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    11,    12,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,    32,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,
      31,    32,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   247,    -1,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   247,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      -1,    -1,    -1,    -1,    11,    12,   247,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    -1,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,    -1,    -1,   245,    -1,
      -1,    -1,    -1,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,    -1,    -1,    -1,
     243,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
      11,    12,   243,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,   228,   229,    28,    29,    30,
      31,    32,   235,    -1,   237,    -1,   239,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,    -1,    -1,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,     6,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    26,
      -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      37,    38,    -1,    40,    41,    42,    43,    -1,    -1,    46,
      -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    66,
      -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    -1,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,   136,
     137,   232,   233,   234,   235,   236,   237,   238,   239,   146,
      -1,    -1,    -1,    -1,   151,   152,   153,     1,    -1,     3,
      -1,    -1,     6,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,   174,   175,    -1,
      -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,   185,    -1,
      -1,    -1,    36,    37,    38,    -1,    40,    41,    42,    43,
      -1,    -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    -1,
      -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,    73,
      74,    -1,   229,    -1,    -1,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
      -1,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
     104,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   146,    -1,    -1,    -1,    -1,   151,   152,   153,
      -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,
     174,   175,    28,    29,    30,    31,    32,    -1,    -1,    11,
      12,   185,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,
      32,    11,    12,    -1,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,
      30,    31,    32,    11,    12,   229,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,
      28,    29,    30,    31,    32,    11,    12,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    28,    29,    30,    31,    32,    11,    12,    -1,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    28,    29,    30,    31,    32,    11,
      12,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    28,    29,    30,    31,
      32,    11,    12,    -1,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,
      30,    31,    32,    11,    12,    -1,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,   201,    -1,    25,    -1,   205,
      28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
      29,    30,    31,    32,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,     1,    -1,     3,    -1,    25,     6,
      -1,    28,    29,    30,    31,    32,    11,    12,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    26,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    36,
      37,    38,    -1,    40,    41,    42,    43,    -1,    -1,    46,
      -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    66,
      -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    -1,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,   136,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
      -1,    -1,    -1,   150,   151,   152,   153,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   228,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,     1,    -1,     3,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,    -1,    -1,    -1,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    -1,    46,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    66,    -1,
      -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,
      -1,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,    -1,    -1,   103,   104,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,
      -1,    -1,    -1,    -1,     1,    -1,     3,    -1,   146,     6,
      -1,    -1,   150,   151,   152,   153,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,
      -1,    -1,    -1,    -1,    -1,    -1,   174,   175,    -1,    36,
      37,    38,    -1,    40,    41,    42,    43,   185,    -1,    46,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    66,
      -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    -1,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,   136,
     137,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,   146,
       6,    -1,    -1,    -1,   151,   152,   153,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      26,    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,    -1,
      36,    37,    38,    -1,    40,    41,    42,    43,   185,    -1,
      46,    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,
      66,    -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,
      -1,    -1,    -1,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,   104,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,
     136,   137,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
     146,     6,    -1,    -1,    -1,   151,   152,   153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,   185,
      -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,
      -1,    66,    -1,    -1,    69,    -1,    71,    72,    73,    74,
      -1,    -1,    -1,    -1,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,   104,
     105,   106,   107,    -1,    -1,   110,     3,    -1,    -1,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,   134,
     135,   136,   137,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      37,   146,    -1,    40,    41,    42,   151,   152,   153,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,
     175,    -1,    -1,    -1,    71,    -1,    -1,    74,    -1,    -1,
     185,    -1,    -1,    80,    -1,    82,    83,    84,    85,    86,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,
      -1,   118,   119,   120,   121,   122,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,   136,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   228,   229,    -1,    -1,    -1,    -1,    -1,   235,    -1,
     237,    -1,   239,    -1,    -1,    -1,    -1,   174,   175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   228,    -1,
      -1,    -1,    -1,    -1,    -1,   235,   236,   237,    -1,   239,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    26,    92,   146,   165,   196,   214,   276,   277,   280,
     281,   304,   306,   310,   314,   351,   464,     3,    27,   282,
     283,     3,   242,     3,     3,     3,     0,   304,    77,    79,
     354,    26,   244,    27,   243,   242,     3,   248,   248,   305,
     305,     3,    27,   282,     3,     4,     5,     8,     9,    10,
      30,    31,    32,   180,   183,   184,   186,   187,   188,   189,
     190,   191,   193,   194,   202,   203,   207,   210,   211,   212,
     213,   216,   217,   218,   219,   221,   222,   230,   231,   232,
     235,   236,   242,   245,   252,   253,   278,   329,   333,   340,
     283,     3,    88,   460,   243,   166,   307,   311,   352,    27,
     242,     8,   333,   333,   333,   242,   242,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   242,   333,
       1,   333,   333,   333,   333,   329,   330,   329,   332,   230,
     231,   232,   333,     1,   333,    11,    12,    14,    15,    16,
      17,    18,    19,    20,    25,    28,    29,    30,    31,    32,
     228,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   242,   250,   254,   100,   461,   243,   247,     5,   315,
     198,   204,   215,   308,   309,   181,   182,   195,   208,   223,
     312,   313,   249,   357,   247,   329,   332,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   229,   247,   245,   243,   246,   333,   333,   333,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   247,   332,     3,   329,     3,
       3,   248,   243,     3,   248,   319,   192,   197,     3,     3,
     199,   309,   244,   244,   244,   244,   244,   200,   313,   242,
     242,   356,   247,   247,   247,   247,   247,   247,   247,   243,
     247,   247,   247,   247,   247,   247,   243,   247,   247,   243,
     243,   243,   247,   247,   247,   247,   247,   329,   332,   329,
     229,   247,    23,    24,   229,   255,   244,   462,    73,    88,
     100,   458,   459,     5,   250,   316,   248,   248,   248,   248,
     329,     3,     3,     3,     5,    89,   358,     3,   245,   250,
     280,   343,   344,   345,   398,   399,   400,    26,   355,   329,
     329,   329,   329,   329,   229,   246,   329,   329,   329,   329,
     329,   243,   245,   284,   284,    88,   284,    71,   453,   454,
     458,   247,     3,    48,   164,   167,   170,   317,   248,   248,
     248,   248,   248,    74,    98,    99,   118,   158,   254,   279,
     385,   405,   243,   247,   254,   400,   401,     3,    72,    73,
      88,   243,   247,   243,   247,   248,     3,   248,   247,   247,
     247,   247,   247,   329,     1,   246,   255,   255,   255,    73,
     463,     3,   230,   285,     3,   341,     3,   284,     3,     3,
     116,   446,   171,   319,   340,   405,   329,     3,   388,    89,
     388,     1,   329,   243,   246,   242,   114,   115,   122,   123,
     124,   125,   126,   130,   134,   135,   174,   175,   346,   383,
     346,   100,   346,   384,   399,     3,   345,    74,   353,   246,
       3,   243,   247,     3,     3,    35,    75,   246,   243,   248,
     248,     3,   248,   244,   447,    57,   320,   171,   173,   171,
     173,   229,   244,   385,   255,   229,   255,   400,   245,   400,
     158,   347,   347,   347,   347,     3,     1,     6,    38,    43,
      49,    61,    62,    66,    69,    72,    73,    79,    88,    89,
      95,    96,   110,   117,   127,   146,   151,   152,   153,   280,
     289,   359,   370,   375,   376,   404,    73,   248,   230,   285,
     285,     3,   248,   278,   228,   235,   237,   239,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   448,   449,   450,
     451,   452,   455,   456,     3,   248,   320,   319,   320,   319,
     329,   329,   388,   329,   401,   247,   405,   406,   406,   406,
     406,   244,   248,   341,     1,   242,   321,   322,   242,   296,
     297,   340,   405,   341,   242,     1,   149,   369,   242,   384,
     384,     1,   384,     1,   385,     3,   242,   336,   337,   242,
     337,     1,    58,    69,    70,   111,   138,   139,   140,   141,
     142,   143,   144,   145,   154,   155,   156,   157,   160,   161,
     162,   163,   242,   416,   417,   418,   420,   422,   423,   369,
     242,   294,   295,   242,    39,   376,   341,     1,   385,     3,
      36,    37,    40,    41,    42,    46,    71,    74,    80,    82,
      83,    84,    85,    86,    87,    90,    97,    98,    99,   100,
     103,   104,   105,   106,   107,   118,   119,   120,   121,   136,
     137,   185,   338,   339,   383,    39,   248,   359,   377,   378,
     359,    56,   347,   383,     3,   446,     3,   224,   225,   226,
     242,   278,   286,   287,   288,   248,    59,   449,   455,   452,
     455,   229,   456,   248,   229,   318,   248,   318,   255,   201,
     205,   390,   391,   392,   394,   255,   246,   284,   284,   284,
     284,     5,   248,   244,   248,    67,    68,    93,    94,   112,
     113,   114,   115,   131,   132,   323,   324,   249,   299,   300,
     329,   243,   248,   244,   296,   248,     3,    55,    74,    98,
      99,   118,   158,   405,   409,   329,   347,   347,   248,   347,
     248,   386,   388,   242,   405,   323,   324,   329,   331,   243,
     248,   323,   324,   248,    58,   242,   418,   422,     3,     7,
     425,   426,   242,   242,   242,   242,   242,   242,   242,   242,
       3,   424,   424,   424,   424,   242,   242,   242,   242,     1,
      81,    91,   419,   424,    58,   416,   248,   244,   248,   244,
       3,    76,    78,   109,   406,     1,     3,   229,   376,   150,
     248,   248,     3,   387,   389,   249,   395,     1,     4,    33,
      38,    39,    43,    44,    45,    47,    50,    62,    63,    64,
      65,    69,   101,   102,   129,   133,   245,   249,   251,   298,
     325,   340,   348,   432,   432,     1,   284,     1,     3,   412,
     413,     1,   413,     1,    98,   147,   148,   381,   382,     1,
     284,     3,   328,   438,   242,   299,   321,   337,   242,   299,
     337,   382,   229,   376,    52,   406,   347,    57,     3,   287,
     288,   287,   287,   288,    14,   235,   236,   228,   230,   232,
     229,   229,   236,   256,   257,   258,   456,   457,   165,   248,
     248,   329,   392,   242,   254,   247,     3,     3,     3,     3,
     248,   329,   243,   243,   243,   243,     3,     9,    10,   242,
     303,   340,   348,   349,   350,   247,   296,   329,   244,   405,
       3,   247,   406,   406,   406,   243,   248,     1,   250,   331,
     402,   403,   242,   243,   247,   243,   243,   247,   336,   243,
     243,   247,   329,   248,   248,   244,   244,   243,   248,    51,
      81,    91,   333,   428,   428,   428,   428,   428,   428,   428,
     428,   254,   243,   248,   248,   248,   248,   428,   428,   428,
     428,   247,   424,   235,   236,   427,   242,   303,   242,   303,
       1,   242,   248,   247,   247,   247,   300,   247,   243,     3,
      53,   244,   243,   248,     1,     9,    10,   242,     1,   337,
      11,   244,   248,   242,   248,   340,   348,     1,    53,   229,
     432,   436,   242,   242,   242,   348,   340,   242,   348,   432,
       1,    75,   229,   436,   242,   348,   242,   242,   242,   332,
     242,   303,   237,   242,   340,   248,   432,   437,   280,   242,
     248,    11,   244,   248,     3,   410,   411,   248,   244,   254,
     407,   408,   243,   248,   248,   248,   248,   347,   248,   411,
     242,    22,   337,   299,   337,   248,   337,   248,   347,     3,
      53,   366,   300,   406,   228,   247,   247,   287,   287,   287,
     286,   287,   288,   288,   256,   257,   258,   229,   248,   209,
     235,   236,   329,   393,   393,   244,    27,   248,   324,   323,
      68,   324,    67,   323,   302,   329,   244,   243,   248,   367,
     329,     1,   248,   364,   284,   284,   284,   388,   247,     3,
     247,   243,   247,     1,   331,   403,   324,   337,   323,   329,
     324,   323,   337,   247,   329,   242,   329,   425,   254,   329,
     333,   329,   333,   227,   243,   243,   243,   243,   243,   243,
     243,   243,   333,     3,   243,   243,   243,   243,   427,    13,
      21,   301,   302,     1,   301,    60,   247,   361,   360,   284,
     248,     5,   368,   150,   329,   389,   250,   331,   396,   397,
     248,   248,   329,   329,   331,   248,   244,    53,     3,    53,
     432,   329,   329,   329,   248,   248,     1,   348,   244,    75,
       3,    75,     1,   329,   248,   329,   329,     1,   329,   246,
     302,   280,     1,    81,    91,   237,   326,   327,   329,   437,
     247,   332,   102,   251,   298,   325,   329,   102,   298,   325,
     329,   244,   407,   243,   248,   329,   329,   254,   412,   284,
     405,   248,     3,   329,   248,   337,   248,   248,   321,   406,
     376,   377,     1,   284,   284,   229,   229,   457,   209,   209,
     229,   229,   329,   247,   247,   247,   247,   247,   247,   243,
     247,   229,   329,   349,    48,   332,   371,   372,   248,    55,
     363,   242,   341,   341,     3,   342,   242,   402,   247,   247,
     247,   247,   248,   247,   247,   247,   248,   418,   422,   229,
     329,    34,   429,   227,   227,   329,   428,   428,   302,   428,
     428,   428,   428,   302,   255,   254,   428,   428,   428,   428,
      13,    21,   242,   424,   242,   424,   243,   247,   247,   247,
     248,    72,    73,    88,   444,   445,    72,    73,    88,   280,
     289,   439,   441,   442,   443,   341,   243,   376,     3,   247,
     243,   247,   248,   248,   247,   329,   433,   247,   247,   247,
     247,   244,   329,   434,   247,   247,   247,   247,   247,   247,
     247,   437,   247,   329,   329,   247,    87,   243,   247,   248,
     247,   242,   242,   329,   329,   248,   242,   329,   329,   248,
     329,   410,   229,   329,   411,   284,   243,   247,   248,   248,
     284,   300,    53,   248,   341,   341,   286,   287,   248,   393,
     393,   302,   329,   229,   229,    54,   372,   329,   289,   334,
     335,   441,   445,   248,   248,   244,   243,   248,     1,   247,
     329,   337,   337,   337,   337,   248,   248,   329,   243,   243,
     255,   329,   329,   243,   243,     3,   243,   430,   431,   243,
     243,   243,   243,   243,   247,   333,   243,   243,   243,   243,
     242,   242,   424,   247,   424,   247,   302,   362,    74,   100,
     118,   279,   440,    74,   118,   279,   440,    74,   118,   279,
     440,   243,   247,   248,    74,   118,   279,   440,    74,   118,
     279,   440,    74,   118,   279,   440,   439,   437,   248,     5,
      53,   242,   396,   248,   248,   289,   290,   291,     1,    48,
     292,   293,   332,     1,   293,     1,   293,   432,   329,   248,
     291,   437,   437,   432,   437,   432,   432,   280,   327,   327,
     248,   329,   248,   248,   329,   248,   248,   329,   229,   248,
     411,     3,     3,   379,   380,   284,   248,   248,   247,   255,
     247,   255,   243,   247,   229,   374,   373,   248,   335,   432,
     247,   329,     3,   247,   247,   248,   248,   248,   248,   229,
     329,    34,   333,   302,   302,   340,   247,   243,   302,   302,
     302,   302,   329,   248,   255,   302,   302,   302,   302,   424,
     424,    23,    24,   229,   421,   421,   291,     3,     3,     3,
     347,     3,     3,     3,   347,     3,     3,     3,   347,     3,
     444,   248,   341,   341,   341,   347,   341,   341,   341,   347,
     341,   341,   341,   347,    60,   247,   150,   247,   329,   289,
     435,    54,   229,   229,   437,     1,    54,   292,   229,    54,
      54,    54,    54,   248,   435,    52,    52,   437,   247,   247,
     255,   329,   248,   247,   244,   243,   248,     3,   380,   414,
     415,   302,   329,   378,   378,     3,    55,   248,   244,   329,
     247,   227,   430,   243,   248,   340,   430,   430,   243,   430,
     430,   243,   243,   430,   430,   421,   421,   329,   329,   437,
     406,   406,   406,   291,   248,   248,   248,   406,   248,   248,
     248,   406,   248,   248,   248,   406,   248,   247,    53,   432,
     437,   437,   437,     1,   329,    75,   437,   437,   325,   325,
     255,   329,   379,   407,   248,   243,   248,   247,   244,   291,
     329,   329,   247,   302,   247,   247,   302,   247,   247,   302,
     302,   247,   247,   329,   329,   247,   247,    60,     3,     3,
       3,   437,   341,   341,   341,   248,   248,   329,   329,     3,
     414,   329,   432,   248,   430,   248,   248,   430,   248,   248,
     430,   430,   248,   248,   247,   247,   247,   247,    60,   248,
     248,   248,   348,     1,   348,   248,   248,   247,    55,   247,
     247,   247,   247,   247,   247,   244,   247,   244,   365,   248,
     248,   248,   248,   329,   432,   329,   377,   247,   247,   432,
     432
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   275,   276,   276,   277,   277,   278,   278,   278,   279,
     279,   280,   280,   281,   281,   281,   281,   282,   282,   283,
     283,   284,   284,   285,   285,   285,   285,   285,   285,   286,
     286,   286,   287,   287,   287,   287,   287,   287,   288,   288,
     288,   288,   288,   288,   288,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
     289,   290,   290,   291,   291,   292,   292,   292,   292,   293,
     293,   294,   294,   294,   295,   295,   296,   297,   297,   297,
     298,   298,   299,   299,   299,   299,   300,   300,   301,   301,
     302,   302,   303,   303,   303,   304,   304,   304,   304,   304,
     304,   305,   305,   307,   306,   308,   308,   309,   309,   309,
     309,   311,   310,   312,   312,   313,   313,   313,   313,   313,
     314,   315,   315,   316,   316,   317,   317,   317,   317,   317,
     318,   318,   319,   319,   320,   320,   321,   321,   321,   321,
     321,   321,   322,   322,   323,   323,   323,   323,   324,   324,
     324,   324,   325,   325,   325,   326,   326,   326,   327,   327,
     327,   328,   328,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   330,   330,   331,   331,   331,
     331,   332,   332,   333,   333,   333,   333,   333,   333,   333,
     333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
     333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
     333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
     334,   334,   335,   335,   336,   336,   336,   336,   336,   336,
     336,   336,   337,   337,   338,   338,   338,   338,   338,   338,
     338,   338,   338,   338,   338,   338,   339,   339,   339,   339,
     339,   339,   339,   339,   339,   339,   339,   339,   340,   340,
     340,   340,   340,   340,   341,   341,   342,   342,   342,   342,
     343,   343,   344,   344,   344,   344,   344,   345,   345,   345,
     345,   345,   346,   346,   347,   347,   348,   348,   349,   350,
     350,   352,   353,   351,   354,   354,   355,   355,   356,   356,
     356,   357,   357,   358,   358,   358,   359,   359,   359,   359,
     359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
     359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
     359,   359,   359,   359,   359,   359,   359,   359,   359,   360,
     359,   361,   359,   362,   359,   359,   363,   359,   364,   359,
     359,   359,   359,   365,   359,   366,   359,   359,   367,   359,
     359,   368,   359,   359,   359,   359,   359,   359,   359,   359,
     359,   359,   359,   369,   369,   370,   371,   371,   373,   372,
     374,   372,   375,   375,   376,   376,   377,   377,   377,   378,
     378,   379,   380,   380,   381,   381,   381,   382,   382,   383,
     383,   383,   383,   383,   383,   383,   383,   383,   383,   383,
     383,   384,   385,   385,   385,   385,   385,   385,   385,   386,
     386,   387,   387,   388,   389,   390,   390,   391,   391,   392,
     392,   392,   392,   392,   393,   393,   393,   393,   394,   394,
     395,   395,   395,   395,   395,   395,   396,   396,   397,   397,
     398,   398,   398,   398,   399,   399,   400,   400,   400,   400,
     401,   401,   402,   402,   402,   403,   403,   404,   404,   404,
     405,   406,   406,   407,   407,   408,   408,   409,   409,   409,
     409,   409,   409,   409,   410,   410,   411,   411,   412,   412,
     413,   413,   414,   415,   415,   416,   416,   416,   416,   416,
     416,   416,   416,   416,   416,   416,   416,   416,   416,   416,
     416,   416,   416,   416,   416,   416,   416,   416,   416,   417,
     417,   418,   418,   419,   419,   420,   420,   420,   420,   421,
     421,   421,   422,   422,   422,   423,   423,   423,   424,   424,
     424,   424,   425,   425,   425,   425,   426,   426,   427,   427,
     427,   428,   428,   428,   428,   428,   428,   428,   428,   429,
     429,   430,   430,   431,   431,   431,   431,   431,   432,   432,
     432,   432,   432,   432,   433,   432,   432,   432,   432,   434,
     432,   432,   432,   432,   432,   432,   432,   432,   432,   432,
     432,   432,   432,   432,   432,   432,   432,   432,   432,   432,
     432,   432,   432,   432,   432,   432,   432,   432,   432,   432,
     432,   432,   432,   432,   432,   432,   432,   432,   432,   432,
     432,   432,   432,   435,   435,   436,   436,   437,   437,   438,
     439,   439,   440,   440,   441,   441,   441,   441,   441,   441,
     441,   441,   441,   441,   441,   441,   442,   442,   443,   443,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
     444,   444,   445,   445,   445,   445,   445,   447,   446,   448,
     448,   449,   450,   450,   451,   451,   452,   453,   454,   454,
     455,   455,   456,   456,   456,   456,   456,   456,   456,   456,
     456,   456,   456,   456,   456,   456,   456,   456,   456,   456,
     456,   456,   456,   456,   456,   457,   457,   457,   457,   458,
     458,   458,   458,   459,   459,   460,   460,   461,   461,   462,
     462,   463,   463,   464,   464
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     1,     2,     1,     1,     2,     1,
       1,     1,     0,     2,     3,     3,     4,     3,     1,     1,
       3,     3,     0,     1,     2,     3,     3,     4,     0,     2,
       1,     5,     3,     1,     1,     3,     3,     5,     3,     1,
       1,     2,     3,     3,     3,     8,     7,     5,     5,     4,
       4,     3,     4,     4,     4,     4,     4,     4,     4,     3,
       3,     1,     2,     1,     0,     3,     3,     2,     3,     2,
       1,     3,     3,     3,     1,     0,     3,     1,     2,     3,
       2,     4,     2,     4,     6,     8,     1,     0,     1,     3,
       1,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       8,     1,     0,     0,     6,     2,     1,     3,     3,     3,
       3,     0,     6,     2,     1,     4,     4,     4,     4,     4,
       8,     0,     2,     0,     2,     4,     5,     6,     5,     6,
       0,     2,     1,     3,     0,     2,     5,     5,     5,     5,
       5,     5,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     4,     4,     1,     3,     3,     2,     2,
       1,     6,     4,     1,     2,     2,     2,     2,     2,     2,
       2,     3,     3,     3,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     1,     5,     3,     1,     0,
       2,     3,     1,     1,     1,     1,     1,     1,     4,     4,
       3,     3,     4,     4,     4,     4,     4,     4,     6,     4,
       4,     4,     4,     4,     6,     4,     4,     6,     4,     4,
       4,     4,     4,     4,     6,     6,     3,     3,     6,     7,
       1,     2,     1,     1,     4,     5,     3,     2,     4,     5,
       4,     5,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       4,     6,     6,     6,     1,     3,     1,     3,     3,     5,
       1,     3,     1,     3,     3,     2,     2,     7,     7,     7,
       7,     9,     1,     0,     1,     0,     1,     3,     3,     3,
       1,     0,     0,    11,     1,     1,     8,     0,     3,     3,
       0,     0,     4,     3,     3,     5,     9,     9,     8,     7,
       7,     7,     7,     7,     7,     6,     3,     1,     3,     4,
       5,     5,     6,     4,     5,     3,     3,     6,     8,     8,
       6,     8,     8,     5,     5,     5,     3,     3,     3,     0,
       8,     0,    11,     0,    10,     5,     0,     9,     0,    12,
       6,     3,     3,     0,    14,     0,     5,     2,     0,     7,
       5,     0,     8,     2,     3,     3,     3,     2,     5,     3,
       3,     9,     5,     1,     0,     4,     2,     1,     0,     4,
       0,     4,     2,     1,     1,     0,     1,     3,     5,     1,
       1,     3,     3,     1,     1,     1,     1,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     2,     1,     1,     1,     1,
       3,     1,     3,     4,     3,     1,     0,     2,     1,     6,
       6,     6,     6,     2,     1,     1,     2,     2,     1,     1,
       4,     4,     2,     2,     2,     0,     5,     4,     1,     3,
       1,     5,     3,     7,     1,     0,     1,     6,     4,     4,
       1,     3,     5,     5,     4,     3,     1,     1,     1,     1,
       5,     1,     0,     0,     1,     5,     6,     1,     2,     1,
       1,     1,     1,     0,     2,     3,     1,     3,     2,     3,
       1,     3,     2,     1,     3,     3,     2,     2,     6,     6,
       3,     3,    12,    10,    12,     8,    10,    12,    10,    10,
      12,    10,    10,    10,     7,     3,     3,     3,     3,     1,
       2,     5,     3,     1,     1,    10,    11,    10,    11,     1,
       1,     1,     5,     3,     5,     6,     6,     3,     1,     4,
       3,     6,     3,     7,     3,     7,     1,     3,     1,     1,
       0,     2,     2,     4,     4,     5,     7,     3,     1,     3,
       1,     0,     1,     1,     2,     2,     3,     1,     5,     3,
       5,     3,     2,     3,     0,     7,     3,     2,     3,     0,
       7,     3,     3,     3,     2,     5,     6,     6,     6,     6,
       6,     6,     5,     7,     5,     7,    13,    11,    13,     5,
       5,     5,     2,     3,     4,     6,     4,     4,     4,     4,
       5,     5,     5,     9,     5,     9,     5,     5,     2,     5,
       4,     2,     2,     2,     0,     2,     1,     1,     1,     4,
       1,     1,     1,     0,     6,     6,     6,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     2,     1,     1,     0,
       5,     5,     5,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     2,     2,     0,     4,     1,
       1,     4,     1,     2,     1,     2,     6,     5,     1,     0,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     5,     1,     2,     1,     3,     1,     0,     2,
       0,     2,     4,    10,    13
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 6:
#line 418 "parse.y" /* yacc.c:1646  */
    { (yyval.number) = (yyvsp[0].number); based_size = 0;}
#line 5002 "parse.cc" /* yacc.c:1646  */
    break;

  case 7:
#line 420 "parse.y" /* yacc.c:1646  */
    { (yyval.number) = (yyvsp[0].number); based_size = 0;}
#line 5008 "parse.cc" /* yacc.c:1646  */
    break;

  case 8:
#line 422 "parse.y" /* yacc.c:1646  */
    { (yyval.number) = pform_verinum_with_size((yyvsp[-1].number),(yyvsp[0].number), (yylsp[0]).text, (yylsp[0]).first_line);
	       based_size = 0; }
#line 5015 "parse.cc" /* yacc.c:1646  */
    break;

  case 12:
#line 438 "parse.y" /* yacc.c:1646  */
    { (yyval.named_pexprs) = 0; }
#line 5021 "parse.cc" /* yacc.c:1646  */
    break;

  case 13:
#line 442 "parse.y" /* yacc.c:1646  */
    { (yyval.named_pexprs) = 0; }
#line 5027 "parse.cc" /* yacc.c:1646  */
    break;

  case 14:
#line 443 "parse.y" /* yacc.c:1646  */
    { (yyval.named_pexprs) = (yyvsp[-1].named_pexprs); }
#line 5033 "parse.cc" /* yacc.c:1646  */
    break;

  case 15:
#line 444 "parse.y" /* yacc.c:1646  */
    { (yyval.named_pexprs) = (yyvsp[-2].named_pexprs); }
#line 5039 "parse.cc" /* yacc.c:1646  */
    break;

  case 16:
#line 446 "parse.y" /* yacc.c:1646  */
    { if ((yyvsp[-3].named_pexprs)) {
	    svector<named_pexpr_t*>*tmp;
	    tmp = new svector<named_pexpr_t*>(*(yyvsp[-3].named_pexprs), *(yyvsp[-1].named_pexprs));
	    delete (yyvsp[-3].named_pexprs);
	    delete (yyvsp[-1].named_pexprs);
	    (yyval.named_pexprs) = tmp;
	} else (yyval.named_pexprs) = (yyvsp[-1].named_pexprs);
      }
#line 5052 "parse.cc" /* yacc.c:1646  */
    break;

  case 17:
#line 458 "parse.y" /* yacc.c:1646  */
    { svector<named_pexpr_t*>*tmp =
			new svector<named_pexpr_t*>(*(yyvsp[-2].named_pexprs),(yyvsp[0].named_pexpr));
		  delete (yyvsp[-2].named_pexprs);
		  (yyval.named_pexprs) = tmp;
		}
#line 5062 "parse.cc" /* yacc.c:1646  */
    break;

  case 18:
#line 464 "parse.y" /* yacc.c:1646  */
    { svector<named_pexpr_t*>*tmp = new svector<named_pexpr_t*>(1);
		  (*tmp)[0] = (yyvsp[0].named_pexpr);
		  (yyval.named_pexprs) = tmp;
		}
#line 5071 "parse.cc" /* yacc.c:1646  */
    break;

  case 19:
#line 473 "parse.y" /* yacc.c:1646  */
    { named_pexpr_t*tmp = new named_pexpr_t;
		  tmp->name = lex_strings.make((yyvsp[0].text));
		  tmp->parm = 0;
		  delete[](yyvsp[0].text);
		  (yyval.named_pexpr) = tmp;
		}
#line 5082 "parse.cc" /* yacc.c:1646  */
    break;

  case 20:
#line 480 "parse.y" /* yacc.c:1646  */
    { PExpr*tmp = (yyvsp[0].expr);
		  named_pexpr_t*tmp2 = new named_pexpr_t;
		  tmp2->name = lex_strings.make((yyvsp[-2].text));
		  tmp2->parm = tmp;
		  delete[](yyvsp[-2].text);
		  (yyval.named_pexpr) = tmp2;
		}
#line 5094 "parse.cc" /* yacc.c:1646  */
    break;

  case 21:
#line 491 "parse.y" /* yacc.c:1646  */
    { 
      (yyval.sectype) = (yyvsp[-1].sectype);
    }
#line 5102 "parse.cc" /* yacc.c:1646  */
    break;

  case 22:
#line 495 "parse.y" /* yacc.c:1646  */
    { 
      SecType* type = new ConstType();
      // SecType* type = IndexType::RL;
      (yyval.sectype) = type;
    }
#line 5112 "parse.cc" /* yacc.c:1646  */
    break;

  case 23:
#line 504 "parse.y" /* yacc.c:1646  */
    { 
      perm_string name = lex_strings.make((yyvsp[0].text));
      SecType* type = new ConstType(name);
      (yyval.sectype) = type;
    }
#line 5122 "parse.cc" /* yacc.c:1646  */
    break;

  case 24:
#line 510 "parse.y" /* yacc.c:1646  */
    { 
      perm_string name = lex_strings.make((yyvsp[-1].text));
      perm_string expr = lex_strings.make((yyvsp[0].text));
      SecType* type = new IndexType(name, expr);
      (yyval.sectype) = type;
    }
#line 5133 "parse.cc" /* yacc.c:1646  */
    break;

  case 25:
#line 517 "parse.y" /* yacc.c:1646  */
    {
      (yyval.sectype) = new JoinType ((yyvsp[-2].sectype), (yyvsp[0].sectype));
    }
#line 5141 "parse.cc" /* yacc.c:1646  */
    break;

  case 26:
#line 521 "parse.y" /* yacc.c:1646  */
    {
      (yyval.sectype) = new MeetType ((yyvsp[-2].sectype), (yyvsp[0].sectype));
    }
#line 5149 "parse.cc" /* yacc.c:1646  */
    break;

  case 27:
#line 525 "parse.y" /* yacc.c:1646  */
    {
      perm_string index = lex_strings.make((yyvsp[-2].text));
      SecType* type = new QuantType(index, (yyvsp[0].lqetype));
      (yyval.sectype) = type;
    }
#line 5159 "parse.cc" /* yacc.c:1646  */
    break;

  case 28:
#line 531 "parse.y" /* yacc.c:1646  */
    { 
      SecType* type = ConstType::BOT;
      (yyval.sectype) = type;
    }
#line 5168 "parse.cc" /* yacc.c:1646  */
    break;

  case 29:
#line 539 "parse.y" /* yacc.c:1646  */
    {
      perm_string ident = lex_strings.make((yyvsp[-1].text));
      LQuantExpr* l = new LQEDep(ident, (yyvsp[0].iqetype));
      (yyval.lqetype) = l; 
    }
#line 5178 "parse.cc" /* yacc.c:1646  */
    break;

  case 30:
#line 545 "parse.y" /* yacc.c:1646  */
    {
      perm_string ident = lex_strings.make((yyvsp[0].text));
      (yyval.lqetype) = new LQEConst(ident);
    }
#line 5187 "parse.cc" /* yacc.c:1646  */
    break;

  case 31:
#line 550 "parse.y" /* yacc.c:1646  */
    {
      (yyval.lqetype) = new LQETernary( (yyvsp[-4].bqetype), (yyvsp[-2].lqetype), (yyvsp[0].lqetype));
    }
#line 5195 "parse.cc" /* yacc.c:1646  */
    break;

  case 32:
#line 557 "parse.y" /* yacc.c:1646  */
    {
        (yyval.iqetype) = (yyvsp[-1].iqetype);
    }
#line 5203 "parse.cc" /* yacc.c:1646  */
    break;

  case 33:
#line 561 "parse.y" /* yacc.c:1646  */
    {
      IQuantExpr* v = new IQENum((yyvsp[0].number));
      (yyval.iqetype) = v;
    }
#line 5212 "parse.cc" /* yacc.c:1646  */
    break;

  case 34:
#line 566 "parse.y" /* yacc.c:1646  */
    {
        IQuantExpr* v = new IQEVar(lex_strings.make((yyvsp[0].text)));
        (yyval.iqetype) = v;
    }
#line 5221 "parse.cc" /* yacc.c:1646  */
    break;

  case 35:
#line 571 "parse.y" /* yacc.c:1646  */
    {
        perm_string sym = perm_string::literal("+");
        IQuantExpr* v = new IQEBinary((yyvsp[-2].iqetype), (yyvsp[0].iqetype), sym);
        (yyval.iqetype) = v;
    }
#line 5231 "parse.cc" /* yacc.c:1646  */
    break;

  case 36:
#line 577 "parse.y" /* yacc.c:1646  */
    {
        perm_string sym = perm_string::literal("-");
        IQuantExpr* v = new IQEBinary((yyvsp[-2].iqetype), (yyvsp[0].iqetype), sym);
        (yyval.iqetype) = v;
    }
#line 5241 "parse.cc" /* yacc.c:1646  */
    break;

  case 37:
#line 583 "parse.y" /* yacc.c:1646  */
    {
        IQuantExpr *v = new IQETernary((yyvsp[-4].bqetype), (yyvsp[-2].iqetype), (yyvsp[0].iqetype));
        (yyval.iqetype) = v;
    }
#line 5250 "parse.cc" /* yacc.c:1646  */
    break;

  case 38:
#line 591 "parse.y" /* yacc.c:1646  */
    {
      (yyval.bqetype) = (yyvsp[-1].bqetype);
    }
#line 5258 "parse.cc" /* yacc.c:1646  */
    break;

  case 39:
#line 595 "parse.y" /* yacc.c:1646  */
    {
        BQuantExpr* v = new BQETrue();
        (yyval.bqetype) = v;
    }
#line 5267 "parse.cc" /* yacc.c:1646  */
    break;

  case 40:
#line 600 "parse.y" /* yacc.c:1646  */
    {
         BQuantExpr* v = new BQEFalse();
         (yyval.bqetype) = v;
     }
#line 5276 "parse.cc" /* yacc.c:1646  */
    break;

  case 41:
#line 605 "parse.y" /* yacc.c:1646  */
    {
        BQuantExpr* v = new BQEFromIQE((yyvsp[0].iqetype));
        (yyval.bqetype) = v;
    }
#line 5285 "parse.cc" /* yacc.c:1646  */
    break;

  case 42:
#line 610 "parse.y" /* yacc.c:1646  */
    {
        perm_string sym = perm_string::literal("and");
        BQuantExpr *v = new BQEBinary((yyvsp[-2].bqetype), (yyvsp[0].bqetype), sym); 
        (yyval.bqetype) = v;
    }
#line 5295 "parse.cc" /* yacc.c:1646  */
    break;

  case 43:
#line 616 "parse.y" /* yacc.c:1646  */
    {
        perm_string sym = perm_string::literal("or");
        BQuantExpr *v = new BQEBinary((yyvsp[-2].bqetype), (yyvsp[0].bqetype), sym);
        (yyval.bqetype) = v;
    }
#line 5305 "parse.cc" /* yacc.c:1646  */
    break;

  case 44:
#line 622 "parse.y" /* yacc.c:1646  */
    {
        BQuantExpr *v = new BQEEq((yyvsp[-2].iqetype), (yyvsp[0].iqetype));
        (yyval.bqetype) = v;
    }
#line 5314 "parse.cc" /* yacc.c:1646  */
    break;

  case 45:
#line 640 "parse.y" /* yacc.c:1646  */
    { ivl_variable_type_t dtype = (yyvsp[-5].datatype);
		  if (dtype == IVL_VT_NO_TYPE)
			dtype = IVL_VT_LOGIC;
		  pform_set_net_range_type((yyvsp[-1].perm_strings), (yyvsp[-3].exprs), (yyvsp[-4].flag), dtype, (yyvsp[-2].sectype));
		  if ((yyvsp[-7].named_pexprs)) delete (yyvsp[-7].named_pexprs);
		}
#line 5325 "parse.cc" /* yacc.c:1646  */
    break;

  case 46:
#line 654 "parse.y" /* yacc.c:1646  */
    { ivl_variable_type_t dtype = (yyvsp[-4].datatype);
		  if (dtype == IVL_VT_NO_TYPE)
			dtype = IVL_VT_LOGIC;
		  pform_set_net_range_type((yyvsp[-1].perm_strings), 0, (yyvsp[-3].flag), dtype, (yyvsp[-2].sectype));
		  if ((yyvsp[-6].named_pexprs)) delete (yyvsp[-6].named_pexprs);
		}
#line 5336 "parse.cc" /* yacc.c:1646  */
    break;

  case 47:
#line 666 "parse.y" /* yacc.c:1646  */
    { pform_set_reg_integer_type((yyvsp[-1].perm_strings), (yyvsp[-2].sectype));
		  if ((yyvsp[-4].named_pexprs)) delete (yyvsp[-4].named_pexprs);
		}
#line 5344 "parse.cc" /* yacc.c:1646  */
    break;

  case 48:
#line 671 "parse.y" /* yacc.c:1646  */
    { pform_set_reg_time_type((yyvsp[-1].perm_strings), (yyvsp[-2].sectype));
		}
#line 5351 "parse.cc" /* yacc.c:1646  */
    break;

  case 49:
#line 680 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-1].perm_strings); }
#line 5357 "parse.cc" /* yacc.c:1646  */
    break;

  case 50:
#line 682 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-1].perm_strings); }
#line 5363 "parse.cc" /* yacc.c:1646  */
    break;

  case 51:
#line 685 "parse.y" /* yacc.c:1646  */
    { pform_make_events((yyvsp[-1].perm_strings), (yylsp[-2]).text, (yylsp[-2]).first_line);
		}
#line 5370 "parse.cc" /* yacc.c:1646  */
    break;

  case 54:
#line 695 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in reg variable list.");
		  yyerrok;
		  if ((yyvsp[-3].named_pexprs)) delete (yyvsp[-3].named_pexprs);
		}
#line 5379 "parse.cc" /* yacc.c:1646  */
    break;

  case 55:
#line 700 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in integer variable list.");
		  yyerrok;
		  if ((yyvsp[-3].named_pexprs)) delete (yyvsp[-3].named_pexprs);
		}
#line 5388 "parse.cc" /* yacc.c:1646  */
    break;

  case 56:
#line 705 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in time variable list.");
		  yyerrok;
		}
#line 5396 "parse.cc" /* yacc.c:1646  */
    break;

  case 57:
#line 709 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in real variable list.");
		  yyerrok;
		}
#line 5404 "parse.cc" /* yacc.c:1646  */
    break;

  case 58:
#line 713 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in realtime variable list.");
		  yyerrok;
		}
#line 5412 "parse.cc" /* yacc.c:1646  */
    break;

  case 59:
#line 717 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in parameter list.");
		  yyerrok;
		}
#line 5420 "parse.cc" /* yacc.c:1646  */
    break;

  case 60:
#line 721 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error localparam list.");
		  yyerrok;
		}
#line 5428 "parse.cc" /* yacc.c:1646  */
    break;

  case 65:
#line 738 "parse.y" /* yacc.c:1646  */
    { PCase::Item*tmp = new PCase::Item;
		  tmp->expr = *(yyvsp[-2].exprs);
		  tmp->stat = (yyvsp[0].statement);
		  delete (yyvsp[-2].exprs);
		  (yyval.citem) = tmp;
		}
#line 5439 "parse.cc" /* yacc.c:1646  */
    break;

  case 66:
#line 745 "parse.y" /* yacc.c:1646  */
    { PCase::Item*tmp = new PCase::Item;
		  tmp->stat = (yyvsp[0].statement);
		  (yyval.citem) = tmp;
		}
#line 5448 "parse.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 750 "parse.y" /* yacc.c:1646  */
    { PCase::Item*tmp = new PCase::Item;
		  tmp->stat = (yyvsp[0].statement);
		  (yyval.citem) = tmp;
		}
#line 5457 "parse.cc" /* yacc.c:1646  */
    break;

  case 68:
#line 755 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-1]), "error: Incomprehensible case expression.");
		  yyerrok;
		}
#line 5465 "parse.cc" /* yacc.c:1646  */
    break;

  case 69:
#line 762 "parse.y" /* yacc.c:1646  */
    { svector<PCase::Item*>*tmp;
		  tmp = new svector<PCase::Item*>(*(yyvsp[-1].citems), (yyvsp[0].citem));
		  delete (yyvsp[-1].citems);
		  (yyval.citems) = tmp;
		}
#line 5475 "parse.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 768 "parse.y" /* yacc.c:1646  */
    { svector<PCase::Item*>*tmp = new svector<PCase::Item*>(1);
		  (*tmp)[0] = (yyvsp[0].citem);
		  (yyval.citems) = tmp;
		}
#line 5484 "parse.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 787 "parse.y" /* yacc.c:1646  */
    { pform_set_defparam(*(yyvsp[-2].pform_name), (yyvsp[0].expr));
		  delete (yyvsp[-2].pform_name);
		}
#line 5492 "parse.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 795 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-1]), "error: defparam may not include a range.");
		  delete (yyvsp[-1].exprs);
		}
#line 5500 "parse.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 803 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[0].expr);
		  (yyval.exprs) = tmp;
		}
#line 5509 "parse.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 808 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[-1].expr);
		  (yyval.exprs) = tmp;
		}
#line 5518 "parse.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 816 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[0].expr);
		  (yyval.exprs) = tmp;
		}
#line 5527 "parse.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 821 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[-1].expr);
		  (yyval.exprs) = tmp;
		}
#line 5536 "parse.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 826 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(2);
		  (*tmp)[0] = (yyvsp[-3].expr);
		  (*tmp)[1] = (yyvsp[-1].expr);
		  (yyval.exprs) = tmp;
		}
#line 5546 "parse.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 832 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(3);
		  (*tmp)[0] = (yyvsp[-5].expr);
		  (*tmp)[1] = (yyvsp[-3].expr);
		  (*tmp)[2] = (yyvsp[-1].expr);
		  (yyval.exprs) = tmp;
		}
#line 5557 "parse.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 841 "parse.y" /* yacc.c:1646  */
    { (yyval.exprs) = (yyvsp[0].exprs); }
#line 5563 "parse.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 842 "parse.y" /* yacc.c:1646  */
    { (yyval.exprs) = 0; }
#line 5569 "parse.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 847 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
	        (*tmp)[0] = (yyvsp[0].expr);
		(yyval.exprs) = tmp;
	      }
#line 5578 "parse.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 852 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(*(yyvsp[-2].exprs), (yyvsp[0].expr));
		delete (yyvsp[-2].exprs);
		(yyval.exprs) = tmp;
	      }
#line 5587 "parse.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 860 "parse.y" /* yacc.c:1646  */
    { PExpr*tmp = (yyvsp[0].expr);
		  (yyval.expr) = tmp;
		}
#line 5595 "parse.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 864 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = pform_select_mtm_expr((yyvsp[-4].expr), (yyvsp[-2].expr), (yyvsp[0].expr)); }
#line 5601 "parse.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 870 "parse.y" /* yacc.c:1646  */
    { verinum*tmp = (yyvsp[0].number);
		  if (tmp == 0) {
			yyerror((yylsp[0]), "internal error: delay.");
			(yyval.expr) = 0;
		  } else {
			(yyval.expr) = new PENumber(tmp);
			FILE_NAME((yyval.expr), (yylsp[0]));
		  }
		  based_size = 0;
		}
#line 5616 "parse.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 881 "parse.y" /* yacc.c:1646  */
    { verireal*tmp = (yyvsp[0].realtime);
		  if (tmp == 0) {
			yyerror((yylsp[0]), "internal error: delay.");
			(yyval.expr) = 0;
		  } else {
			(yyval.expr) = new PEFNumber(tmp);
			FILE_NAME((yyval.expr), (yylsp[0]));
		  }
		}
#line 5630 "parse.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 891 "parse.y" /* yacc.c:1646  */
    { PEIdent*tmp = new PEIdent(lex_strings.make((yyvsp[0].text)));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 5640 "parse.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 905 "parse.y" /* yacc.c:1646  */
    { perm_string tmp3 = lex_strings.make((yyvsp[-5].text));
	pform_set_type_attrib(tmp3, (yyvsp[-3].text), (yyvsp[-1].text));
	delete[] (yyvsp[-5].text);
	delete[] (yyvsp[-3].text);
      }
#line 5650 "parse.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 920 "parse.y" /* yacc.c:1646  */
    { pform_start_discipline((yyvsp[-1].text)); }
#line 5656 "parse.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 922 "parse.y" /* yacc.c:1646  */
    { pform_end_discipline((yylsp[-5])); delete[] (yyvsp[-4].text); }
#line 5662 "parse.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 932 "parse.y" /* yacc.c:1646  */
    { pform_discipline_domain((yylsp[-2]), IVL_DIS_DISCRETE); }
#line 5668 "parse.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 934 "parse.y" /* yacc.c:1646  */
    { pform_discipline_domain((yylsp[-2]), IVL_DIS_CONTINUOUS); }
#line 5674 "parse.cc" /* yacc.c:1646  */
    break;

  case 109:
#line 936 "parse.y" /* yacc.c:1646  */
    { pform_discipline_potential((yylsp[-2]), (yyvsp[-1].text)); delete[] (yyvsp[-1].text); }
#line 5680 "parse.cc" /* yacc.c:1646  */
    break;

  case 110:
#line 938 "parse.y" /* yacc.c:1646  */
    { pform_discipline_flow((yylsp[-2]), (yyvsp[-1].text)); delete[] (yyvsp[-1].text); }
#line 5686 "parse.cc" /* yacc.c:1646  */
    break;

  case 111:
#line 943 "parse.y" /* yacc.c:1646  */
    { pform_start_nature((yyvsp[-1].text)); }
#line 5692 "parse.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 946 "parse.y" /* yacc.c:1646  */
    { pform_end_nature((yylsp[-5])); delete[] (yyvsp[-4].text); }
#line 5698 "parse.cc" /* yacc.c:1646  */
    break;

  case 115:
#line 956 "parse.y" /* yacc.c:1646  */
    { delete[] (yyvsp[-1].text); }
#line 5704 "parse.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 959 "parse.y" /* yacc.c:1646  */
    { pform_nature_access((yylsp[-3]), (yyvsp[-1].text)); delete[] (yyvsp[-1].text); }
#line 5710 "parse.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 961 "parse.y" /* yacc.c:1646  */
    { delete[] (yyvsp[-1].text); }
#line 5716 "parse.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 963 "parse.y" /* yacc.c:1646  */
    { delete[] (yyvsp[-1].text); }
#line 5722 "parse.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 971 "parse.y" /* yacc.c:1646  */
    { cerr << (yylsp[-7]) << ": sorry: config declarations are not supported and "
                "will be skipped." << endl;
	delete[] (yyvsp[-6].text);
      }
#line 5731 "parse.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 991 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].pform_name); }
#line 5737 "parse.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 993 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-4].pform_name); }
#line 5743 "parse.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 1005 "parse.y" /* yacc.c:1646  */
    { delete[] (yyvsp[0].text); }
#line 5749 "parse.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 1007 "parse.y" /* yacc.c:1646  */
    { delete[] (yyvsp[-2].text); delete[] (yyvsp[0].text); }
#line 5755 "parse.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 1013 "parse.y" /* yacc.c:1646  */
    { delete[] (yyvsp[0].text); }
#line 5761 "parse.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 1018 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = (yyvsp[-3].drive).str0;
		  (yyval.drive).str1 = (yyvsp[-1].drive).str1;
		}
#line 5769 "parse.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 1022 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = (yyvsp[-1].drive).str0;
		  (yyval.drive).str1 = (yyvsp[-3].drive).str1;
		}
#line 5777 "parse.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 1026 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = (yyvsp[-3].drive).str0;
		  (yyval.drive).str1 = PGate::HIGHZ;
		}
#line 5785 "parse.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 1030 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = PGate::HIGHZ;
		  (yyval.drive).str1 = (yyvsp[-3].drive).str1;
		}
#line 5793 "parse.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 1034 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = (yyvsp[-1].drive).str0;
		  (yyval.drive).str1 = PGate::HIGHZ;
		}
#line 5801 "parse.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 1038 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = PGate::HIGHZ;
		  (yyval.drive).str1 = (yyvsp[-1].drive).str1;
		}
#line 5809 "parse.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 1044 "parse.y" /* yacc.c:1646  */
    { (yyval.drive) = (yyvsp[0].drive); }
#line 5815 "parse.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 1045 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = PGate::STRONG; (yyval.drive).str1 = PGate::STRONG; }
#line 5821 "parse.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 1049 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = PGate::SUPPLY; }
#line 5827 "parse.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 1050 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = PGate::STRONG; }
#line 5833 "parse.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 1051 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = PGate::PULL; }
#line 5839 "parse.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 1052 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str0 = PGate::WEAK; }
#line 5845 "parse.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 1056 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str1 = PGate::SUPPLY; }
#line 5851 "parse.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 1057 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str1 = PGate::STRONG; }
#line 5857 "parse.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 1058 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str1 = PGate::PULL; }
#line 5863 "parse.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 1059 "parse.y" /* yacc.c:1646  */
    { (yyval.drive).str1 = PGate::WEAK; }
#line 5869 "parse.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 1064 "parse.y" /* yacc.c:1646  */
    { PEIdent*tmpi = new PEIdent(*(yyvsp[0].pform_name));
		  PEEvent*tmpe = new PEEvent(PEEvent::ANYEDGE, tmpi);
		  PEventStatement*tmps = new PEventStatement(tmpe);
		  FILE_NAME(tmps, (yylsp[-1]));
		  (yyval.event_statement) = tmps;
		  delete (yyvsp[0].pform_name);
		}
#line 5881 "parse.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 1072 "parse.y" /* yacc.c:1646  */
    { PEventStatement*tmp = new PEventStatement(*(yyvsp[-1].event_expr));
		  FILE_NAME(tmp, (yylsp[-3]));
		  delete (yyvsp[-1].event_expr);
		  (yyval.event_statement) = tmp;
		}
#line 5891 "parse.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 1078 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-3]), "error: Malformed event control expression.");
		  (yyval.event_statement) = 0;
		}
#line 5899 "parse.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 1085 "parse.y" /* yacc.c:1646  */
    { (yyval.event_expr) = (yyvsp[0].event_expr); }
#line 5905 "parse.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 1087 "parse.y" /* yacc.c:1646  */
    { svector<PEEvent*>*tmp = new svector<PEEvent*>(*(yyvsp[-2].event_expr), *(yyvsp[0].event_expr));
		  delete (yyvsp[-2].event_expr);
		  delete (yyvsp[0].event_expr);
		  (yyval.event_expr) = tmp;
		}
#line 5915 "parse.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 1093 "parse.y" /* yacc.c:1646  */
    { svector<PEEvent*>*tmp = new svector<PEEvent*>(*(yyvsp[-2].event_expr), *(yyvsp[0].event_expr));
		  delete (yyvsp[-2].event_expr);
		  delete (yyvsp[0].event_expr);
		  (yyval.event_expr) = tmp;
		}
#line 5925 "parse.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 1102 "parse.y" /* yacc.c:1646  */
    { PEEvent*tmp = new PEEvent(PEEvent::POSEDGE, (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  svector<PEEvent*>*tl = new svector<PEEvent*>(1);
		  (*tl)[0] = tmp;
		  (yyval.event_expr) = tl;
		}
#line 5936 "parse.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 1109 "parse.y" /* yacc.c:1646  */
    { PEEvent*tmp = new PEEvent(PEEvent::NEGEDGE, (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  svector<PEEvent*>*tl = new svector<PEEvent*>(1);
		  (*tl)[0] = tmp;
		  (yyval.event_expr) = tl;
		}
#line 5947 "parse.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 1116 "parse.y" /* yacc.c:1646  */
    { PEEvent*tmp = new PEEvent(PEEvent::ANYEDGE, (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  svector<PEEvent*>*tl = new svector<PEEvent*>(1);
		  (*tl)[0] = tmp;
		  (yyval.event_expr) = tl;
		}
#line 5958 "parse.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 1130 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = pform_make_branch_probe_expression((yylsp[-5]), (yyvsp[-5].text), (yyvsp[-3].text), (yyvsp[-1].text)); }
#line 5964 "parse.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 1132 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = pform_make_branch_probe_expression((yylsp[-3]), (yyvsp[-3].text), (yyvsp[-1].text)); }
#line 5970 "parse.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 1137 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = (yyvsp[0].expr); }
#line 5976 "parse.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 1139 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = (yyvsp[0].expr); }
#line 5982 "parse.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 1141 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('-', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 5991 "parse.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 1146 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('~', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6000 "parse.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 1151 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('&', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6009 "parse.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 1156 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('!', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6018 "parse.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 1161 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('|', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6027 "parse.cc" /* yacc.c:1646  */
    break;

  case 170:
#line 1166 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('^', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6036 "parse.cc" /* yacc.c:1646  */
    break;

  case 171:
#line 1171 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: '~' '&'  is not a valid expression. "
			  "Please use operator '~&' instead.");
		  (yyval.expr) = 0;
		}
#line 6045 "parse.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 1176 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: '~' '|'  is not a valid expression. "
			  "Please use operator '~|' instead.");
		  (yyval.expr) = 0;
		}
#line 6054 "parse.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 1181 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: '~' '^'  is not a valid expression. "
			  "Please use operator '~^' instead.");
		  (yyval.expr) = 0;
		}
#line 6063 "parse.cc" /* yacc.c:1646  */
    break;

  case 174:
#line 1186 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('A', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6072 "parse.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 1191 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('N', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6081 "parse.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 1196 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('X', (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6090 "parse.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 1201 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-1]), "error: Operand of unary ! "
			  "is not a primary expression.");
		  (yyval.expr) = 0;
		}
#line 6099 "parse.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 1206 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-1]), "error: Operand of reduction ^ "
			  "is not a primary expression.");
		  (yyval.expr) = 0;
		}
#line 6108 "parse.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 1211 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('^', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6117 "parse.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 1216 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBPower('p', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6126 "parse.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 1221 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('*', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6135 "parse.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 1226 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('/', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6144 "parse.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 1231 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('%', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6153 "parse.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 1236 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('+', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6162 "parse.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 1241 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('-', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6171 "parse.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 1246 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('&', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6180 "parse.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 1251 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('|', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6189 "parse.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 1256 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('A', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6198 "parse.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 1261 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('O', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6207 "parse.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 1266 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('X', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6216 "parse.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 1271 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('<', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6225 "parse.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 1276 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('>', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6234 "parse.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 1281 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBShift('l', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6243 "parse.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 1286 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBShift('r', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6252 "parse.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 1291 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBShift('R', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6261 "parse.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 1296 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('e', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6270 "parse.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 1301 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('E', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6279 "parse.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 1306 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('L', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6288 "parse.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 1311 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('G', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6297 "parse.cc" /* yacc.c:1646  */
    break;

  case 200:
#line 1316 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('n', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6306 "parse.cc" /* yacc.c:1646  */
    break;

  case 201:
#line 1321 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBComp('N', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6315 "parse.cc" /* yacc.c:1646  */
    break;

  case 202:
#line 1326 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBLogic('o', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6324 "parse.cc" /* yacc.c:1646  */
    break;

  case 203:
#line 1331 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBLogic('a', (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.expr) = tmp;
		}
#line 6333 "parse.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 1336 "parse.y" /* yacc.c:1646  */
    { PETernary*tmp = new PETernary((yyvsp[-4].expr), (yyvsp[-2].expr), (yyvsp[0].expr));
		  FILE_NAME(tmp, (yylsp[-3]));
		  (yyval.expr) = tmp;
		}
#line 6342 "parse.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 1344 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = (yyvsp[0].expr); }
#line 6348 "parse.cc" /* yacc.c:1646  */
    break;

  case 206:
#line 1346 "parse.y" /* yacc.c:1646  */
    { switch (min_typ_max_flag) {
		      case MIN:
			(yyval.expr) = (yyvsp[-4].expr);
			delete (yyvsp[-2].expr);
			delete (yyvsp[0].expr);
			break;
		      case TYP:
			delete (yyvsp[-4].expr);
			(yyval.expr) = (yyvsp[-2].expr);
			delete (yyvsp[0].expr);
			break;
		      case MAX:
			delete (yyvsp[-4].expr);
			delete (yyvsp[-2].expr);
			(yyval.expr) = (yyvsp[0].expr);
			break;
		  }
		  if (min_typ_max_warn > 0) {
		        cerr << (yyval.expr)->get_fileline() << ": warning: choosing ";
		        switch (min_typ_max_flag) {
		            case MIN:
		              cerr << "min";
		              break;
		            case TYP:
		              cerr << "typ";
		              break;
		            case MAX:
		              cerr << "max";
		              break;
		        }
		        cerr << " expression." << endl;
		        min_typ_max_warn -= 1;
		  }
		}
#line 6387 "parse.cc" /* yacc.c:1646  */
    break;

  case 207:
#line 1393 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(*(yyvsp[-2].exprs), (yyvsp[0].expr));
		  delete (yyvsp[-2].exprs);
		  (yyval.exprs) = tmp;
		}
#line 6396 "parse.cc" /* yacc.c:1646  */
    break;

  case 208:
#line 1398 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[0].expr);
		  (yyval.exprs) = tmp;
		}
#line 6405 "parse.cc" /* yacc.c:1646  */
    break;

  case 209:
#line 1403 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = 0;
		  (yyval.exprs) = tmp;
		}
#line 6414 "parse.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 1409 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(*(yyvsp[-1].exprs), 0);
		  delete (yyvsp[-1].exprs);
		  (yyval.exprs) = tmp;
		}
#line 6423 "parse.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 1417 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(*(yyvsp[-2].exprs), (yyvsp[0].expr));
		  delete (yyvsp[-2].exprs);
		  (yyval.exprs) = tmp;
		}
#line 6432 "parse.cc" /* yacc.c:1646  */
    break;

  case 212:
#line 1422 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[0].expr);
		  (yyval.exprs) = tmp;
		}
#line 6441 "parse.cc" /* yacc.c:1646  */
    break;

  case 213:
#line 1430 "parse.y" /* yacc.c:1646  */
    { assert((yyvsp[0].number));
		  PENumber*tmp = new PENumber((yyvsp[0].number));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6451 "parse.cc" /* yacc.c:1646  */
    break;

  case 214:
#line 1436 "parse.y" /* yacc.c:1646  */
    { PEFNumber*tmp = new PEFNumber((yyvsp[0].realtime));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6460 "parse.cc" /* yacc.c:1646  */
    break;

  case 215:
#line 1441 "parse.y" /* yacc.c:1646  */
    { PEString*tmp = new PEString((yyvsp[0].text));
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		}
#line 6469 "parse.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 1446 "parse.y" /* yacc.c:1646  */
    { perm_string tn = lex_strings.make((yyvsp[0].text));
		  PECallFunction*tmp = new PECallFunction(tn);
		  FILE_NAME(tmp, (yylsp[0]));
		  (yyval.expr) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 6480 "parse.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 1457 "parse.y" /* yacc.c:1646  */
    { PEIdent*tmp = new PEIdent(*(yyvsp[0].pform_name));
	  FILE_NAME(tmp, (yylsp[0]));
	  (yyval.expr) = tmp;
	  delete (yyvsp[0].pform_name);
	}
#line 6490 "parse.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 1468 "parse.y" /* yacc.c:1646  */
    { PECallFunction*tmp = new PECallFunction(*(yyvsp[-3].pform_name), *(yyvsp[-1].exprs));
	FILE_NAME(tmp, (yylsp[-3]));
	delete (yyvsp[-3].pform_name);
	(yyval.expr) = tmp;
      }
#line 6500 "parse.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 1474 "parse.y" /* yacc.c:1646  */
    { perm_string tn = lex_strings.make((yyvsp[-3].text));
	PECallFunction*tmp = new PECallFunction(tn, *(yyvsp[-1].exprs));
	FILE_NAME(tmp, (yylsp[-3]));
	delete[](yyvsp[-3].text);
	(yyval.expr) = tmp;
      }
#line 6511 "parse.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 1481 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: function calls must have at least one "
			  "input argument.");
		  yyerrok;
      }
#line 6520 "parse.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 1486 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: system function calls must have at least one "
			  "input argument.");
		  yyerrok;
      }
#line 6529 "parse.cc" /* yacc.c:1646  */
    break;

  case 222:
#line 1495 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$acos");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6539 "parse.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 1502 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$acosh");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6549 "parse.cc" /* yacc.c:1646  */
    break;

  case 224:
#line 1509 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$asin");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6559 "parse.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 1516 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$asinh");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6569 "parse.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 1523 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$atan");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6579 "parse.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 1530 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$atanh");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6589 "parse.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 1537 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$atan2");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-3].expr), (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-5]));
	(yyval.expr) = tmp;
      }
#line 6599 "parse.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 1544 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$ceil");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6609 "parse.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 1551 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$cos");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6619 "parse.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 1558 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$cosh");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6629 "parse.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 1565 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$exp");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6639 "parse.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 1572 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$floor");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6649 "parse.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 1579 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$hypot");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-3].expr), (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-5]));
	(yyval.expr) = tmp;
      }
#line 6659 "parse.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 1586 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$ln");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6669 "parse.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 1593 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$log10");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6679 "parse.cc" /* yacc.c:1646  */
    break;

  case 237:
#line 1600 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$pow");
        PECallFunction*tmp = make_call_function(tn, (yyvsp[-3].expr), (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-5]));
	(yyval.expr) = tmp;
      }
#line 6689 "parse.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 1607 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$sin");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6699 "parse.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 1614 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$sinh");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6709 "parse.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 1621 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$sqrt");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6719 "parse.cc" /* yacc.c:1646  */
    break;

  case 241:
#line 1628 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$tan");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6729 "parse.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 1635 "parse.y" /* yacc.c:1646  */
    { perm_string tn = perm_string::literal("$tanh");
	PECallFunction*tmp = make_call_function(tn, (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6739 "parse.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 1646 "parse.y" /* yacc.c:1646  */
    { PEUnary*tmp = new PEUnary('m', (yyvsp[-1].expr));
        FILE_NAME(tmp,(yylsp[-3]));
	(yyval.expr) = tmp;
      }
#line 6748 "parse.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 1652 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('M', (yyvsp[-3].expr), (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-5]));
	(yyval.expr) = tmp;
      }
#line 6757 "parse.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 1658 "parse.y" /* yacc.c:1646  */
    { PEBinary*tmp = new PEBinary('m', (yyvsp[-3].expr), (yyvsp[-1].expr));
	FILE_NAME(tmp,(yylsp[-5]));
	(yyval.expr) = tmp;
      }
#line 6766 "parse.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 1666 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = (yyvsp[-1].expr); }
#line 6772 "parse.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 1671 "parse.y" /* yacc.c:1646  */
    { PEConcat*tmp = new PEConcat(*(yyvsp[-1].exprs));
		  FILE_NAME(tmp, (yylsp[-2]));
		  delete (yyvsp[-1].exprs);
		  (yyval.expr) = tmp;
		}
#line 6782 "parse.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 1677 "parse.y" /* yacc.c:1646  */
    { PExpr*rep = (yyvsp[-4].expr);
		  PEConcat*tmp = new PEConcat(*(yyvsp[-2].exprs), rep);
		  FILE_NAME(tmp, (yylsp[-5]));
		  delete (yyvsp[-2].exprs);
		  (yyval.expr) = tmp;
		}
#line 6793 "parse.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 1684 "parse.y" /* yacc.c:1646  */
    { PExpr*rep = (yyvsp[-5].expr);
		  PEConcat*tmp = new PEConcat(*(yyvsp[-3].exprs), rep);
		  FILE_NAME(tmp, (yylsp[-6]));
		  delete (yyvsp[-3].exprs);
		  (yyval.expr) = tmp;
		  yyerror((yylsp[-2]), "error: Syntax error between internal '}' "
			  "and closing '}' of repeat concatenation.");
		  yyerrok;
		}
#line 6807 "parse.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 1700 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = (yyvsp[0].wires); }
#line 6813 "parse.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 1702 "parse.y" /* yacc.c:1646  */
    { if ((yyvsp[-1].wires) && (yyvsp[0].wires)) {
		        svector<PWire*>*tmp = new svector<PWire*>(*(yyvsp[-1].wires), *(yyvsp[0].wires));
			delete (yyvsp[-1].wires);
			delete (yyvsp[0].wires);
			(yyval.wires) = tmp;
		  } else if ((yyvsp[-1].wires)) {
			(yyval.wires) = (yyvsp[-1].wires);
		  } else {
			(yyval.wires) = (yyvsp[0].wires);
		  }
		}
#line 6829 "parse.cc" /* yacc.c:1646  */
    break;

  case 252:
#line 1717 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = (yyvsp[0].wires); }
#line 6835 "parse.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 1719 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = 0; }
#line 6841 "parse.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 1726 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  tmp->name = (yyvsp[-3].text);
		  tmp->parms = (yyvsp[-1].exprs);
		  tmp->file  = (yylsp[-3]).text;
		  tmp->lineno = (yylsp[-3]).first_line;
		  delete[](yyvsp[-3].text);
		  (yyval.gate) = tmp;
		}
#line 6854 "parse.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 1736 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  svector<PExpr*>*rng = (yyvsp[-3].exprs);
		  tmp->name = (yyvsp[-4].text);
		  tmp->parms = (yyvsp[-1].exprs);
		  tmp->range[0] = (*rng)[0];
		  tmp->range[1] = (*rng)[1];
		  tmp->file  = (yylsp[-4]).text;
		  tmp->lineno = (yylsp[-4]).first_line;
		  delete[](yyvsp[-4].text);
		  delete rng;
		  (yyval.gate) = tmp;
		}
#line 6871 "parse.cc" /* yacc.c:1646  */
    break;

  case 256:
#line 1749 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  tmp->name = "";
		  tmp->parms = (yyvsp[-1].exprs);
		  tmp->file  = (yylsp[-2]).text;
		  tmp->lineno = (yylsp[-2]).first_line;
		  (yyval.gate) = tmp;
		}
#line 6883 "parse.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 1760 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  svector<PExpr*>*rng = (yyvsp[0].exprs);
		  tmp->name = (yyvsp[-1].text);
		  tmp->parms = 0;
		  tmp->parms_by_name = 0;
		  tmp->range[0] = (*rng)[0];
		  tmp->range[1] = (*rng)[1];
		  tmp->file  = (yylsp[-1]).text;
		  tmp->lineno = (yylsp[-1]).first_line;
		  delete[](yyvsp[-1].text);
		  delete rng;
		  (yyval.gate) = tmp;
		}
#line 6901 "parse.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 1777 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  tmp->name = (yyvsp[-3].text);
		  tmp->parms = 0;
		  tmp->parms_by_name = (yyvsp[-1].named_pexprs);
		  tmp->file  = (yylsp[-3]).text;
		  tmp->lineno = (yylsp[-3]).first_line;
		  delete[](yyvsp[-3].text);
		  (yyval.gate) = tmp;
		}
#line 6915 "parse.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 1788 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  svector<PExpr*>*rng = (yyvsp[-3].exprs);
		  tmp->name = (yyvsp[-4].text);
		  tmp->parms = 0;
		  tmp->parms_by_name = (yyvsp[-1].named_pexprs);
		  tmp->range[0] = (*rng)[0];
		  tmp->range[1] = (*rng)[1];
		  tmp->file  = (yylsp[-4]).text;
		  tmp->lineno = (yylsp[-4]).first_line;
		  delete[](yyvsp[-4].text);
		  delete rng;
		  (yyval.gate) = tmp;
		}
#line 6933 "parse.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 1803 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  tmp->name = (yyvsp[-3].text);
		  tmp->parms = 0;
		  tmp->parms_by_name = 0;
		  tmp->file  = (yylsp[-3]).text;
		  tmp->lineno = (yylsp[-3]).first_line;
		  yyerror((yylsp[-2]), "error: Syntax error in instance port "
			  "expression(s).");
		  delete[](yyvsp[-3].text);
		  (yyval.gate) = tmp;
		}
#line 6949 "parse.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 1816 "parse.y" /* yacc.c:1646  */
    { lgate*tmp = new lgate;
		  tmp->name = (yyvsp[-4].text);
		  tmp->parms = 0;
		  tmp->parms_by_name = 0;
		  tmp->file  = (yylsp[-4]).text;
		  tmp->lineno = (yylsp[-4]).first_line;
		  yyerror((yylsp[-2]), "error: Syntax error in instance port "
			  "expression(s).");
		  delete[](yyvsp[-4].text);
		  (yyval.gate) = tmp;
		}
#line 6965 "parse.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 1831 "parse.y" /* yacc.c:1646  */
    { svector<lgate>*tmp1 = (yyvsp[-2].gates);
		  lgate*tmp2 = (yyvsp[0].gate);
		  svector<lgate>*out = new svector<lgate> (*tmp1, *tmp2);
		  delete tmp1;
		  delete tmp2;
		  (yyval.gates) = out;
		}
#line 6977 "parse.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 1839 "parse.y" /* yacc.c:1646  */
    { svector<lgate>*tmp = new svector<lgate>(1);
		  (*tmp)[0] = *(yyvsp[0].gate);
		  delete (yyvsp[0].gate);
		  (yyval.gates) = tmp;
		}
#line 6987 "parse.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 1847 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::AND; }
#line 6993 "parse.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 1848 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::NAND; }
#line 6999 "parse.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 1849 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::OR; }
#line 7005 "parse.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 1850 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::NOR; }
#line 7011 "parse.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 1851 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::XOR; }
#line 7017 "parse.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 1852 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::XNOR; }
#line 7023 "parse.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 1853 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::BUF; }
#line 7029 "parse.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 1854 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::BUFIF0; }
#line 7035 "parse.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 1855 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::BUFIF1; }
#line 7041 "parse.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 1856 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::NOT; }
#line 7047 "parse.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 1857 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::NOTIF0; }
#line 7053 "parse.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 1858 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::NOTIF1; }
#line 7059 "parse.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 1862 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::NMOS; }
#line 7065 "parse.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 1863 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::RNMOS; }
#line 7071 "parse.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 1864 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::PMOS; }
#line 7077 "parse.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 1865 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::RPMOS; }
#line 7083 "parse.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 1866 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::CMOS; }
#line 7089 "parse.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 1867 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::RCMOS; }
#line 7095 "parse.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 1868 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::TRAN; }
#line 7101 "parse.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 1869 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::RTRAN; }
#line 7107 "parse.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 1870 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::TRANIF0; }
#line 7113 "parse.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 1871 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::TRANIF1; }
#line 7119 "parse.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 1872 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::RTRANIF0; }
#line 7125 "parse.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 1873 "parse.y" /* yacc.c:1646  */
    { (yyval.gatetype) = PGBuiltin::RTRANIF1; }
#line 7131 "parse.cc" /* yacc.c:1646  */
    break;

  case 288:
#line 1884 "parse.y" /* yacc.c:1646  */
    { (yyval.pform_name) = new pform_name_t;
	  (yyval.pform_name)->push_back(name_component_t(lex_strings.make((yyvsp[0].text))));
	  delete[](yyvsp[0].text);
	}
#line 7140 "parse.cc" /* yacc.c:1646  */
    break;

  case 289:
#line 1889 "parse.y" /* yacc.c:1646  */
    { pform_name_t * tmp = (yyvsp[-2].pform_name);
	  tmp->push_back(name_component_t(lex_strings.make((yyvsp[0].text))));
	  delete[](yyvsp[0].text);
	  (yyval.pform_name) = tmp;
	}
#line 7150 "parse.cc" /* yacc.c:1646  */
    break;

  case 290:
#line 1895 "parse.y" /* yacc.c:1646  */
    { pform_name_t * tmp = (yyvsp[-3].pform_name);
	  name_component_t&tail = tmp->back();
	  index_component_t itmp;
	  itmp.sel = index_component_t::SEL_BIT;
	  itmp.msb = (yyvsp[-1].expr);
	  tail.index.push_back(itmp);
	  (yyval.pform_name) = tmp;
	}
#line 7163 "parse.cc" /* yacc.c:1646  */
    break;

  case 291:
#line 1904 "parse.y" /* yacc.c:1646  */
    { pform_name_t * tmp = (yyvsp[-5].pform_name);
	  name_component_t&tail = tmp->back();
	  index_component_t itmp;
	  itmp.sel = index_component_t::SEL_PART;
	  itmp.msb = (yyvsp[-3].expr);
	  itmp.lsb = (yyvsp[-1].expr);
	  tail.index.push_back(itmp);
	  (yyval.pform_name) = tmp;
	}
#line 7177 "parse.cc" /* yacc.c:1646  */
    break;

  case 292:
#line 1914 "parse.y" /* yacc.c:1646  */
    { pform_name_t * tmp = (yyvsp[-5].pform_name);
	  name_component_t&tail = tmp->back();
	  index_component_t itmp;
	  itmp.sel = index_component_t::SEL_IDX_UP;
	  itmp.msb = (yyvsp[-3].expr);
	  itmp.lsb = (yyvsp[-1].expr);
	  tail.index.push_back(itmp);
	  (yyval.pform_name) = tmp;
	}
#line 7191 "parse.cc" /* yacc.c:1646  */
    break;

  case 293:
#line 1924 "parse.y" /* yacc.c:1646  */
    { pform_name_t * tmp = (yyvsp[-5].pform_name);
	  name_component_t&tail = tmp->back();
	  index_component_t itmp;
	  itmp.sel = index_component_t::SEL_IDX_DO;
	  itmp.msb = (yyvsp[-3].expr);
	  itmp.lsb = (yyvsp[-1].expr);
	  tail.index.push_back(itmp);
	  (yyval.pform_name) = tmp;
	}
#line 7205 "parse.cc" /* yacc.c:1646  */
    break;

  case 294:
#line 1940 "parse.y" /* yacc.c:1646  */
    { (yyval.perm_strings) = list_from_identifier((yyvsp[0].text)); }
#line 7211 "parse.cc" /* yacc.c:1646  */
    break;

  case 295:
#line 1942 "parse.y" /* yacc.c:1646  */
    { (yyval.perm_strings) = list_from_identifier((yyvsp[-2].perm_strings), (yyvsp[0].text)); }
#line 7217 "parse.cc" /* yacc.c:1646  */
    break;

  case 296:
#line 1947 "parse.y" /* yacc.c:1646  */
    { (yyval.port_list) = make_port_list((yyvsp[0].text), 0); }
#line 7223 "parse.cc" /* yacc.c:1646  */
    break;

  case 297:
#line 1949 "parse.y" /* yacc.c:1646  */
    { (yyval.port_list) = make_port_list((yyvsp[-2].text), (yyvsp[0].expr)); }
#line 7229 "parse.cc" /* yacc.c:1646  */
    break;

  case 298:
#line 1951 "parse.y" /* yacc.c:1646  */
    { (yyval.port_list) = make_port_list((yyvsp[-2].port_list), (yyvsp[0].text), 0); }
#line 7235 "parse.cc" /* yacc.c:1646  */
    break;

  case 299:
#line 1953 "parse.y" /* yacc.c:1646  */
    { (yyval.port_list) = make_port_list((yyvsp[-4].port_list), (yyvsp[-2].text), (yyvsp[0].expr)); }
#line 7241 "parse.cc" /* yacc.c:1646  */
    break;

  case 300:
#line 1975 "parse.y" /* yacc.c:1646  */
    { vector<Module::port_t*>*tmp
			  = new vector<Module::port_t*>(1);
		  (*tmp)[0] = (yyvsp[0].mport);
		  (yyval.mports) = tmp;
		}
#line 7251 "parse.cc" /* yacc.c:1646  */
    break;

  case 301:
#line 1981 "parse.y" /* yacc.c:1646  */
    { vector<Module::port_t*>*tmp = (yyvsp[-2].mports);
		  tmp->push_back((yyvsp[0].mport));
		  (yyval.mports) = tmp;
		}
#line 7260 "parse.cc" /* yacc.c:1646  */
    break;

  case 302:
#line 1989 "parse.y" /* yacc.c:1646  */
    { vector<Module::port_t*>*tmp
			  = new vector<Module::port_t*>(1);
		  (*tmp)[0] = (yyvsp[0].mport);
		  (yyval.mports) = tmp;
		}
#line 7270 "parse.cc" /* yacc.c:1646  */
    break;

  case 303:
#line 1995 "parse.y" /* yacc.c:1646  */
    { vector<Module::port_t*>*tmp = (yyvsp[-2].mports);
		  tmp->push_back((yyvsp[0].mport));
		  (yyval.mports) = tmp;
		}
#line 7279 "parse.cc" /* yacc.c:1646  */
    break;

  case 304:
#line 2000 "parse.y" /* yacc.c:1646  */
    { Module::port_t*ptmp;
		  perm_string name = lex_strings.make((yyvsp[0].text));
		  ptmp = pform_module_port_reference(name, (yylsp[0]).text,
						     (yylsp[0]).first_line);
		  vector<Module::port_t*>*tmp = (yyvsp[-2].mports);
		  tmp->push_back(ptmp);

		    /* Get the port declaration details, the port type
		       and what not, from context data stored by the
		       last port_declaration rule. */
		  pform_module_define_port((yylsp[0]), name,
					port_declaration_context.port_type,
					port_declaration_context.port_net_type,
                    port_declaration_context.sectype,
					port_declaration_context.sign_flag,
					port_declaration_context.range, 0);
		  delete[](yyvsp[0].text);
		  (yyval.mports) = tmp;
		}
#line 7303 "parse.cc" /* yacc.c:1646  */
    break;

  case 305:
#line 2020 "parse.y" /* yacc.c:1646  */
    {
		  yyerror((yylsp[0]), "error: NULL port declarations are not "
		              "allowed.");
		}
#line 7312 "parse.cc" /* yacc.c:1646  */
    break;

  case 306:
#line 2025 "parse.y" /* yacc.c:1646  */
    {
		  yyerror((yylsp[0]), "error: ';' is an invalid port declaration "
		              "separator.");
		}
#line 7321 "parse.cc" /* yacc.c:1646  */
    break;

  case 307:
#line 2035 "parse.y" /* yacc.c:1646  */
    { Module::port_t*ptmp;
	perm_string name = lex_strings.make((yyvsp[0].text));
	ptmp = pform_module_port_reference(name, (yylsp[-5]).text,
					   (yylsp[-5]).first_line);
	pform_module_define_port((yylsp[-5]), name, NetNet::PINPUT,
				 (yyvsp[-4].nettype), (yyvsp[-1].sectype), (yyvsp[-3].flag), (yyvsp[-2].exprs), (yyvsp[-6].named_pexprs));
	port_declaration_context.port_type = NetNet::PINPUT;
	port_declaration_context.port_net_type = (yyvsp[-4].nettype);
    port_declaration_context.sectype = (yyvsp[-1].sectype);
	port_declaration_context.sign_flag = (yyvsp[-3].flag);
	delete port_declaration_context.range;
	port_declaration_context.range = (yyvsp[-2].exprs);
	delete (yyvsp[-6].named_pexprs);
	delete[](yyvsp[0].text);
	(yyval.mport) = ptmp;
      }
#line 7342 "parse.cc" /* yacc.c:1646  */
    break;

  case 308:
#line 2054 "parse.y" /* yacc.c:1646  */
    { Module::port_t*ptmp;
	perm_string name = lex_strings.make((yyvsp[0].text));
	ptmp = pform_module_port_reference(name, (yylsp[-5]).text,
					   (yylsp[-5]).first_line);
	pform_module_define_port((yylsp[-5]), name, NetNet::PINOUT,
				 (yyvsp[-4].nettype), (yyvsp[-1].sectype), (yyvsp[-3].flag), (yyvsp[-2].exprs), (yyvsp[-6].named_pexprs));
	port_declaration_context.port_type = NetNet::PINOUT;
	port_declaration_context.port_net_type = (yyvsp[-4].nettype);
	port_declaration_context.sectype = (yyvsp[-1].sectype);
	port_declaration_context.sign_flag = (yyvsp[-3].flag);
	delete port_declaration_context.range;
	port_declaration_context.range = (yyvsp[-2].exprs);
	delete (yyvsp[-6].named_pexprs);
	delete[](yyvsp[0].text);
	(yyval.mport) = ptmp;
      }
#line 7363 "parse.cc" /* yacc.c:1646  */
    break;

  case 309:
#line 2073 "parse.y" /* yacc.c:1646  */
    { Module::port_t*ptmp;
	perm_string name = lex_strings.make((yyvsp[0].text));
	ptmp = pform_module_port_reference(name, (yylsp[-5]).text,
					   (yylsp[-5]).first_line);
	pform_module_define_port((yylsp[-5]), name, NetNet::POUTPUT,
				 (yyvsp[-4].nettype), (yyvsp[-1].sectype), (yyvsp[-3].flag), (yyvsp[-2].exprs), (yyvsp[-6].named_pexprs));
	port_declaration_context.port_type = NetNet::POUTPUT;
	port_declaration_context.port_net_type = (yyvsp[-4].nettype);
	port_declaration_context.sectype = (yyvsp[-1].sectype);
	port_declaration_context.sign_flag = (yyvsp[-3].flag);
	delete port_declaration_context.range;
	port_declaration_context.range = (yyvsp[-2].exprs);
	delete (yyvsp[-6].named_pexprs);
	delete[](yyvsp[0].text);
	(yyval.mport) = ptmp;
      }
#line 7384 "parse.cc" /* yacc.c:1646  */
    break;

  case 310:
#line 2092 "parse.y" /* yacc.c:1646  */
    { Module::port_t*ptmp;
	perm_string name = lex_strings.make((yyvsp[0].text));
	ptmp = pform_module_port_reference(name, (yylsp[-5]).text,
					   (yylsp[-5]).first_line);
	pform_module_define_port((yylsp[-5]), name, NetNet::POUTPUT,
				 (yyvsp[-4].nettype), (yyvsp[-1].sectype), (yyvsp[-3].flag), (yyvsp[-2].exprs), (yyvsp[-6].named_pexprs));
	port_declaration_context.port_type = NetNet::POUTPUT;
	port_declaration_context.port_net_type = (yyvsp[-4].nettype);
	port_declaration_context.sectype = (yyvsp[-1].sectype);
	port_declaration_context.sign_flag = (yyvsp[-3].flag);
	delete port_declaration_context.range;
	port_declaration_context.range = (yyvsp[-2].exprs);
	delete (yyvsp[-6].named_pexprs);
	delete[](yyvsp[0].text);
	(yyval.mport) = ptmp;
      }
#line 7405 "parse.cc" /* yacc.c:1646  */
    break;

  case 311:
#line 2111 "parse.y" /* yacc.c:1646  */
    { Module::port_t*ptmp;
	perm_string name = lex_strings.make((yyvsp[-2].text));
	ptmp = pform_module_port_reference(name, (yylsp[-7]).text,
					   (yylsp[-7]).first_line);
	pform_module_define_port((yylsp[-7]), name, NetNet::POUTPUT,
				 (yyvsp[-6].nettype), (yyvsp[-3].sectype), (yyvsp[-5].flag), (yyvsp[-4].exprs), (yyvsp[-8].named_pexprs));
	port_declaration_context.port_type = NetNet::POUTPUT;
	port_declaration_context.port_net_type = (yyvsp[-6].nettype);
	port_declaration_context.sectype = (yyvsp[-3].sectype);
	port_declaration_context.sign_flag = (yyvsp[-5].flag);
	delete port_declaration_context.range;
	port_declaration_context.range = (yyvsp[-4].exprs);

	pform_make_reginit((yylsp[-2]), name, (yyvsp[0].expr));

	delete (yyvsp[-8].named_pexprs);
	delete[](yyvsp[-2].text);
	(yyval.mport) = ptmp;
      }
#line 7429 "parse.cc" /* yacc.c:1646  */
    break;

  case 312:
#line 2135 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = (yyvsp[0].nettype); }
#line 7435 "parse.cc" /* yacc.c:1646  */
    break;

  case 313:
#line 2136 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::IMPLICIT; }
#line 7441 "parse.cc" /* yacc.c:1646  */
    break;

  case 314:
#line 2139 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = true; }
#line 7447 "parse.cc" /* yacc.c:1646  */
    break;

  case 315:
#line 2139 "parse.y" /* yacc.c:1646  */
    {(yyval.flag) = false; }
#line 7453 "parse.cc" /* yacc.c:1646  */
    break;

  case 316:
#line 2147 "parse.y" /* yacc.c:1646  */
    { PEIdent*tmp = new PEIdent(*(yyvsp[0].pform_name));
	  FILE_NAME(tmp, (yylsp[0]));
	  (yyval.expr) = tmp;
	  delete (yyvsp[0].pform_name);
	}
#line 7463 "parse.cc" /* yacc.c:1646  */
    break;

  case 317:
#line 2153 "parse.y" /* yacc.c:1646  */
    { PEConcat*tmp = new PEConcat(*(yyvsp[-1].exprs));
	  FILE_NAME(tmp, (yylsp[-2]));
	  delete (yyvsp[-1].exprs);
	  (yyval.expr) = tmp;
	}
#line 7473 "parse.cc" /* yacc.c:1646  */
    break;

  case 318:
#line 2165 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(2);
		  (*tmp)[0] = (yyvsp[-2].expr);
		  (*tmp)[1] = (yyvsp[0].expr);
		  (yyval.exprs) = tmp;
		}
#line 7483 "parse.cc" /* yacc.c:1646  */
    break;

  case 319:
#line 2174 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(*(yyvsp[-2].exprs), *(yyvsp[0].exprs));
		  delete (yyvsp[-2].exprs);
		  delete (yyvsp[0].exprs);
		  (yyval.exprs) = tmp;
		}
#line 7493 "parse.cc" /* yacc.c:1646  */
    break;

  case 320:
#line 2180 "parse.y" /* yacc.c:1646  */
    { (yyval.exprs) = (yyvsp[0].exprs); }
#line 7499 "parse.cc" /* yacc.c:1646  */
    break;

  case 321:
#line 2189 "parse.y" /* yacc.c:1646  */
    { pform_startmodule((yyvsp[0].text), (yylsp[-1]).text, (yylsp[-1]).first_line, (yyvsp[-2].named_pexprs)); }
#line 7505 "parse.cc" /* yacc.c:1646  */
    break;

  case 322:
#line 2193 "parse.y" /* yacc.c:1646  */
    { pform_module_set_ports((yyvsp[-2].mports)); }
#line 7511 "parse.cc" /* yacc.c:1646  */
    break;

  case 323:
#line 2196 "parse.y" /* yacc.c:1646  */
    { Module::UCDriveType ucd;
		  switch (uc_drive) {
		      case UCD_NONE:
		      default:
			ucd = Module::UCD_NONE;
			break;
		      case UCD_PULL0:
			ucd = Module::UCD_PULL0;
			break;
		      case UCD_PULL1:
			ucd = Module::UCD_PULL1;
			break;
		  }
		  pform_endmodule((yyvsp[-8].text), in_celldefine, ucd);
		  delete[](yyvsp[-8].text);
		}
#line 7532 "parse.cc" /* yacc.c:1646  */
    break;

  case 326:
#line 2218 "parse.y" /* yacc.c:1646  */
    { (yyval.mports) = 0; }
#line 7538 "parse.cc" /* yacc.c:1646  */
    break;

  case 327:
#line 2219 "parse.y" /* yacc.c:1646  */
    { (yyval.mports) = 0; }
#line 7544 "parse.cc" /* yacc.c:1646  */
    break;

  case 328:
#line 2223 "parse.y" /* yacc.c:1646  */
    { (yyval.mports) = (yyvsp[-1].mports); }
#line 7550 "parse.cc" /* yacc.c:1646  */
    break;

  case 329:
#line 2224 "parse.y" /* yacc.c:1646  */
    { (yyval.mports) = (yyvsp[-1].mports); }
#line 7556 "parse.cc" /* yacc.c:1646  */
    break;

  case 330:
#line 2225 "parse.y" /* yacc.c:1646  */
    { (yyval.mports) = 0; }
#line 7562 "parse.cc" /* yacc.c:1646  */
    break;

  case 336:
#line 2255 "parse.y" /* yacc.c:1646  */
    { ivl_variable_type_t dtype = (yyvsp[-6].datatype);
		  if (dtype == IVL_VT_NO_TYPE)
		      dtype = IVL_VT_LOGIC;
          if ((yyvsp[-4].exprs)!=0) {
             (yyvsp[-2].sectype)->set_range((*(yyvsp[-4].exprs))[1],(*(yyvsp[-4].exprs))[0]);
          }
		  pform_makewire((yylsp[-7]), (yyvsp[-4].exprs), (yyvsp[-5].flag), (yyvsp[-1].perm_strings), (yyvsp[-7].nettype),
            NetNet::NOT_A_PORT, dtype, (yyvsp[-2].sectype), (yyvsp[-8].named_pexprs));
		  if ((yyvsp[-3].exprs) != 0) {
			    yyerror((yylsp[-3]), "sorry: net delays not supported.");
			    delete (yyvsp[-3].exprs);
		  }
		  if ((yyvsp[-8].named_pexprs)) delete (yyvsp[-8].named_pexprs);
		}
#line 7581 "parse.cc" /* yacc.c:1646  */
    break;

  case 337:
#line 2279 "parse.y" /* yacc.c:1646  */
    { ivl_variable_type_t dtype = (yyvsp[-6].datatype);
		  if (dtype == IVL_VT_NO_TYPE)
			dtype = IVL_VT_LOGIC;
		  pform_makewire((yylsp[-7]), (yyvsp[-4].exprs), (yyvsp[-5].flag), (yyvsp[-3].exprs),
				 str_strength, (yyvsp[-1].net_decl_assign), (yyvsp[-7].nettype), dtype, (yyvsp[-2].sectype));
		  if ((yyvsp[-8].named_pexprs)) {
			yyerror((yylsp[-7]), "sorry: Attributes not supported "
				"on net declaration assignments.");
			delete (yyvsp[-8].named_pexprs);
		  }
		}
#line 7597 "parse.cc" /* yacc.c:1646  */
    break;

  case 338:
#line 2298 "parse.y" /* yacc.c:1646  */
    { ivl_variable_type_t dtype = (yyvsp[-5].datatype);
		  if (dtype == IVL_VT_NO_TYPE)
			dtype = IVL_VT_LOGIC;
		  pform_makewire((yylsp[-6]), 0, (yyvsp[-4].flag), 0, (yyvsp[-3].drive), (yyvsp[-1].net_decl_assign), (yyvsp[-6].nettype), dtype, (yyvsp[-2].sectype));
		  if ((yyvsp[-7].named_pexprs)) {
			yyerror((yylsp[-6]), "sorry: Attributes not supported "
				"on net declaration assignments.");
			delete (yyvsp[-7].named_pexprs);
		  }
		}
#line 7612 "parse.cc" /* yacc.c:1646  */
    break;

  case 339:
#line 2311 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-6]), "sorry: trireg nets not supported.");
		  delete (yyvsp[-4].exprs);
		  delete (yyvsp[-3].exprs);
		}
#line 7621 "parse.cc" /* yacc.c:1646  */
    break;

  case 340:
#line 2318 "parse.y" /* yacc.c:1646  */
    { pform_set_port_type((yylsp[-6]), (yyvsp[-1].perm_strings), (yyvsp[-4].exprs), (yyvsp[-5].flag), (yyvsp[-6].porttype), (yyvsp[-2].sectype));
		}
#line 7628 "parse.cc" /* yacc.c:1646  */
    break;

  case 341:
#line 2327 "parse.y" /* yacc.c:1646  */
    { pform_makewire((yylsp[-6]), (yyvsp[-3].exprs), (yyvsp[-4].flag), (yyvsp[-1].perm_strings), (yyvsp[-5].nettype), (yyvsp[-6].porttype), IVL_VT_NO_TYPE, (yyvsp[-2].sectype), 0,
		                 SR_BOTH);
		}
#line 7636 "parse.cc" /* yacc.c:1646  */
    break;

  case 342:
#line 2333 "parse.y" /* yacc.c:1646  */
    { list<pair<perm_string,PExpr*> >::const_iterator pp;
		  list<perm_string>*tmp = new list<perm_string>;
		  for (pp = (yyvsp[-1].port_list)->begin(); pp != (yyvsp[-1].port_list)->end(); pp++) {
			tmp->push_back((*pp).first);
		  }
		  pform_makewire((yylsp[-6]), (yyvsp[-3].exprs), (yyvsp[-4].flag), tmp, (yyvsp[-5].nettype), NetNet::POUTPUT,
		                 IVL_VT_NO_TYPE, (yyvsp[-2].sectype), 0, SR_BOTH);
		  for (pp = (yyvsp[-1].port_list)->begin(); pp != (yyvsp[-1].port_list)->end(); pp++) {
			if ((*pp).second) {
			      pform_make_reginit((yylsp[-6]), (*pp).first, (*pp).second);
			}
		  }
		  delete (yyvsp[-1].port_list);
		}
#line 7655 "parse.cc" /* yacc.c:1646  */
    break;

  case 343:
#line 2354 "parse.y" /* yacc.c:1646  */
    { pform_makewire((yylsp[-6]), (yyvsp[-3].exprs), (yyvsp[-4].flag), (yyvsp[-1].perm_strings), (yyvsp[-5].nettype), NetNet::PINPUT,
				 IVL_VT_NO_TYPE, (yyvsp[-2].sectype), 0);
		  yyerror((yylsp[-5]), "error: reg variables cannot be inputs.");
		}
#line 7664 "parse.cc" /* yacc.c:1646  */
    break;

  case 344:
#line 2361 "parse.y" /* yacc.c:1646  */
    { pform_makewire((yylsp[-6]), (yyvsp[-3].exprs), (yyvsp[-4].flag), (yyvsp[-1].perm_strings), (yyvsp[-5].nettype), NetNet::PINOUT,
				 IVL_VT_NO_TYPE, (yyvsp[-2].sectype), 0);
		  yyerror((yylsp[-5]), "error: reg variables cannot be inouts.");
		}
#line 7673 "parse.cc" /* yacc.c:1646  */
    break;

  case 345:
#line 2367 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-5]), "error: Invalid variable list"
			  " in port declaration.");
		  if ((yyvsp[-3].exprs)) delete (yyvsp[-3].exprs);
		  if ((yyvsp[-2].exprs)) delete (yyvsp[-2].exprs);
		  yyerrok;
		}
#line 7684 "parse.cc" /* yacc.c:1646  */
    break;

  case 346:
#line 2378 "parse.y" /* yacc.c:1646  */
    { pform_attach_discipline((yylsp[-2]), (yyvsp[-2].discipline), (yyvsp[-1].perm_strings)); }
#line 7690 "parse.cc" /* yacc.c:1646  */
    break;

  case 349:
#line 2394 "parse.y" /* yacc.c:1646  */
    { pform_makegates((yyvsp[-2].gatetype), str_strength, 0, (yyvsp[-1].gates), (yyvsp[-3].named_pexprs));
		}
#line 7697 "parse.cc" /* yacc.c:1646  */
    break;

  case 350:
#line 2398 "parse.y" /* yacc.c:1646  */
    { pform_makegates((yyvsp[-3].gatetype), str_strength, (yyvsp[-2].exprs), (yyvsp[-1].gates), (yyvsp[-4].named_pexprs));
		}
#line 7704 "parse.cc" /* yacc.c:1646  */
    break;

  case 351:
#line 2402 "parse.y" /* yacc.c:1646  */
    { pform_makegates((yyvsp[-3].gatetype), (yyvsp[-2].drive), 0, (yyvsp[-1].gates), (yyvsp[-4].named_pexprs));
		}
#line 7711 "parse.cc" /* yacc.c:1646  */
    break;

  case 352:
#line 2406 "parse.y" /* yacc.c:1646  */
    { pform_makegates((yyvsp[-4].gatetype), (yyvsp[-3].drive), (yyvsp[-2].exprs), (yyvsp[-1].gates), (yyvsp[-5].named_pexprs));
		}
#line 7718 "parse.cc" /* yacc.c:1646  */
    break;

  case 353:
#line 2411 "parse.y" /* yacc.c:1646  */
    { pform_makegates((yyvsp[-2].gatetype), str_strength, 0, (yyvsp[-1].gates), (yyvsp[-3].named_pexprs));
		}
#line 7725 "parse.cc" /* yacc.c:1646  */
    break;

  case 354:
#line 2415 "parse.y" /* yacc.c:1646  */
    { pform_makegates((yyvsp[-3].gatetype), str_strength, (yyvsp[-2].exprs), (yyvsp[-1].gates), (yyvsp[-4].named_pexprs));
		}
#line 7732 "parse.cc" /* yacc.c:1646  */
    break;

  case 355:
#line 2422 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLUP, pull_strength, 0,
				  (yyvsp[-1].gates), 0);
		}
#line 7740 "parse.cc" /* yacc.c:1646  */
    break;

  case 356:
#line 2426 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLDOWN, pull_strength,
				  0, (yyvsp[-1].gates), 0);
		}
#line 7748 "parse.cc" /* yacc.c:1646  */
    break;

  case 357:
#line 2431 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLUP, (yyvsp[-3].drive), 0, (yyvsp[-1].gates), 0);
		}
#line 7755 "parse.cc" /* yacc.c:1646  */
    break;

  case 358:
#line 2435 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLUP, (yyvsp[-5].drive), 0, (yyvsp[-1].gates), 0);
		}
#line 7762 "parse.cc" /* yacc.c:1646  */
    break;

  case 359:
#line 2439 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLUP, (yyvsp[-3].drive), 0, (yyvsp[-1].gates), 0);
		}
#line 7769 "parse.cc" /* yacc.c:1646  */
    break;

  case 360:
#line 2443 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLDOWN, (yyvsp[-3].drive), 0, (yyvsp[-1].gates), 0);
		}
#line 7776 "parse.cc" /* yacc.c:1646  */
    break;

  case 361:
#line 2447 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLDOWN, (yyvsp[-3].drive), 0, (yyvsp[-1].gates), 0);
		}
#line 7783 "parse.cc" /* yacc.c:1646  */
    break;

  case 362:
#line 2451 "parse.y" /* yacc.c:1646  */
    { pform_makegates(PGBuiltin::PULLDOWN, (yyvsp[-5].drive), 0, (yyvsp[-1].gates), 0);
		}
#line 7790 "parse.cc" /* yacc.c:1646  */
    break;

  case 363:
#line 2460 "parse.y" /* yacc.c:1646  */
    { perm_string tmp1 = lex_strings.make((yyvsp[-3].text));
		  pform_make_modgates(tmp1, (yyvsp[-2].parmvalue), (yyvsp[-1].gates));
		  delete[](yyvsp[-3].text);
		  if ((yyvsp[-4].named_pexprs)) delete (yyvsp[-4].named_pexprs);
		}
#line 7800 "parse.cc" /* yacc.c:1646  */
    break;

  case 364:
#line 2468 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-3]), "error: Invalid module instantiation");
		  delete[](yyvsp[-3].text);
		  if ((yyvsp[-4].named_pexprs)) delete (yyvsp[-4].named_pexprs);
		}
#line 7809 "parse.cc" /* yacc.c:1646  */
    break;

  case 365:
#line 2478 "parse.y" /* yacc.c:1646  */
    { pform_make_pgassign_list((yyvsp[-1].exprs), (yyvsp[-2].exprs), (yyvsp[-3].drive), (yylsp[-4]).text, (yylsp[-4]).first_line); }
#line 7815 "parse.cc" /* yacc.c:1646  */
    break;

  case 366:
#line 2483 "parse.y" /* yacc.c:1646  */
    { PProcess*tmp = pform_make_behavior(IVL_PR_ALWAYS, (yyvsp[0].statement), (yyvsp[-2].named_pexprs));
	FILE_NAME(tmp, (yylsp[-1]));
      }
#line 7823 "parse.cc" /* yacc.c:1646  */
    break;

  case 367:
#line 2487 "parse.y" /* yacc.c:1646  */
    { PProcess*tmp = pform_make_behavior(IVL_PR_INITIAL, (yyvsp[0].statement), (yyvsp[-2].named_pexprs));
	FILE_NAME(tmp, (yylsp[-1]));
      }
#line 7831 "parse.cc" /* yacc.c:1646  */
    break;

  case 368:
#line 2492 "parse.y" /* yacc.c:1646  */
    { pform_make_analog_behavior((yylsp[-1]), IVL_PR_ALWAYS, (yyvsp[0].statement)); }
#line 7837 "parse.cc" /* yacc.c:1646  */
    break;

  case 369:
#line 2503 "parse.y" /* yacc.c:1646  */
    { assert(current_task == 0);
	current_task = pform_push_task_scope((yylsp[-3]), (yyvsp[-1].text), (yyvsp[-2].flag));
      }
#line 7845 "parse.cc" /* yacc.c:1646  */
    break;

  case 370:
#line 2509 "parse.y" /* yacc.c:1646  */
    { current_task->set_ports((yyvsp[-2].wires));
	current_task->set_statement((yyvsp[-1].statement));
	pform_pop_scope();
	current_task = 0;
	delete[](yyvsp[-5].text);
      }
#line 7856 "parse.cc" /* yacc.c:1646  */
    break;

  case 371:
#line 2517 "parse.y" /* yacc.c:1646  */
    { assert(current_task == 0);
	current_task = pform_push_task_scope((yylsp[-3]), (yyvsp[-1].text), (yyvsp[-2].flag));
      }
#line 7864 "parse.cc" /* yacc.c:1646  */
    break;

  case 372:
#line 2524 "parse.y" /* yacc.c:1646  */
    { current_task->set_ports((yyvsp[-5].wires));
	current_task->set_statement((yyvsp[-1].statement));
	pform_pop_scope();
	current_task = 0;
	delete[](yyvsp[-8].text);
      }
#line 7875 "parse.cc" /* yacc.c:1646  */
    break;

  case 373:
#line 2532 "parse.y" /* yacc.c:1646  */
    { assert(current_task == 0);
	current_task = pform_push_task_scope((yylsp[-5]), (yyvsp[-3].text), (yyvsp[-4].flag));
      }
#line 7883 "parse.cc" /* yacc.c:1646  */
    break;

  case 374:
#line 2538 "parse.y" /* yacc.c:1646  */
    { current_task->set_ports(0);
	current_task->set_statement((yyvsp[-1].statement));
	pform_pop_scope();
	current_task = 0;
	cerr << (yylsp[-7]) << ": warning: task definition for \"" << (yyvsp[-7].text)
	     << "\" has an empty port declaration list!" << endl;
	delete[](yyvsp[-7].text);
      }
#line 7896 "parse.cc" /* yacc.c:1646  */
    break;

  case 375:
#line 2548 "parse.y" /* yacc.c:1646  */
    {
	assert(current_task == 0);
	delete[](yyvsp[-2].text);
      }
#line 7905 "parse.cc" /* yacc.c:1646  */
    break;

  case 376:
#line 2559 "parse.y" /* yacc.c:1646  */
    { assert(current_function == 0);
	current_function = pform_push_function_scope((yylsp[-4]), (yyvsp[-1].text), (yyvsp[-3].flag));
      }
#line 7913 "parse.cc" /* yacc.c:1646  */
    break;

  case 377:
#line 2564 "parse.y" /* yacc.c:1646  */
    { current_function->set_ports((yyvsp[-2].wires));
	current_function->set_statement((yyvsp[-1].statement));
	current_function->set_return((yyvsp[-6].function_type));
	pform_pop_scope();
	current_function = 0;
	delete[](yyvsp[-5].text);
      }
#line 7925 "parse.cc" /* yacc.c:1646  */
    break;

  case 378:
#line 2573 "parse.y" /* yacc.c:1646  */
    { assert(current_function == 0);
	current_function = pform_push_function_scope((yylsp[-3]), (yyvsp[0].text), (yyvsp[-2].flag));
      }
#line 7933 "parse.cc" /* yacc.c:1646  */
    break;

  case 379:
#line 2580 "parse.y" /* yacc.c:1646  */
    { current_function->set_ports((yyvsp[-5].wires));
	current_function->set_statement((yyvsp[-1].statement));
	current_function->set_return((yyvsp[-9].function_type));
	pform_pop_scope();
	current_function = 0;
	delete[](yyvsp[-8].text);
      }
#line 7945 "parse.cc" /* yacc.c:1646  */
    break;

  case 380:
#line 2588 "parse.y" /* yacc.c:1646  */
    {
	if (current_function != 0) {
	      pform_pop_scope();
	      current_function = 0;
	}
	delete[](yyvsp[-2].text);
      }
#line 7957 "parse.cc" /* yacc.c:1646  */
    break;

  case 382:
#line 2603 "parse.y" /* yacc.c:1646  */
    { pform_genvars((yylsp[-2]), (yyvsp[-1].perm_strings)); }
#line 7963 "parse.cc" /* yacc.c:1646  */
    break;

  case 383:
#line 2608 "parse.y" /* yacc.c:1646  */
    { pform_start_generate_for((yylsp[-11]), (yyvsp[-9].text), (yyvsp[-7].expr), (yyvsp[-5].expr), (yyvsp[-3].text), (yyvsp[-1].expr)); }
#line 7969 "parse.cc" /* yacc.c:1646  */
    break;

  case 384:
#line 2610 "parse.y" /* yacc.c:1646  */
    { pform_endgenerate(); }
#line 7975 "parse.cc" /* yacc.c:1646  */
    break;

  case 385:
#line 2615 "parse.y" /* yacc.c:1646  */
    { pform_start_generate_else((yylsp[-2])); }
#line 7981 "parse.cc" /* yacc.c:1646  */
    break;

  case 386:
#line 2617 "parse.y" /* yacc.c:1646  */
    { pform_endgenerate(); }
#line 7987 "parse.cc" /* yacc.c:1646  */
    break;

  case 387:
#line 2621 "parse.y" /* yacc.c:1646  */
    { pform_endgenerate(); }
#line 7993 "parse.cc" /* yacc.c:1646  */
    break;

  case 388:
#line 2624 "parse.y" /* yacc.c:1646  */
    { pform_start_generate_case((yylsp[-3]), (yyvsp[-1].expr)); }
#line 7999 "parse.cc" /* yacc.c:1646  */
    break;

  case 389:
#line 2627 "parse.y" /* yacc.c:1646  */
    { pform_endgenerate(); }
#line 8005 "parse.cc" /* yacc.c:1646  */
    break;

  case 390:
#line 2631 "parse.y" /* yacc.c:1646  */
    { /* Detect and warn about anachronistic begin/end use */
	if (generation_flag > GN_VER2001) {
	      warn_count += 1;
	      cerr << (yylsp[-3]) << ": warning: Anachronistic use of begin/end to surround generate schemes." << endl;
	}
      }
#line 8016 "parse.cc" /* yacc.c:1646  */
    break;

  case 391:
#line 2637 "parse.y" /* yacc.c:1646  */
    {
	pform_start_generate_nblock((yylsp[-2]), (yyvsp[0].text));
      }
#line 8024 "parse.cc" /* yacc.c:1646  */
    break;

  case 392:
#line 2640 "parse.y" /* yacc.c:1646  */
    { /* Detect and warn about anachronistic named begin/end use */
	if (generation_flag > GN_VER2001) {
	      warn_count += 1;
	      cerr << (yylsp[-6]) << ": warning: Anachronistic use of named begin/end to surround generate schemes." << endl;
	}
	pform_endgenerate();
      }
#line 8036 "parse.cc" /* yacc.c:1646  */
    break;

  case 393:
#line 2651 "parse.y" /* yacc.c:1646  */
    { /* empty lists are legal syntax. */ }
#line 8042 "parse.cc" /* yacc.c:1646  */
    break;

  case 394:
#line 2654 "parse.y" /* yacc.c:1646  */
    {
		}
#line 8049 "parse.cc" /* yacc.c:1646  */
    break;

  case 395:
#line 2658 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in specify block");
		  yyerrok;
		}
#line 8057 "parse.cc" /* yacc.c:1646  */
    break;

  case 396:
#line 2667 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: missing endmodule or attempt to "
		              "nest modules.");
		  pform_error_nested_modules();
		  yyerrok;
		}
#line 8067 "parse.cc" /* yacc.c:1646  */
    break;

  case 397:
#line 2674 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[0]), "error: invalid module item.");
		  yyerrok;
		}
#line 8075 "parse.cc" /* yacc.c:1646  */
    break;

  case 398:
#line 2679 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-4]), "error: syntax error in left side "
			  "of continuous assignment.");
		  yyerrok;
		}
#line 8084 "parse.cc" /* yacc.c:1646  */
    break;

  case 399:
#line 2685 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: syntax error in "
			  "continuous assignment");
		  yyerrok;
		}
#line 8093 "parse.cc" /* yacc.c:1646  */
    break;

  case 400:
#line 2691 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: I give up on this "
			  "function definition.");
		  yyerrok;
		}
#line 8102 "parse.cc" /* yacc.c:1646  */
    break;

  case 401:
#line 2700 "parse.y" /* yacc.c:1646  */
    { perm_string tmp3 = lex_strings.make((yyvsp[-6].text));
		  perm_string tmp5 = lex_strings.make((yyvsp[-4].text));
		  pform_set_attrib(tmp3, tmp5, (yyvsp[-2].text));
		  delete[] (yyvsp[-6].text);
		  delete[] (yyvsp[-4].text);
		}
#line 8113 "parse.cc" /* yacc.c:1646  */
    break;

  case 402:
#line 2707 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-4]), "error: Malformed $attribute parameter list."); }
#line 8119 "parse.cc" /* yacc.c:1646  */
    break;

  case 403:
#line 2711 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = true; }
#line 8125 "parse.cc" /* yacc.c:1646  */
    break;

  case 404:
#line 2712 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = false;}
#line 8131 "parse.cc" /* yacc.c:1646  */
    break;

  case 405:
#line 2715 "parse.y" /* yacc.c:1646  */
    { pform_start_generate_if((yylsp[-3]), (yyvsp[-1].expr)); }
#line 8137 "parse.cc" /* yacc.c:1646  */
    break;

  case 408:
#line 2723 "parse.y" /* yacc.c:1646  */
    { pform_generate_case_item((yylsp[-1]), (yyvsp[-1].exprs)); }
#line 8143 "parse.cc" /* yacc.c:1646  */
    break;

  case 409:
#line 2724 "parse.y" /* yacc.c:1646  */
    { pform_endgenerate(); }
#line 8149 "parse.cc" /* yacc.c:1646  */
    break;

  case 410:
#line 2725 "parse.y" /* yacc.c:1646  */
    { pform_generate_case_item((yylsp[-1]), 0); }
#line 8155 "parse.cc" /* yacc.c:1646  */
    break;

  case 411:
#line 2726 "parse.y" /* yacc.c:1646  */
    { pform_endgenerate(); }
#line 8161 "parse.cc" /* yacc.c:1646  */
    break;

  case 418:
#line 2749 "parse.y" /* yacc.c:1646  */
    { pform_generate_block_name((yyvsp[-2].text)); }
#line 8167 "parse.cc" /* yacc.c:1646  */
    break;

  case 421:
#line 2764 "parse.y" /* yacc.c:1646  */
    { net_decl_assign_t*tmp = new net_decl_assign_t;
	tmp->next = tmp;
	tmp->name = lex_strings.make((yyvsp[-2].text));
	tmp->expr = (yyvsp[0].expr);
	delete[](yyvsp[-2].text);
	(yyval.net_decl_assign) = tmp;
      }
#line 8179 "parse.cc" /* yacc.c:1646  */
    break;

  case 422:
#line 2775 "parse.y" /* yacc.c:1646  */
    { net_decl_assign_t*tmp = (yyvsp[-2].net_decl_assign);
		  (yyvsp[0].net_decl_assign)->next = tmp->next;
		  tmp->next = (yyvsp[0].net_decl_assign);
		  (yyval.net_decl_assign) = tmp;
		}
#line 8189 "parse.cc" /* yacc.c:1646  */
    break;

  case 423:
#line 2781 "parse.y" /* yacc.c:1646  */
    { (yyval.net_decl_assign) = (yyvsp[0].net_decl_assign);
		}
#line 8196 "parse.cc" /* yacc.c:1646  */
    break;

  case 424:
#line 2786 "parse.y" /* yacc.c:1646  */
    { (yyval.datatype) = IVL_VT_LOGIC; }
#line 8202 "parse.cc" /* yacc.c:1646  */
    break;

  case 425:
#line 2787 "parse.y" /* yacc.c:1646  */
    { (yyval.datatype) = IVL_VT_BOOL; }
#line 8208 "parse.cc" /* yacc.c:1646  */
    break;

  case 426:
#line 2788 "parse.y" /* yacc.c:1646  */
    { (yyval.datatype) = IVL_VT_REAL; }
#line 8214 "parse.cc" /* yacc.c:1646  */
    break;

  case 427:
#line 2791 "parse.y" /* yacc.c:1646  */
    { (yyval.datatype) = (yyvsp[0].datatype); }
#line 8220 "parse.cc" /* yacc.c:1646  */
    break;

  case 428:
#line 2791 "parse.y" /* yacc.c:1646  */
    { (yyval.datatype) = IVL_VT_NO_TYPE; }
#line 8226 "parse.cc" /* yacc.c:1646  */
    break;

  case 429:
#line 2794 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::WIRE; }
#line 8232 "parse.cc" /* yacc.c:1646  */
    break;

  case 430:
#line 2795 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::TRI; }
#line 8238 "parse.cc" /* yacc.c:1646  */
    break;

  case 431:
#line 2796 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::TRI1; }
#line 8244 "parse.cc" /* yacc.c:1646  */
    break;

  case 432:
#line 2797 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::SUPPLY0; }
#line 8250 "parse.cc" /* yacc.c:1646  */
    break;

  case 433:
#line 2798 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::WAND; }
#line 8256 "parse.cc" /* yacc.c:1646  */
    break;

  case 434:
#line 2799 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::TRIAND; }
#line 8262 "parse.cc" /* yacc.c:1646  */
    break;

  case 435:
#line 2800 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::TRI0; }
#line 8268 "parse.cc" /* yacc.c:1646  */
    break;

  case 436:
#line 2801 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::SUPPLY1; }
#line 8274 "parse.cc" /* yacc.c:1646  */
    break;

  case 437:
#line 2802 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::WOR; }
#line 8280 "parse.cc" /* yacc.c:1646  */
    break;

  case 438:
#line 2803 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::TRIOR; }
#line 8286 "parse.cc" /* yacc.c:1646  */
    break;

  case 439:
#line 2804 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::UWIRE;
		      cerr << (yylsp[0]).text << ":" << (yylsp[0]).first_line << ": warning: "
		              "'wone' is deprecated, please use 'uwire' "
		              "instead." << endl;
		    }
#line 8296 "parse.cc" /* yacc.c:1646  */
    break;

  case 440:
#line 2809 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::UWIRE; }
#line 8302 "parse.cc" /* yacc.c:1646  */
    break;

  case 441:
#line 2813 "parse.y" /* yacc.c:1646  */
    { (yyval.nettype) = NetNet::REG; }
#line 8308 "parse.cc" /* yacc.c:1646  */
    break;

  case 442:
#line 2818 "parse.y" /* yacc.c:1646  */
    { param_active_range = 0;
	param_active_signed = false;
	param_active_type = IVL_VT_LOGIC;
      }
#line 8317 "parse.cc" /* yacc.c:1646  */
    break;

  case 443:
#line 2823 "parse.y" /* yacc.c:1646  */
    { param_active_range = (yyvsp[0].exprs);
        param_active_signed = false;
	param_active_type = IVL_VT_LOGIC;
      }
#line 8326 "parse.cc" /* yacc.c:1646  */
    break;

  case 444:
#line 2828 "parse.y" /* yacc.c:1646  */
    { param_active_range = 0;
	param_active_signed = true;
	param_active_type = IVL_VT_LOGIC;
      }
#line 8335 "parse.cc" /* yacc.c:1646  */
    break;

  case 445:
#line 2833 "parse.y" /* yacc.c:1646  */
    { param_active_range = (yyvsp[0].exprs);
	param_active_signed = true;
	param_active_type = IVL_VT_LOGIC;
      }
#line 8344 "parse.cc" /* yacc.c:1646  */
    break;

  case 446:
#line 2838 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
        PExpr*re;
        re = new PENumber(new verinum(integer_width-1, integer_width));
        (*range_stub)[0] = re;
        re = new PENumber(new verinum((uint64_t)0, integer_width));
        (*range_stub)[1] = re;
        /* The default range is [31:0] */
        param_active_range = range_stub;
	param_active_signed = true;
	param_active_type = IVL_VT_LOGIC;
      }
#line 8360 "parse.cc" /* yacc.c:1646  */
    break;

  case 447:
#line 2850 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
        PExpr*re;
        re = new PENumber(new verinum((uint64_t)63, integer_width));
        (*range_stub)[0] = re;
        re = new PENumber(new verinum((uint64_t)0, integer_width));
        (*range_stub)[1] = re;
        /* The range is [63:0] */
        param_active_range = range_stub;
	param_active_signed = false;
	param_active_type = IVL_VT_LOGIC;
      }
#line 8376 "parse.cc" /* yacc.c:1646  */
    break;

  case 448:
#line 2862 "parse.y" /* yacc.c:1646  */
    { param_active_range = 0;
	param_active_signed = true;
	param_active_type = IVL_VT_REAL;
      }
#line 8385 "parse.cc" /* yacc.c:1646  */
    break;

  case 453:
#line 2885 "parse.y" /* yacc.c:1646  */
    { PExpr*tmp = (yyvsp[-1].expr);
	pform_set_parameter((yylsp[-3]), lex_strings.make((yyvsp[-3].text)), param_active_type,
			    param_active_signed, param_active_range, tmp, (yyvsp[0].value_range));
	delete[](yyvsp[-3].text);
      }
#line 8395 "parse.cc" /* yacc.c:1646  */
    break;

  case 454:
#line 2894 "parse.y" /* yacc.c:1646  */
    { PExpr*tmp = (yyvsp[0].expr);
	pform_set_localparam((yylsp[-2]), lex_strings.make((yyvsp[-2].text)), param_active_type,
			     param_active_signed, param_active_range, tmp);
	delete[](yyvsp[-2].text);
      }
#line 8405 "parse.cc" /* yacc.c:1646  */
    break;

  case 455:
#line 2901 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = (yyvsp[0].value_range); }
#line 8411 "parse.cc" /* yacc.c:1646  */
    break;

  case 456:
#line 2901 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = 0; }
#line 8417 "parse.cc" /* yacc.c:1646  */
    break;

  case 457:
#line 2905 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = (yyvsp[0].value_range); (yyval.value_range)->next = (yyvsp[-1].value_range); }
#line 8423 "parse.cc" /* yacc.c:1646  */
    break;

  case 458:
#line 2907 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = (yyvsp[0].value_range); (yyval.value_range)->next = 0; }
#line 8429 "parse.cc" /* yacc.c:1646  */
    break;

  case 459:
#line 2912 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = pform_parameter_value_range((yyvsp[-5].flag), false, (yyvsp[-3].expr), false, (yyvsp[-1].expr)); }
#line 8435 "parse.cc" /* yacc.c:1646  */
    break;

  case 460:
#line 2914 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = pform_parameter_value_range((yyvsp[-5].flag), false, (yyvsp[-3].expr), true, (yyvsp[-1].expr)); }
#line 8441 "parse.cc" /* yacc.c:1646  */
    break;

  case 461:
#line 2916 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = pform_parameter_value_range((yyvsp[-5].flag), true, (yyvsp[-3].expr), false, (yyvsp[-1].expr)); }
#line 8447 "parse.cc" /* yacc.c:1646  */
    break;

  case 462:
#line 2918 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = pform_parameter_value_range((yyvsp[-5].flag), true, (yyvsp[-3].expr), true, (yyvsp[-1].expr)); }
#line 8453 "parse.cc" /* yacc.c:1646  */
    break;

  case 463:
#line 2920 "parse.y" /* yacc.c:1646  */
    { (yyval.value_range) = pform_parameter_value_range(true, false, (yyvsp[0].expr), false, (yyvsp[0].expr)); }
#line 8459 "parse.cc" /* yacc.c:1646  */
    break;

  case 464:
#line 2924 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = (yyvsp[0].expr); }
#line 8465 "parse.cc" /* yacc.c:1646  */
    break;

  case 465:
#line 2925 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = 0; }
#line 8471 "parse.cc" /* yacc.c:1646  */
    break;

  case 466:
#line 2926 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = 0; }
#line 8477 "parse.cc" /* yacc.c:1646  */
    break;

  case 467:
#line 2927 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = 0; }
#line 8483 "parse.cc" /* yacc.c:1646  */
    break;

  case 468:
#line 2930 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = false; }
#line 8489 "parse.cc" /* yacc.c:1646  */
    break;

  case 469:
#line 2930 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = true; }
#line 8495 "parse.cc" /* yacc.c:1646  */
    break;

  case 470:
#line 2950 "parse.y" /* yacc.c:1646  */
    { struct parmvalue_t*tmp = new struct parmvalue_t;
		  tmp->by_order = (yyvsp[-1].exprs);
		  tmp->by_name = 0;
		  (yyval.parmvalue) = tmp;
		}
#line 8505 "parse.cc" /* yacc.c:1646  */
    break;

  case 471:
#line 2956 "parse.y" /* yacc.c:1646  */
    { struct parmvalue_t*tmp = new struct parmvalue_t;
		  tmp->by_order = 0;
		  tmp->by_name = (yyvsp[-1].named_pexprs);
		  (yyval.parmvalue) = tmp;
		}
#line 8515 "parse.cc" /* yacc.c:1646  */
    break;

  case 472:
#line 2962 "parse.y" /* yacc.c:1646  */
    { assert((yyvsp[0].number));
		  PENumber*tmp = new PENumber((yyvsp[0].number));
		  FILE_NAME(tmp, (yylsp[-1]));

		  struct parmvalue_t*lst = new struct parmvalue_t;
		  lst->by_order = new svector<PExpr*>(1);
		  (*lst->by_order)[0] = tmp;
		  lst->by_name = 0;
		  (yyval.parmvalue) = lst;
		  based_size = 0;
		}
#line 8531 "parse.cc" /* yacc.c:1646  */
    break;

  case 473:
#line 2974 "parse.y" /* yacc.c:1646  */
    { assert((yyvsp[0].realtime));
		  PEFNumber*tmp = new PEFNumber((yyvsp[0].realtime));
		  FILE_NAME(tmp, (yylsp[-1]));

		  struct parmvalue_t*lst = new struct parmvalue_t;
		  lst->by_order = new svector<PExpr*>(1);
		  (*lst->by_order)[0] = tmp;
		  lst->by_name = 0;
		  (yyval.parmvalue) = lst;
		}
#line 8546 "parse.cc" /* yacc.c:1646  */
    break;

  case 474:
#line 2985 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-1]), "error: syntax error in parameter value "
			  "assignment list.");
		  (yyval.parmvalue) = 0;
		}
#line 8555 "parse.cc" /* yacc.c:1646  */
    break;

  case 475:
#line 2990 "parse.y" /* yacc.c:1646  */
    { (yyval.parmvalue) = 0; }
#line 8561 "parse.cc" /* yacc.c:1646  */
    break;

  case 476:
#line 2995 "parse.y" /* yacc.c:1646  */
    { named_pexpr_t*tmp = new named_pexpr_t;
		  tmp->name = lex_strings.make((yyvsp[-3].text));
		  tmp->parm = (yyvsp[-1].expr);
		  delete[](yyvsp[-3].text);
		  (yyval.named_pexpr) = tmp;
		}
#line 8572 "parse.cc" /* yacc.c:1646  */
    break;

  case 477:
#line 3002 "parse.y" /* yacc.c:1646  */
    { named_pexpr_t*tmp = new named_pexpr_t;
		  tmp->name = lex_strings.make((yyvsp[-2].text));
		  tmp->parm = 0;
		  delete[](yyvsp[-2].text);
		  (yyval.named_pexpr) = tmp;
		}
#line 8583 "parse.cc" /* yacc.c:1646  */
    break;

  case 478:
#line 3012 "parse.y" /* yacc.c:1646  */
    { svector<named_pexpr_t*>*tmp = new svector<named_pexpr_t*>(1);
		  (*tmp)[0] = (yyvsp[0].named_pexpr);
		  (yyval.named_pexprs) = tmp;
		}
#line 8592 "parse.cc" /* yacc.c:1646  */
    break;

  case 479:
#line 3017 "parse.y" /* yacc.c:1646  */
    { svector<named_pexpr_t*>*tmp =
			new svector<named_pexpr_t*>(*(yyvsp[-2].named_pexprs),(yyvsp[0].named_pexpr));
		  delete (yyvsp[-2].named_pexprs);
		  (yyval.named_pexprs) = tmp;
		}
#line 8602 "parse.cc" /* yacc.c:1646  */
    break;

  case 480:
#line 3040 "parse.y" /* yacc.c:1646  */
    { (yyval.mport) = (yyvsp[0].mport); }
#line 8608 "parse.cc" /* yacc.c:1646  */
    break;

  case 481:
#line 3048 "parse.y" /* yacc.c:1646  */
    { Module::port_t*tmp = (yyvsp[-1].mport);
		  tmp->name = lex_strings.make((yyvsp[-3].text));
		  delete[](yyvsp[-3].text);
		  (yyval.mport) = tmp;
		}
#line 8618 "parse.cc" /* yacc.c:1646  */
    break;

  case 482:
#line 3059 "parse.y" /* yacc.c:1646  */
    { Module::port_t*tmp = (yyvsp[-1].mport);
		  tmp->name = perm_string();
		  (yyval.mport) = tmp;
		}
#line 8627 "parse.cc" /* yacc.c:1646  */
    break;

  case 483:
#line 3068 "parse.y" /* yacc.c:1646  */
    { Module::port_t*tmp = (yyvsp[-2].mport);
		  tmp->name = lex_strings.make((yyvsp[-5].text));
		  delete[](yyvsp[-5].text);
		  (yyval.mport) = tmp;
		}
#line 8637 "parse.cc" /* yacc.c:1646  */
    break;

  case 484:
#line 3076 "parse.y" /* yacc.c:1646  */
    { (yyval.mport) = (yyvsp[0].mport); }
#line 8643 "parse.cc" /* yacc.c:1646  */
    break;

  case 485:
#line 3077 "parse.y" /* yacc.c:1646  */
    { (yyval.mport) = 0; }
#line 8649 "parse.cc" /* yacc.c:1646  */
    break;

  case 486:
#line 3094 "parse.y" /* yacc.c:1646  */
    { Module::port_t*ptmp;
	  perm_string name = lex_strings.make((yyvsp[0].text));
	  ptmp = pform_module_port_reference(name, (yylsp[0]).text, (yylsp[0]).first_line);
	  delete[](yyvsp[0].text);
	  (yyval.mport) = ptmp;
	}
#line 8660 "parse.cc" /* yacc.c:1646  */
    break;

  case 487:
#line 3102 "parse.y" /* yacc.c:1646  */
    { index_component_t itmp;
	  itmp.sel = index_component_t::SEL_PART;
	  itmp.msb = (yyvsp[-3].expr);
	  itmp.lsb = (yyvsp[-1].expr);

	  name_component_t ntmp (lex_strings.make((yyvsp[-5].text)));
	  ntmp.index.push_back(itmp);

	  pform_name_t pname;
	  pname.push_back(ntmp);

	  PEIdent*wtmp = new PEIdent(pname);
	  FILE_NAME(wtmp, (yylsp[-5]));

	  Module::port_t*ptmp = new Module::port_t;
	  ptmp->name = perm_string();
	  ptmp->expr.push_back(wtmp);

	  delete[](yyvsp[-5].text);
	  (yyval.mport) = ptmp;
	}
#line 8686 "parse.cc" /* yacc.c:1646  */
    break;

  case 488:
#line 3125 "parse.y" /* yacc.c:1646  */
    { index_component_t itmp;
	  itmp.sel = index_component_t::SEL_BIT;
	  itmp.msb = (yyvsp[-1].expr);
	  itmp.lsb = 0;

	  name_component_t ntmp (lex_strings.make((yyvsp[-3].text)));
	  ntmp.index.push_back(itmp);

	  pform_name_t pname;
	  pname.push_back(ntmp);

	  PEIdent*tmp = new PEIdent(pname);
	  FILE_NAME(tmp, (yylsp[-3]));

	  Module::port_t*ptmp = new Module::port_t;
	  ptmp->name = perm_string();
	  ptmp->expr.push_back(tmp);
	  delete[](yyvsp[-3].text);
	  (yyval.mport) = ptmp;
	}
#line 8711 "parse.cc" /* yacc.c:1646  */
    break;

  case 489:
#line 3147 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-3]), "error: invalid port bit select");
	  Module::port_t*ptmp = new Module::port_t;
	  PEIdent*wtmp = new PEIdent(lex_strings.make((yyvsp[-3].text)));
	  FILE_NAME(wtmp, (yylsp[-3]));
	  ptmp->name = lex_strings.make((yyvsp[-3].text));
	  ptmp->expr.push_back(wtmp);
	  delete[](yyvsp[-3].text);
	  (yyval.mport) = ptmp;
	}
#line 8725 "parse.cc" /* yacc.c:1646  */
    break;

  case 490:
#line 3161 "parse.y" /* yacc.c:1646  */
    { (yyval.mport) = (yyvsp[0].mport); }
#line 8731 "parse.cc" /* yacc.c:1646  */
    break;

  case 491:
#line 3163 "parse.y" /* yacc.c:1646  */
    { Module::port_t*tmp = (yyvsp[-2].mport);
		  append(tmp->expr, (yyvsp[0].mport)->expr);
		  delete (yyvsp[0].mport);
		  (yyval.mport) = tmp;
		}
#line 8741 "parse.cc" /* yacc.c:1646  */
    break;

  case 492:
#line 3176 "parse.y" /* yacc.c:1646  */
    { named_pexpr_t*tmp = new named_pexpr_t;
		  tmp->name = lex_strings.make((yyvsp[-3].text));
		  tmp->parm = (yyvsp[-1].expr);
		  delete[](yyvsp[-3].text);
		  (yyval.named_pexpr) = tmp;
		}
#line 8752 "parse.cc" /* yacc.c:1646  */
    break;

  case 493:
#line 3183 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "error: invalid port connection expression.");
		  named_pexpr_t*tmp = new named_pexpr_t;
		  tmp->name = lex_strings.make((yyvsp[-3].text));
		  tmp->parm = 0;
		  delete[](yyvsp[-3].text);
		  (yyval.named_pexpr) = tmp;
		}
#line 8764 "parse.cc" /* yacc.c:1646  */
    break;

  case 494:
#line 3191 "parse.y" /* yacc.c:1646  */
    { named_pexpr_t*tmp = new named_pexpr_t;
		  tmp->name = lex_strings.make((yyvsp[-2].text));
		  tmp->parm = 0;
		  delete[](yyvsp[-2].text);
		  (yyval.named_pexpr) = tmp;
		}
#line 8775 "parse.cc" /* yacc.c:1646  */
    break;

  case 495:
#line 3201 "parse.y" /* yacc.c:1646  */
    { svector<named_pexpr_t*>*tmp;
		  tmp = new svector<named_pexpr_t*>(*(yyvsp[-2].named_pexprs), (yyvsp[0].named_pexpr));
		  delete (yyvsp[-2].named_pexprs);
		  (yyval.named_pexprs) = tmp;
		}
#line 8785 "parse.cc" /* yacc.c:1646  */
    break;

  case 496:
#line 3207 "parse.y" /* yacc.c:1646  */
    { svector<named_pexpr_t*>*tmp = new svector<named_pexpr_t*>(1);
		  (*tmp)[0] = (yyvsp[0].named_pexpr);
		  (yyval.named_pexprs) = tmp;
		}
#line 8794 "parse.cc" /* yacc.c:1646  */
    break;

  case 497:
#line 3214 "parse.y" /* yacc.c:1646  */
    { (yyval.porttype) = NetNet::PINPUT; }
#line 8800 "parse.cc" /* yacc.c:1646  */
    break;

  case 498:
#line 3215 "parse.y" /* yacc.c:1646  */
    { (yyval.porttype) = NetNet::POUTPUT; }
#line 8806 "parse.cc" /* yacc.c:1646  */
    break;

  case 499:
#line 3216 "parse.y" /* yacc.c:1646  */
    { (yyval.porttype) = NetNet::PINOUT; }
#line 8812 "parse.cc" /* yacc.c:1646  */
    break;

  case 500:
#line 3221 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*> (2);
		  (*tmp)[0] = (yyvsp[-3].expr);
		  (*tmp)[1] = (yyvsp[-1].expr);
		  (yyval.exprs) = tmp;
		}
#line 8822 "parse.cc" /* yacc.c:1646  */
    break;

  case 502:
#line 3230 "parse.y" /* yacc.c:1646  */
    { (yyval.exprs) = 0; }
#line 8828 "parse.cc" /* yacc.c:1646  */
    break;

  case 503:
#line 3233 "parse.y" /* yacc.c:1646  */
    { (yyval.dimensions) = 0; }
#line 8834 "parse.cc" /* yacc.c:1646  */
    break;

  case 504:
#line 3234 "parse.y" /* yacc.c:1646  */
    { (yyval.dimensions) = (yyvsp[0].dimensions); }
#line 8840 "parse.cc" /* yacc.c:1646  */
    break;

  case 505:
#line 3239 "parse.y" /* yacc.c:1646  */
    { list<index_component_t> *tmp = new list<index_component_t>;
		  index_component_t index;
		  index.msb = (yyvsp[-3].expr);
		  index.lsb = (yyvsp[-1].expr);
		  tmp->push_back(index);
		  (yyval.dimensions) = tmp;
		}
#line 8852 "parse.cc" /* yacc.c:1646  */
    break;

  case 506:
#line 3247 "parse.y" /* yacc.c:1646  */
    { list<index_component_t> *tmp = (yyvsp[-5].dimensions);
		  index_component_t index;
		  index.msb = (yyvsp[-3].expr);
		  index.lsb = (yyvsp[-1].expr);
		  tmp->push_back(index);
		  (yyval.dimensions) = tmp;
		}
#line 8864 "parse.cc" /* yacc.c:1646  */
    break;

  case 507:
#line 3258 "parse.y" /* yacc.c:1646  */
    { (yyval.function_type).range = (yyvsp[0].exprs); (yyval.function_type).type = PTF_REG; }
#line 8870 "parse.cc" /* yacc.c:1646  */
    break;

  case 508:
#line 3259 "parse.y" /* yacc.c:1646  */
    { (yyval.function_type).range = (yyvsp[0].exprs); (yyval.function_type).type = PTF_REG_S; }
#line 8876 "parse.cc" /* yacc.c:1646  */
    break;

  case 509:
#line 3260 "parse.y" /* yacc.c:1646  */
    { (yyval.function_type).range = 0;  (yyval.function_type).type = PTF_INTEGER; }
#line 8882 "parse.cc" /* yacc.c:1646  */
    break;

  case 510:
#line 3261 "parse.y" /* yacc.c:1646  */
    { (yyval.function_type).range = 0;  (yyval.function_type).type = PTF_REAL; }
#line 8888 "parse.cc" /* yacc.c:1646  */
    break;

  case 511:
#line 3262 "parse.y" /* yacc.c:1646  */
    { (yyval.function_type).range = 0;  (yyval.function_type).type = PTF_REALTIME; }
#line 8894 "parse.cc" /* yacc.c:1646  */
    break;

  case 512:
#line 3263 "parse.y" /* yacc.c:1646  */
    { (yyval.function_type).range = 0;  (yyval.function_type).type = PTF_TIME; }
#line 8900 "parse.cc" /* yacc.c:1646  */
    break;

  case 513:
#line 3264 "parse.y" /* yacc.c:1646  */
    { (yyval.function_type).range = 0;  (yyval.function_type).type = PTF_REG; }
#line 8906 "parse.cc" /* yacc.c:1646  */
    break;

  case 514:
#line 3274 "parse.y" /* yacc.c:1646  */
    { perm_string ident_name = lex_strings.make((yyvsp[-1].text));
	pform_makewire((yylsp[-1]), ident_name, NetNet::REG,
		       NetNet::NOT_A_PORT, IVL_VT_NO_TYPE, 0);
	if ((yyvsp[0].dimensions) != 0) {
	      index_component_t index;
	      if ((yyvsp[0].dimensions)->size() > 1) {
		    yyerror((yylsp[0]), "sorry: only 1 dimensional arrays "
			    "are currently supported.");
	      }
	      index = (yyvsp[0].dimensions)->front();
	      pform_set_reg_idx(ident_name, index.msb, index.lsb);
	      delete (yyvsp[0].dimensions);
	}
	(yyval.text) = (yyvsp[-1].text);
      }
#line 8926 "parse.cc" /* yacc.c:1646  */
    break;

  case 515:
#line 3290 "parse.y" /* yacc.c:1646  */
    { perm_string ident_name = lex_strings.make((yyvsp[-2].text));
	pform_makewire((yylsp[-2]), ident_name, NetNet::REG,
		       NetNet::NOT_A_PORT, IVL_VT_NO_TYPE, 0);
	pform_make_reginit((yylsp[-2]), ident_name, (yyvsp[0].expr));
	(yyval.text) = (yyvsp[-2].text);
      }
#line 8937 "parse.cc" /* yacc.c:1646  */
    break;

  case 516:
#line 3300 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = new list<perm_string>;
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 8947 "parse.cc" /* yacc.c:1646  */
    break;

  case 517:
#line 3306 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = (yyvsp[-2].perm_strings);
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 8957 "parse.cc" /* yacc.c:1646  */
    break;

  case 518:
#line 3315 "parse.y" /* yacc.c:1646  */
    { perm_string name = lex_strings.make((yyvsp[-1].text));
        pform_makewire((yylsp[-1]), name, NetNet::REG, NetNet::NOT_A_PORT, IVL_VT_REAL, 0);
        if ((yyvsp[0].dimensions) != 0) {
	      index_component_t index;
	      if ((yyvsp[0].dimensions)->size() > 1) {
		    yyerror((yylsp[0]), "sorry: only 1 dimensional arrays "
			    "are currently supported.");
	      }
	      index = (yyvsp[0].dimensions)->front();
	      pform_set_reg_idx(name, index.msb, index.lsb);
	      delete (yyvsp[0].dimensions);
        }
	(yyval.text) = (yyvsp[-1].text);
      }
#line 8976 "parse.cc" /* yacc.c:1646  */
    break;

  case 519:
#line 3330 "parse.y" /* yacc.c:1646  */
    { perm_string name = lex_strings.make((yyvsp[-2].text));
	pform_makewire((yylsp[-2]), name, NetNet::REG, NetNet::NOT_A_PORT, IVL_VT_REAL, 0);
	pform_make_reginit((yylsp[-2]), name, (yyvsp[0].expr));
	(yyval.text) = (yyvsp[-2].text);
      }
#line 8986 "parse.cc" /* yacc.c:1646  */
    break;

  case 520:
#line 3339 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = new list<perm_string>;
	tmp->push_back(lex_strings.make((yyvsp[0].text)));
	(yyval.perm_strings) = tmp;
	delete[](yyvsp[0].text);
      }
#line 8996 "parse.cc" /* yacc.c:1646  */
    break;

  case 521:
#line 3345 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = (yyvsp[-2].perm_strings);
	tmp->push_back(lex_strings.make((yyvsp[0].text)));
	(yyval.perm_strings) = tmp;
	delete[](yyvsp[0].text);
      }
#line 9006 "parse.cc" /* yacc.c:1646  */
    break;

  case 522:
#line 3354 "parse.y" /* yacc.c:1646  */
    { perm_string name = lex_strings.make((yyvsp[-1].text));
	pform_makewire((yylsp[-1]), name, NetNet::IMPLICIT,
		       NetNet::NOT_A_PORT, IVL_VT_NO_TYPE, 0);
	if ((yyvsp[0].dimensions) != 0) {
	      index_component_t index;
	      if ((yyvsp[0].dimensions)->size() > 1) {
		    yyerror((yylsp[0]), "sorry: only 1 dimensional arrays "
			    "are currently supported.");
	      }
	      index = (yyvsp[0].dimensions)->front();
	      pform_set_reg_idx(name, index.msb, index.lsb);
	      delete (yyvsp[0].dimensions);
	}
	(yyval.text) = (yyvsp[-1].text);
      }
#line 9026 "parse.cc" /* yacc.c:1646  */
    break;

  case 523:
#line 3373 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = new list<perm_string>;
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 9036 "parse.cc" /* yacc.c:1646  */
    break;

  case 524:
#line 3379 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = (yyvsp[-2].perm_strings);
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 9046 "parse.cc" /* yacc.c:1646  */
    break;

  case 526:
#line 3389 "parse.y" /* yacc.c:1646  */
    { pform_module_specify_path((yyvsp[-1].specpath));
		}
#line 9053 "parse.cc" /* yacc.c:1646  */
    break;

  case 527:
#line 3392 "parse.y" /* yacc.c:1646  */
    { pform_module_specify_path((yyvsp[-1].specpath));
		}
#line 9060 "parse.cc" /* yacc.c:1646  */
    break;

  case 528:
#line 3395 "parse.y" /* yacc.c:1646  */
    { PSpecPath*tmp = (yyvsp[-1].specpath);
		  if (tmp) {
			tmp->conditional = true;
			tmp->condition = (yyvsp[-3].expr);
		  }
		  pform_module_specify_path(tmp);
		}
#line 9072 "parse.cc" /* yacc.c:1646  */
    break;

  case 529:
#line 3403 "parse.y" /* yacc.c:1646  */
    { PSpecPath*tmp = (yyvsp[-1].specpath);
		  if (tmp) {
			tmp->conditional = true;
			tmp->condition = (yyvsp[-3].expr);
		  }
		  pform_module_specify_path(tmp);
		}
#line 9084 "parse.cc" /* yacc.c:1646  */
    break;

  case 530:
#line 3411 "parse.y" /* yacc.c:1646  */
    { PSpecPath*tmp = (yyvsp[-1].specpath);
		  if (tmp) {
			tmp->conditional = true;
			tmp->condition = 0;
		  }
		  pform_module_specify_path(tmp);
		}
#line 9096 "parse.cc" /* yacc.c:1646  */
    break;

  case 531:
#line 3419 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "Sorry: ifnone with an edge-sensitive path is "
		              "not supported.");
		  yyerrok;
		}
#line 9105 "parse.cc" /* yacc.c:1646  */
    break;

  case 532:
#line 3425 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-5].expr);
		  delete (yyvsp[-3].expr);
		}
#line 9113 "parse.cc" /* yacc.c:1646  */
    break;

  case 533:
#line 3430 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].expr);
		}
#line 9120 "parse.cc" /* yacc.c:1646  */
    break;

  case 534:
#line 3434 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-5].expr);
		  delete (yyvsp[-3].expr);
		}
#line 9128 "parse.cc" /* yacc.c:1646  */
    break;

  case 535:
#line 3439 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].expr);
		}
#line 9135 "parse.cc" /* yacc.c:1646  */
    break;

  case 536:
#line 3443 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].expr);
		}
#line 9142 "parse.cc" /* yacc.c:1646  */
    break;

  case 537:
#line 3447 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-5].expr);
		  delete (yyvsp[-3].expr);
		}
#line 9150 "parse.cc" /* yacc.c:1646  */
    break;

  case 538:
#line 3452 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].expr);
		}
#line 9157 "parse.cc" /* yacc.c:1646  */
    break;

  case 539:
#line 3456 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].expr);
		}
#line 9164 "parse.cc" /* yacc.c:1646  */
    break;

  case 540:
#line 3460 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-5].expr);
		  delete (yyvsp[-3].expr);
		}
#line 9172 "parse.cc" /* yacc.c:1646  */
    break;

  case 541:
#line 3465 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].expr);
		}
#line 9179 "parse.cc" /* yacc.c:1646  */
    break;

  case 542:
#line 3469 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-3].expr);
		}
#line 9186 "parse.cc" /* yacc.c:1646  */
    break;

  case 543:
#line 3473 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-5].expr);
		  delete (yyvsp[-3].expr);
		}
#line 9194 "parse.cc" /* yacc.c:1646  */
    break;

  case 544:
#line 3477 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-2].expr);
		}
#line 9201 "parse.cc" /* yacc.c:1646  */
    break;

  case 545:
#line 3480 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-1].perm_strings);
		}
#line 9208 "parse.cc" /* yacc.c:1646  */
    break;

  case 546:
#line 3483 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-1].perm_strings);
		}
#line 9215 "parse.cc" /* yacc.c:1646  */
    break;

  case 547:
#line 3486 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-1].perm_strings);
		}
#line 9222 "parse.cc" /* yacc.c:1646  */
    break;

  case 548:
#line 3489 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-1].perm_strings);
		}
#line 9229 "parse.cc" /* yacc.c:1646  */
    break;

  case 551:
#line 3500 "parse.y" /* yacc.c:1646  */
    { (yyval.specpath) = pform_assign_path_delay((yyvsp[-4].specpath), (yyvsp[-1].exprs)); }
#line 9235 "parse.cc" /* yacc.c:1646  */
    break;

  case 552:
#line 3502 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[0].expr);
		  (yyval.specpath) = pform_assign_path_delay((yyvsp[-2].specpath), tmp);
		}
#line 9244 "parse.cc" /* yacc.c:1646  */
    break;

  case 553:
#line 3508 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = true; }
#line 9250 "parse.cc" /* yacc.c:1646  */
    break;

  case 554:
#line 3508 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = false; }
#line 9256 "parse.cc" /* yacc.c:1646  */
    break;

  case 555:
#line 3513 "parse.y" /* yacc.c:1646  */
    { int edge_flag = 0;
		      (yyval.specpath) = pform_make_specify_edge_path((yylsp[-9]), edge_flag, (yyvsp[-8].perm_strings), (yyvsp[-7].letter), false, (yyvsp[-4].perm_strings), (yyvsp[-2].expr)); }
#line 9263 "parse.cc" /* yacc.c:1646  */
    break;

  case 556:
#line 3517 "parse.y" /* yacc.c:1646  */
    { int edge_flag = (yyvsp[-9].flag)? 1 : -1;
		      (yyval.specpath) = pform_make_specify_edge_path((yylsp[-10]), edge_flag, (yyvsp[-8].perm_strings), (yyvsp[-7].letter), false, (yyvsp[-4].perm_strings), (yyvsp[-2].expr));}
#line 9270 "parse.cc" /* yacc.c:1646  */
    break;

  case 557:
#line 3521 "parse.y" /* yacc.c:1646  */
    { int edge_flag = 0;
		      (yyval.specpath) = pform_make_specify_edge_path((yylsp[-9]), edge_flag, (yyvsp[-8].perm_strings), (yyvsp[-7].letter), true, (yyvsp[-4].perm_strings), (yyvsp[-2].expr)); }
#line 9277 "parse.cc" /* yacc.c:1646  */
    break;

  case 558:
#line 3525 "parse.y" /* yacc.c:1646  */
    { int edge_flag = (yyvsp[-9].flag)? 1 : -1;
		      (yyval.specpath) = pform_make_specify_edge_path((yylsp[-10]), edge_flag, (yyvsp[-8].perm_strings), (yyvsp[-7].letter), true, (yyvsp[-4].perm_strings), (yyvsp[-2].expr)); }
#line 9284 "parse.cc" /* yacc.c:1646  */
    break;

  case 562:
#line 3537 "parse.y" /* yacc.c:1646  */
    { (yyval.specpath) = pform_assign_path_delay((yyvsp[-4].specpath), (yyvsp[-1].exprs)); }
#line 9290 "parse.cc" /* yacc.c:1646  */
    break;

  case 563:
#line 3539 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*tmp = new svector<PExpr*>(1);
		  (*tmp)[0] = (yyvsp[0].expr);
		  (yyval.specpath) = pform_assign_path_delay((yyvsp[-2].specpath), tmp);
		}
#line 9299 "parse.cc" /* yacc.c:1646  */
    break;

  case 564:
#line 3544 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "Syntax error in delay value list.");
		  yyerrok;
		  (yyval.specpath) = 0;
		}
#line 9308 "parse.cc" /* yacc.c:1646  */
    break;

  case 565:
#line 3553 "parse.y" /* yacc.c:1646  */
    { (yyval.specpath) = pform_make_specify_path((yylsp[-5]), (yyvsp[-4].perm_strings), (yyvsp[-3].letter), false, (yyvsp[-1].perm_strings)); }
#line 9314 "parse.cc" /* yacc.c:1646  */
    break;

  case 566:
#line 3556 "parse.y" /* yacc.c:1646  */
    { (yyval.specpath) = pform_make_specify_path((yylsp[-5]), (yyvsp[-4].perm_strings), (yyvsp[-3].letter), true, (yyvsp[-1].perm_strings)); }
#line 9320 "parse.cc" /* yacc.c:1646  */
    break;

  case 567:
#line 3558 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "Invalid simple path");
		  yyerrok;
		}
#line 9328 "parse.cc" /* yacc.c:1646  */
    break;

  case 568:
#line 3565 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = new list<perm_string>;
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 9338 "parse.cc" /* yacc.c:1646  */
    break;

  case 569:
#line 3571 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = new list<perm_string>;
		  tmp->push_back(lex_strings.make((yyvsp[-3].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[-3].text);
		}
#line 9348 "parse.cc" /* yacc.c:1646  */
    break;

  case 570:
#line 3577 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = (yyvsp[-2].perm_strings);
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 9358 "parse.cc" /* yacc.c:1646  */
    break;

  case 571:
#line 3583 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = (yyvsp[-5].perm_strings);
		  tmp->push_back(lex_strings.make((yyvsp[-3].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[-3].text);
		}
#line 9368 "parse.cc" /* yacc.c:1646  */
    break;

  case 572:
#line 3592 "parse.y" /* yacc.c:1646  */
    { PExpr*tmp = (yyvsp[0].expr);
		  pform_set_specparam(lex_strings.make((yyvsp[-2].text)), tmp);
		  delete[](yyvsp[-2].text);
		}
#line 9377 "parse.cc" /* yacc.c:1646  */
    break;

  case 573:
#line 3597 "parse.y" /* yacc.c:1646  */
    { PExpr*tmp = 0;
		  switch (min_typ_max_flag) {
		      case MIN:
			tmp = (yyvsp[-4].expr);
			delete (yyvsp[-2].expr);
			delete (yyvsp[0].expr);
			break;
		      case TYP:
			delete (yyvsp[-4].expr);
			tmp = (yyvsp[-2].expr);
			delete (yyvsp[0].expr);
			break;
		      case MAX:
			delete (yyvsp[-4].expr);
			delete (yyvsp[-2].expr);
			tmp = (yyvsp[0].expr);
			break;
		  }
		  if (min_typ_max_warn > 0) {
		        cerr << tmp->get_fileline() << ": warning: choosing ";
		        switch (min_typ_max_flag) {
		            case MIN:
		              cerr << "min";
		              break;
		            case TYP:
		              cerr << "typ";
		              break;
		            case MAX:
		              cerr << "max";
		              break;
		        }
		        cerr << " expression." << endl;
		        min_typ_max_warn -= 1;
		  }
		  pform_set_specparam(lex_strings.make((yyvsp[-6].text)), tmp);
		  delete[](yyvsp[-6].text);
		}
#line 9419 "parse.cc" /* yacc.c:1646  */
    break;

  case 574:
#line 3635 "parse.y" /* yacc.c:1646  */
    { delete[](yyvsp[-2].text);
		  delete (yyvsp[0].expr);
		}
#line 9427 "parse.cc" /* yacc.c:1646  */
    break;

  case 575:
#line 3639 "parse.y" /* yacc.c:1646  */
    { delete[](yyvsp[-6].text);
		  delete (yyvsp[-3].expr);
		  delete (yyvsp[-1].expr);
		}
#line 9436 "parse.cc" /* yacc.c:1646  */
    break;

  case 578:
#line 3651 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '+'; }
#line 9442 "parse.cc" /* yacc.c:1646  */
    break;

  case 579:
#line 3652 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '-'; }
#line 9448 "parse.cc" /* yacc.c:1646  */
    break;

  case 580:
#line 3653 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 0;   }
#line 9454 "parse.cc" /* yacc.c:1646  */
    break;

  case 581:
#line 3658 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[0].expr); }
#line 9460 "parse.cc" /* yacc.c:1646  */
    break;

  case 582:
#line 3660 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[0].expr); }
#line 9466 "parse.cc" /* yacc.c:1646  */
    break;

  case 583:
#line 3662 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-2].expr);
      delete (yyvsp[0].expr);
    }
#line 9474 "parse.cc" /* yacc.c:1646  */
    break;

  case 584:
#line 3666 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-2].expr);
      delete (yyvsp[0].expr);
    }
#line 9482 "parse.cc" /* yacc.c:1646  */
    break;

  case 585:
#line 3670 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[0].expr); }
#line 9488 "parse.cc" /* yacc.c:1646  */
    break;

  case 586:
#line 3672 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-2].expr);
      delete (yyvsp[0].expr);
    }
#line 9496 "parse.cc" /* yacc.c:1646  */
    break;

  case 587:
#line 3676 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[-2].expr);
      delete (yyvsp[0].expr);
    }
#line 9504 "parse.cc" /* yacc.c:1646  */
    break;

  case 588:
#line 3680 "parse.y" /* yacc.c:1646  */
    { delete (yyvsp[0].expr); }
#line 9510 "parse.cc" /* yacc.c:1646  */
    break;

  case 591:
#line 3694 "parse.y" /* yacc.c:1646  */
    {  }
#line 9516 "parse.cc" /* yacc.c:1646  */
    break;

  case 592:
#line 3696 "parse.y" /* yacc.c:1646  */
    {  }
#line 9522 "parse.cc" /* yacc.c:1646  */
    break;

  case 593:
#line 3700 "parse.y" /* yacc.c:1646  */
    { args_after_notifier = 0; }
#line 9528 "parse.cc" /* yacc.c:1646  */
    break;

  case 594:
#line 3702 "parse.y" /* yacc.c:1646  */
    { args_after_notifier = 0; delete (yyvsp[0].pform_name); }
#line 9534 "parse.cc" /* yacc.c:1646  */
    break;

  case 595:
#line 3704 "parse.y" /* yacc.c:1646  */
    {  args_after_notifier += 1; }
#line 9540 "parse.cc" /* yacc.c:1646  */
    break;

  case 596:
#line 3706 "parse.y" /* yacc.c:1646  */
    { args_after_notifier += 1;
		  if (args_after_notifier >= 3)  {
                    cerr << (yylsp[0]) << ": warning: timing checks are not supported "
		                  "and delayed signal \"" << *(yyvsp[0].pform_name)
		         << "\" will not be driven." << endl;
		  }
                  delete (yyvsp[0].pform_name); }
#line 9552 "parse.cc" /* yacc.c:1646  */
    break;

  case 597:
#line 3715 "parse.y" /* yacc.c:1646  */
    { args_after_notifier = 0; delete[](yyvsp[0].text); }
#line 9558 "parse.cc" /* yacc.c:1646  */
    break;

  case 598:
#line 3727 "parse.y" /* yacc.c:1646  */
    { PCAssign*tmp = new PCAssign((yyvsp[-3].expr), (yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9567 "parse.cc" /* yacc.c:1646  */
    break;

  case 599:
#line 3733 "parse.y" /* yacc.c:1646  */
    { PDeassign*tmp = new PDeassign((yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-2]));
		  (yyval.statement) = tmp;
		}
#line 9576 "parse.cc" /* yacc.c:1646  */
    break;

  case 600:
#line 3743 "parse.y" /* yacc.c:1646  */
    { PForce*tmp = new PForce((yyvsp[-3].expr), (yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9585 "parse.cc" /* yacc.c:1646  */
    break;

  case 601:
#line 3748 "parse.y" /* yacc.c:1646  */
    { PRelease*tmp = new PRelease((yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-2]));
		  (yyval.statement) = tmp;
		}
#line 9594 "parse.cc" /* yacc.c:1646  */
    break;

  case 602:
#line 3760 "parse.y" /* yacc.c:1646  */
    { PBlock*tmp = new PBlock(PBlock::BL_SEQ);
	FILE_NAME(tmp, (yylsp[-1]));
	(yyval.statement) = tmp;
      }
#line 9603 "parse.cc" /* yacc.c:1646  */
    break;

  case 603:
#line 3765 "parse.y" /* yacc.c:1646  */
    { PBlock*tmp = new PBlock(PBlock::BL_SEQ);
	FILE_NAME(tmp, (yylsp[-2]));
	tmp->set_statement(*(yyvsp[-1].statement_list));
	delete (yyvsp[-1].statement_list);
	(yyval.statement) = tmp;
      }
#line 9614 "parse.cc" /* yacc.c:1646  */
    break;

  case 604:
#line 3772 "parse.y" /* yacc.c:1646  */
    { PBlock*tmp = pform_push_block_scope((yyvsp[0].text), PBlock::BL_SEQ);
	FILE_NAME(tmp, (yylsp[-2]));
	current_block_stack.push(tmp);
      }
#line 9623 "parse.cc" /* yacc.c:1646  */
    break;

  case 605:
#line 3778 "parse.y" /* yacc.c:1646  */
    { pform_pop_scope();
	assert(! current_block_stack.empty());
	PBlock*tmp = current_block_stack.top();
	current_block_stack.pop();
	if ((yyvsp[-1].statement_list)) tmp->set_statement(*(yyvsp[-1].statement_list));
	delete[](yyvsp[-4].text);
	delete (yyvsp[-1].statement_list);
	(yyval.statement) = tmp;
      }
#line 9637 "parse.cc" /* yacc.c:1646  */
    break;

  case 606:
#line 3788 "parse.y" /* yacc.c:1646  */
    { yyerrok; }
#line 9643 "parse.cc" /* yacc.c:1646  */
    break;

  case 607:
#line 3796 "parse.y" /* yacc.c:1646  */
    { PBlock*tmp = new PBlock(PBlock::BL_PAR);
	FILE_NAME(tmp, (yylsp[-1]));
	(yyval.statement) = tmp;
      }
#line 9652 "parse.cc" /* yacc.c:1646  */
    break;

  case 608:
#line 3801 "parse.y" /* yacc.c:1646  */
    { PBlock*tmp = new PBlock(PBlock::BL_PAR);
	FILE_NAME(tmp, (yylsp[-2]));
	tmp->set_statement(*(yyvsp[-1].statement_list));
	delete (yyvsp[-1].statement_list);
	(yyval.statement) = tmp;
      }
#line 9663 "parse.cc" /* yacc.c:1646  */
    break;

  case 609:
#line 3808 "parse.y" /* yacc.c:1646  */
    { PBlock*tmp = pform_push_block_scope((yyvsp[0].text), PBlock::BL_PAR);
	FILE_NAME(tmp, (yylsp[-2]));
	current_block_stack.push(tmp);
      }
#line 9672 "parse.cc" /* yacc.c:1646  */
    break;

  case 610:
#line 3814 "parse.y" /* yacc.c:1646  */
    { pform_pop_scope();
        assert(! current_block_stack.empty());
	PBlock*tmp = current_block_stack.top();
	current_block_stack.pop();
	if ((yyvsp[-1].statement_list)) tmp->set_statement(*(yyvsp[-1].statement_list));
	delete[](yyvsp[-4].text);
	delete (yyvsp[-1].statement_list);
	(yyval.statement) = tmp;
      }
#line 9686 "parse.cc" /* yacc.c:1646  */
    break;

  case 611:
#line 3824 "parse.y" /* yacc.c:1646  */
    { yyerrok; }
#line 9692 "parse.cc" /* yacc.c:1646  */
    break;

  case 612:
#line 3827 "parse.y" /* yacc.c:1646  */
    { PDisable*tmp = new PDisable(*(yyvsp[-1].pform_name));
		  FILE_NAME(tmp, (yylsp[-2]));
		  delete (yyvsp[-1].pform_name);
		  (yyval.statement) = tmp;
		}
#line 9702 "parse.cc" /* yacc.c:1646  */
    break;

  case 613:
#line 3833 "parse.y" /* yacc.c:1646  */
    { PTrigger*tmp = new PTrigger(*(yyvsp[-1].pform_name));
		  FILE_NAME(tmp, (yylsp[-2]));
		  delete (yyvsp[-1].pform_name);
		  (yyval.statement) = tmp;
		}
#line 9712 "parse.cc" /* yacc.c:1646  */
    break;

  case 614:
#line 3839 "parse.y" /* yacc.c:1646  */
    { PForever*tmp = new PForever((yyvsp[0].statement));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.statement) = tmp;
		}
#line 9721 "parse.cc" /* yacc.c:1646  */
    break;

  case 615:
#line 3844 "parse.y" /* yacc.c:1646  */
    { PRepeat*tmp = new PRepeat((yyvsp[-2].expr), (yyvsp[0].statement));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9730 "parse.cc" /* yacc.c:1646  */
    break;

  case 616:
#line 3849 "parse.y" /* yacc.c:1646  */
    { PCase*tmp = new PCase(NetCase::EQ, (yyvsp[-3].expr), (yyvsp[-1].citems));
		  FILE_NAME(tmp, (yylsp[-5]));
		  (yyval.statement) = tmp;
		}
#line 9739 "parse.cc" /* yacc.c:1646  */
    break;

  case 617:
#line 3854 "parse.y" /* yacc.c:1646  */
    { PCase*tmp = new PCase(NetCase::EQX, (yyvsp[-3].expr), (yyvsp[-1].citems));
		  FILE_NAME(tmp, (yylsp[-5]));
		  (yyval.statement) = tmp;
		}
#line 9748 "parse.cc" /* yacc.c:1646  */
    break;

  case 618:
#line 3859 "parse.y" /* yacc.c:1646  */
    { PCase*tmp = new PCase(NetCase::EQZ, (yyvsp[-3].expr), (yyvsp[-1].citems));
		  FILE_NAME(tmp, (yylsp[-5]));
		  (yyval.statement) = tmp;
		}
#line 9757 "parse.cc" /* yacc.c:1646  */
    break;

  case 619:
#line 3864 "parse.y" /* yacc.c:1646  */
    { yyerrok; }
#line 9763 "parse.cc" /* yacc.c:1646  */
    break;

  case 620:
#line 3866 "parse.y" /* yacc.c:1646  */
    { yyerrok; }
#line 9769 "parse.cc" /* yacc.c:1646  */
    break;

  case 621:
#line 3868 "parse.y" /* yacc.c:1646  */
    { yyerrok; }
#line 9775 "parse.cc" /* yacc.c:1646  */
    break;

  case 622:
#line 3870 "parse.y" /* yacc.c:1646  */
    { PCondit*tmp = new PCondit((yyvsp[-2].expr), (yyvsp[0].statement), 0);
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9784 "parse.cc" /* yacc.c:1646  */
    break;

  case 623:
#line 3875 "parse.y" /* yacc.c:1646  */
    { PCondit*tmp = new PCondit((yyvsp[-4].expr), (yyvsp[-2].statement), (yyvsp[0].statement));
		  FILE_NAME(tmp, (yylsp[-6]));
		  (yyval.statement) = tmp;
		}
#line 9793 "parse.cc" /* yacc.c:1646  */
    break;

  case 624:
#line 3880 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-4]), "error: Malformed conditional expression.");
		  (yyval.statement) = (yyvsp[0].statement);
		}
#line 9801 "parse.cc" /* yacc.c:1646  */
    break;

  case 625:
#line 3884 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-6]), "error: Malformed conditional expression.");
		  (yyval.statement) = (yyvsp[-2].statement);
		}
#line 9809 "parse.cc" /* yacc.c:1646  */
    break;

  case 626:
#line 3889 "parse.y" /* yacc.c:1646  */
    { PForStatement*tmp = new PForStatement((yyvsp[-10].expr), (yyvsp[-8].expr), (yyvsp[-6].expr), (yyvsp[-4].expr), (yyvsp[-2].expr), (yyvsp[0].statement));
		  FILE_NAME(tmp, (yylsp[-12]));
		  (yyval.statement) = tmp;
		}
#line 9818 "parse.cc" /* yacc.c:1646  */
    break;

  case 627:
#line 3895 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = 0;
		  yyerror((yylsp[-10]), "error: Error in for loop step assignment.");
		}
#line 9826 "parse.cc" /* yacc.c:1646  */
    break;

  case 628:
#line 3900 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = 0;
		  yyerror((yylsp[-12]), "error: Error in for loop condition expression.");
		}
#line 9834 "parse.cc" /* yacc.c:1646  */
    break;

  case 629:
#line 3904 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = 0;
		  yyerror((yylsp[-4]), "error: Incomprehensible for loop.");
		}
#line 9842 "parse.cc" /* yacc.c:1646  */
    break;

  case 630:
#line 3908 "parse.y" /* yacc.c:1646  */
    { PWhile*tmp = new PWhile((yyvsp[-2].expr), (yyvsp[0].statement));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9851 "parse.cc" /* yacc.c:1646  */
    break;

  case 631:
#line 3913 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = 0;
		  yyerror((yylsp[-4]), "error: Error in while loop condition.");
		}
#line 9859 "parse.cc" /* yacc.c:1646  */
    break;

  case 632:
#line 3917 "parse.y" /* yacc.c:1646  */
    { PExpr*del = (*(yyvsp[-1].exprs))[0];
		  assert((yyvsp[-1].exprs)->count() == 1);
		  PDelayStatement*tmp = new PDelayStatement(del, (yyvsp[0].statement));
		  FILE_NAME(tmp, (yylsp[-1]));
		  (yyval.statement) = tmp;
		}
#line 9870 "parse.cc" /* yacc.c:1646  */
    break;

  case 633:
#line 3924 "parse.y" /* yacc.c:1646  */
    { PEventStatement*tmp = (yyvsp[-2].event_statement);
	if (tmp == 0) {
	      yyerror((yylsp[-2]), "error: Invalid event control.");
	      (yyval.statement) = 0;
	} else {
	      if ((yyvsp[0].statement)) pform_bind_attributes((yyvsp[0].statement)->attributes,(yyvsp[-1].named_pexprs));
	      tmp->set_statement((yyvsp[0].statement));
	      (yyval.statement) = tmp;
	}
      }
#line 9885 "parse.cc" /* yacc.c:1646  */
    break;

  case 634:
#line 3935 "parse.y" /* yacc.c:1646  */
    { PEventStatement*tmp = new PEventStatement;
	FILE_NAME(tmp, (yylsp[-3]));
	if ((yyvsp[0].statement)) pform_bind_attributes((yyvsp[0].statement)->attributes,(yyvsp[-1].named_pexprs));
	tmp->set_statement((yyvsp[0].statement));
	(yyval.statement) = tmp;
      }
#line 9896 "parse.cc" /* yacc.c:1646  */
    break;

  case 635:
#line 3942 "parse.y" /* yacc.c:1646  */
    { PEventStatement*tmp = new PEventStatement;
	FILE_NAME(tmp, (yylsp[-5]));
	if ((yyvsp[0].statement)) pform_bind_attributes((yyvsp[0].statement)->attributes,(yyvsp[-1].named_pexprs));
	tmp->set_statement((yyvsp[0].statement));
	(yyval.statement) = tmp;
      }
#line 9907 "parse.cc" /* yacc.c:1646  */
    break;

  case 636:
#line 3949 "parse.y" /* yacc.c:1646  */
    { PAssign*tmp = new PAssign((yyvsp[-3].expr),(yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-3]));
		  (yyval.statement) = tmp;
		}
#line 9916 "parse.cc" /* yacc.c:1646  */
    break;

  case 637:
#line 3954 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "Syntax in assignment statement l-value.");
		  yyerrok;
		  (yyval.statement) = new PNoop;
		}
#line 9925 "parse.cc" /* yacc.c:1646  */
    break;

  case 638:
#line 3959 "parse.y" /* yacc.c:1646  */
    { PAssignNB*tmp = new PAssignNB((yyvsp[-3].expr),(yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-3]));
		  (yyval.statement) = tmp;
		}
#line 9934 "parse.cc" /* yacc.c:1646  */
    break;

  case 639:
#line 3964 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[-2]), "Syntax in assignment statement l-value.");
		  yyerrok;
		  (yyval.statement) = new PNoop;
		}
#line 9943 "parse.cc" /* yacc.c:1646  */
    break;

  case 640:
#line 3969 "parse.y" /* yacc.c:1646  */
    { assert((yyvsp[-2].exprs)->count() == 1);
		  PExpr*del = (*(yyvsp[-2].exprs))[0];
		  PAssign*tmp = new PAssign((yyvsp[-4].expr),del,(yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9954 "parse.cc" /* yacc.c:1646  */
    break;

  case 641:
#line 3976 "parse.y" /* yacc.c:1646  */
    { assert((yyvsp[-2].exprs)->count() == 1);
		  PExpr*del = (*(yyvsp[-2].exprs))[0];
		  PAssignNB*tmp = new PAssignNB((yyvsp[-4].expr),del,(yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9965 "parse.cc" /* yacc.c:1646  */
    break;

  case 642:
#line 3983 "parse.y" /* yacc.c:1646  */
    { PAssign*tmp = new PAssign((yyvsp[-4].expr),0,(yyvsp[-2].event_statement),(yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9974 "parse.cc" /* yacc.c:1646  */
    break;

  case 643:
#line 3988 "parse.y" /* yacc.c:1646  */
    { PAssign*tmp = new PAssign((yyvsp[-8].expr),(yyvsp[-4].expr),(yyvsp[-2].event_statement),(yyvsp[-1].expr));
		  FILE_NAME(tmp,(yylsp[-8]));
		  tmp->set_lineno((yylsp[-8]).first_line);
		  (yyval.statement) = tmp;
		}
#line 9984 "parse.cc" /* yacc.c:1646  */
    break;

  case 644:
#line 3994 "parse.y" /* yacc.c:1646  */
    { PAssignNB*tmp = new PAssignNB((yyvsp[-4].expr),0,(yyvsp[-2].event_statement),(yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-4]));
		  (yyval.statement) = tmp;
		}
#line 9993 "parse.cc" /* yacc.c:1646  */
    break;

  case 645:
#line 3999 "parse.y" /* yacc.c:1646  */
    { PAssignNB*tmp = new PAssignNB((yyvsp[-8].expr),(yyvsp[-4].expr),(yyvsp[-2].event_statement),(yyvsp[-1].expr));
		  FILE_NAME(tmp, (yylsp[-8]));
		  (yyval.statement) = tmp;
		}
#line 10002 "parse.cc" /* yacc.c:1646  */
    break;

  case 646:
#line 4004 "parse.y" /* yacc.c:1646  */
    { PEventStatement*tmp;
		  PEEvent*etmp = new PEEvent(PEEvent::POSITIVE, (yyvsp[-2].expr));
		  tmp = new PEventStatement(etmp);
		  FILE_NAME(tmp,(yylsp[-4]));
		  tmp->set_statement((yyvsp[0].statement));
		  (yyval.statement) = tmp;
		}
#line 10014 "parse.cc" /* yacc.c:1646  */
    break;

  case 647:
#line 4012 "parse.y" /* yacc.c:1646  */
    { PCallTask*tmp = new PCallTask(lex_strings.make((yyvsp[-4].text)), *(yyvsp[-2].exprs));
		  FILE_NAME(tmp,(yylsp[-4]));
		  delete[](yyvsp[-4].text);
		  delete (yyvsp[-2].exprs);
		  (yyval.statement) = tmp;
		}
#line 10025 "parse.cc" /* yacc.c:1646  */
    break;

  case 648:
#line 4019 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>pt (0);
		  PCallTask*tmp = new PCallTask(lex_strings.make((yyvsp[-1].text)), pt);
		  FILE_NAME(tmp,(yylsp[-1]));
		  delete[](yyvsp[-1].text);
		  (yyval.statement) = tmp;
		}
#line 10036 "parse.cc" /* yacc.c:1646  */
    break;

  case 649:
#line 4026 "parse.y" /* yacc.c:1646  */
    { PCallTask*tmp = new PCallTask(*(yyvsp[-4].pform_name), *(yyvsp[-2].exprs));
		  FILE_NAME(tmp, (yylsp[-4]));
		  delete (yyvsp[-4].pform_name);
		  delete (yyvsp[-2].exprs);
		  (yyval.statement) = tmp;
		}
#line 10047 "parse.cc" /* yacc.c:1646  */
    break;

  case 650:
#line 4038 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>pt (0);
		  PCallTask*tmp = new PCallTask(*(yyvsp[-3].pform_name), pt);
		  FILE_NAME(tmp, (yylsp[-3]));
		  delete (yyvsp[-3].pform_name);
		  (yyval.statement) = tmp;
		}
#line 10058 "parse.cc" /* yacc.c:1646  */
    break;

  case 651:
#line 4045 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>pt (0);
		  PCallTask*tmp = new PCallTask(*(yyvsp[-1].pform_name), pt);
		  FILE_NAME(tmp, (yylsp[-1]));
		  delete (yyvsp[-1].pform_name);
		  (yyval.statement) = tmp;
		}
#line 10069 "parse.cc" /* yacc.c:1646  */
    break;

  case 652:
#line 4052 "parse.y" /* yacc.c:1646  */
    { yyerror((yylsp[0]), "error: malformed statement");
		  yyerrok;
		  (yyval.statement) = new PNoop;
		}
#line 10078 "parse.cc" /* yacc.c:1646  */
    break;

  case 653:
#line 4060 "parse.y" /* yacc.c:1646  */
    { svector<Statement*>*tmp = (yyvsp[-1].statement_list);
	if (tmp) {
	      tmp = new svector<Statement*>(*(yyvsp[-1].statement_list), (yyvsp[0].statement));
	      delete (yyvsp[-1].statement_list);
	} else {
	      tmp = new svector<Statement*>(1);
	      (*tmp)[0] = (yyvsp[0].statement);
	}
	(yyval.statement_list) = tmp;
      }
#line 10093 "parse.cc" /* yacc.c:1646  */
    break;

  case 654:
#line 4071 "parse.y" /* yacc.c:1646  */
    { (yyval.statement_list) = 0; }
#line 10099 "parse.cc" /* yacc.c:1646  */
    break;

  case 655:
#line 4076 "parse.y" /* yacc.c:1646  */
    { svector<Statement*>*tmp = new svector<Statement*>(*(yyvsp[-1].statement_list), (yyvsp[0].statement));
		  delete (yyvsp[-1].statement_list);
		  (yyval.statement_list) = tmp;
		}
#line 10108 "parse.cc" /* yacc.c:1646  */
    break;

  case 656:
#line 4081 "parse.y" /* yacc.c:1646  */
    { svector<Statement*>*tmp = new svector<Statement*>(1);
		  (*tmp)[0] = (yyvsp[0].statement);
		  (yyval.statement_list) = tmp;
		}
#line 10117 "parse.cc" /* yacc.c:1646  */
    break;

  case 657:
#line 4089 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = (yyvsp[0].statement); }
#line 10123 "parse.cc" /* yacc.c:1646  */
    break;

  case 658:
#line 4091 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = 0; }
#line 10129 "parse.cc" /* yacc.c:1646  */
    break;

  case 659:
#line 4096 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = pform_contribution_statement((yylsp[-2]), (yyvsp[-3].expr), (yyvsp[-1].expr)); }
#line 10135 "parse.cc" /* yacc.c:1646  */
    break;

  case 660:
#line 4102 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = new svector<PWire*>(0); }
#line 10141 "parse.cc" /* yacc.c:1646  */
    break;

  case 661:
#line 4103 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = (yyvsp[0].wires); }
#line 10147 "parse.cc" /* yacc.c:1646  */
    break;

  case 662:
#line 4107 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = true; }
#line 10153 "parse.cc" /* yacc.c:1646  */
    break;

  case 663:
#line 4108 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = false; }
#line 10159 "parse.cc" /* yacc.c:1646  */
    break;

  case 664:
#line 4113 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						(yyvsp[-4].flag) ? IVL_VT_LOGIC :
						     IVL_VT_NO_TYPE,
						(yyvsp[-3].flag), (yyvsp[-2].exprs), (yyvsp[-1].perm_strings),
						(yylsp[-5]).text, (yylsp[-5]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10172 "parse.cc" /* yacc.c:1646  */
    break;

  case 665:
#line 4122 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						(yyvsp[-4].flag) ? IVL_VT_LOGIC :
						     IVL_VT_NO_TYPE,
						(yyvsp[-3].flag), (yyvsp[-2].exprs), (yyvsp[-1].perm_strings),
						(yylsp[-5]).text, (yylsp[-5]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10185 "parse.cc" /* yacc.c:1646  */
    break;

  case 666:
#line 4131 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						(yyvsp[-4].flag) ? IVL_VT_LOGIC :
						     IVL_VT_NO_TYPE,
						(yyvsp[-3].flag), (yyvsp[-2].exprs), (yyvsp[-1].perm_strings),
						(yylsp[-5]).text, (yylsp[-5]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10198 "parse.cc" /* yacc.c:1646  */
    break;

  case 667:
#line 4144 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum(integer_width-1,
						integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						IVL_VT_LOGIC, true,
						range_stub, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line, true);
		  (yyval.wires) = tmp;
		}
#line 10217 "parse.cc" /* yacc.c:1646  */
    break;

  case 668:
#line 4159 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum(integer_width-1,
						integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						IVL_VT_LOGIC, true,
						range_stub, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line, true);
		  (yyval.wires) = tmp;
		}
#line 10236 "parse.cc" /* yacc.c:1646  */
    break;

  case 669:
#line 4174 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum(integer_width-1,
						integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						IVL_VT_LOGIC, true,
						range_stub, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line, true);
		  (yyval.wires) = tmp;
		}
#line 10255 "parse.cc" /* yacc.c:1646  */
    break;

  case 670:
#line 4192 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum((uint64_t)63, integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						IVL_VT_LOGIC, false,
						range_stub, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10273 "parse.cc" /* yacc.c:1646  */
    break;

  case 671:
#line 4206 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum((uint64_t)63, integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						IVL_VT_LOGIC, false,
						range_stub, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10291 "parse.cc" /* yacc.c:1646  */
    break;

  case 672:
#line 4220 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum((uint64_t)63, integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						IVL_VT_LOGIC, false,
						range_stub, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10309 "parse.cc" /* yacc.c:1646  */
    break;

  case 673:
#line 4237 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						IVL_VT_REAL, false,
						0, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10321 "parse.cc" /* yacc.c:1646  */
    break;

  case 674:
#line 4245 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						IVL_VT_REAL, true,
						0, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10333 "parse.cc" /* yacc.c:1646  */
    break;

  case 675:
#line 4253 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						IVL_VT_REAL, true,
						0, (yyvsp[-1].perm_strings),
						(yylsp[-3]).text, (yylsp[-3]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10345 "parse.cc" /* yacc.c:1646  */
    break;

  case 676:
#line 4264 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp = new svector<PWire*>(*(yyvsp[-1].wires), *(yyvsp[0].wires));
		  delete (yyvsp[-1].wires);
		  delete (yyvsp[0].wires);
		  (yyval.wires) = tmp;
		}
#line 10355 "parse.cc" /* yacc.c:1646  */
    break;

  case 677:
#line 4270 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = (yyvsp[0].wires); }
#line 10361 "parse.cc" /* yacc.c:1646  */
    break;

  case 678:
#line 4275 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = (yyvsp[0].wires); }
#line 10367 "parse.cc" /* yacc.c:1646  */
    break;

  case 679:
#line 4277 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = 0; }
#line 10373 "parse.cc" /* yacc.c:1646  */
    break;

  case 680:
#line 4283 "parse.y" /* yacc.c:1646  */
    { port_declaration_context.port_type = NetNet::PINPUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = (yyvsp[-2].flag);
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range((yyvsp[-1].exprs));
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						IVL_VT_LOGIC, (yyvsp[-2].flag),
						(yyvsp[-1].exprs), list_from_identifier((yyvsp[0].text)),
						(yylsp[-4]).text, (yylsp[-4]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10390 "parse.cc" /* yacc.c:1646  */
    break;

  case 681:
#line 4297 "parse.y" /* yacc.c:1646  */
    { port_declaration_context.port_type = NetNet::POUTPUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = (yyvsp[-2].flag);
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range((yyvsp[-1].exprs));
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						IVL_VT_LOGIC, (yyvsp[-2].flag),
						(yyvsp[-1].exprs), list_from_identifier((yyvsp[0].text)),
						(yylsp[-4]).text, (yylsp[-4]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10407 "parse.cc" /* yacc.c:1646  */
    break;

  case 682:
#line 4310 "parse.y" /* yacc.c:1646  */
    { port_declaration_context.port_type = NetNet::PINOUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = (yyvsp[-2].flag);
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range((yyvsp[-1].exprs));
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						IVL_VT_LOGIC, (yyvsp[-2].flag),
						(yyvsp[-1].exprs), list_from_identifier((yyvsp[0].text)),
						(yylsp[-4]).text, (yylsp[-4]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10424 "parse.cc" /* yacc.c:1646  */
    break;

  case 683:
#line 4326 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum(integer_width-1,
						integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  port_declaration_context.port_type = NetNet::PINPUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = true;
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range(range_stub);
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						IVL_VT_LOGIC, true,
						range_stub,
						list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line, true);
		  (yyval.wires) = tmp;
		}
#line 10449 "parse.cc" /* yacc.c:1646  */
    break;

  case 684:
#line 4347 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum(integer_width-1,
						integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  port_declaration_context.port_type = NetNet::POUTPUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = true;
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range(range_stub);
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						IVL_VT_LOGIC, true,
						range_stub,
						list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line, true);
		  (yyval.wires) = tmp;
		}
#line 10474 "parse.cc" /* yacc.c:1646  */
    break;

  case 685:
#line 4368 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum(integer_width-1,
						integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  port_declaration_context.port_type = NetNet::PINOUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = true;
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range(range_stub);
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						IVL_VT_LOGIC, true,
						range_stub,
						list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line, true);
		  (yyval.wires) = tmp;
		}
#line 10499 "parse.cc" /* yacc.c:1646  */
    break;

  case 686:
#line 4392 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum((uint64_t)63, integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  port_declaration_context.port_type = NetNet::PINPUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = false;
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range(range_stub);
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						IVL_VT_LOGIC, false,
						range_stub,
						list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10523 "parse.cc" /* yacc.c:1646  */
    break;

  case 687:
#line 4412 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum((uint64_t)63, integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  port_declaration_context.port_type = NetNet::POUTPUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = false;
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range(range_stub);
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						IVL_VT_LOGIC, false,
						range_stub,
						list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10547 "parse.cc" /* yacc.c:1646  */
    break;

  case 688:
#line 4432 "parse.y" /* yacc.c:1646  */
    { svector<PExpr*>*range_stub = new svector<PExpr*>(2);
		  PExpr*re;
		  re = new PENumber(new verinum((uint64_t)63, integer_width));
		  (*range_stub)[0] = re;
		  re = new PENumber(new verinum((uint64_t)0, integer_width));
		  (*range_stub)[1] = re;
		  port_declaration_context.port_type = NetNet::PINOUT;
		  port_declaration_context.var_type = IVL_VT_LOGIC;
		  port_declaration_context.sign_flag = false;
		  delete port_declaration_context.range;
		  port_declaration_context.range = copy_range(range_stub);
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						IVL_VT_LOGIC, false,
						range_stub,
						list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10571 "parse.cc" /* yacc.c:1646  */
    break;

  case 689:
#line 4455 "parse.y" /* yacc.c:1646  */
    { port_declaration_context.port_type = NetNet::PINPUT;
		  port_declaration_context.var_type = IVL_VT_REAL;
		  port_declaration_context.sign_flag = false;
		  delete port_declaration_context.range;
		  port_declaration_context.range = 0;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINPUT,
						IVL_VT_REAL, false,
						0, list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10588 "parse.cc" /* yacc.c:1646  */
    break;

  case 690:
#line 4468 "parse.y" /* yacc.c:1646  */
    { port_declaration_context.port_type = NetNet::POUTPUT;
		  port_declaration_context.var_type = IVL_VT_REAL;
		  port_declaration_context.sign_flag = false;
		  delete port_declaration_context.range;
		  port_declaration_context.range = 0;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::POUTPUT,
						IVL_VT_REAL, false,
						0, list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10605 "parse.cc" /* yacc.c:1646  */
    break;

  case 691:
#line 4481 "parse.y" /* yacc.c:1646  */
    { port_declaration_context.port_type = NetNet::PINOUT;
		  port_declaration_context.var_type = IVL_VT_REAL;
		  port_declaration_context.sign_flag = false;
		  delete port_declaration_context.range;
		  port_declaration_context.range = 0;
		  svector<PWire*>*tmp
			= pform_make_task_ports(NetNet::PINOUT,
						IVL_VT_REAL, false,
						0, list_from_identifier((yyvsp[0].text)),
						(yylsp[-2]).text, (yylsp[-2]).first_line);
		  (yyval.wires) = tmp;
		}
#line 10622 "parse.cc" /* yacc.c:1646  */
    break;

  case 692:
#line 4497 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp = new svector<PWire*>(*(yyvsp[-2].wires), *(yyvsp[0].wires));
		  delete (yyvsp[-2].wires);
		  delete (yyvsp[0].wires);
		  (yyval.wires) = tmp;
		}
#line 10632 "parse.cc" /* yacc.c:1646  */
    break;

  case 693:
#line 4503 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = (yyvsp[0].wires); }
#line 10638 "parse.cc" /* yacc.c:1646  */
    break;

  case 694:
#line 4505 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*new_decl
			= pform_make_task_ports(
				port_declaration_context.port_type,
				port_declaration_context.var_type,
				port_declaration_context.sign_flag,
				copy_range(port_declaration_context.range),
				list_from_identifier((yyvsp[0].text)),
				(yylsp[0]).text, (yylsp[0]).first_line);
		  svector<PWire*>*tmp = new svector<PWire*>(*(yyvsp[-2].wires), *new_decl);
		  delete (yyvsp[-2].wires);
		  delete new_decl;
		  (yyval.wires) = tmp;
		}
#line 10656 "parse.cc" /* yacc.c:1646  */
    break;

  case 695:
#line 4519 "parse.y" /* yacc.c:1646  */
    {
		  yyerror((yylsp[0]), "error: NULL port declarations are not "
		              "allowed.");
		}
#line 10665 "parse.cc" /* yacc.c:1646  */
    break;

  case 696:
#line 4524 "parse.y" /* yacc.c:1646  */
    {
		  yyerror((yylsp[0]), "error: ';' is an invalid port declaration "
		              "separator.");
		}
#line 10674 "parse.cc" /* yacc.c:1646  */
    break;

  case 697:
#line 4531 "parse.y" /* yacc.c:1646  */
    { lex_start_table(); }
#line 10680 "parse.cc" /* yacc.c:1646  */
    break;

  case 698:
#line 4533 "parse.y" /* yacc.c:1646  */
    { lex_end_table(); (yyval.strings) = (yyvsp[-1].strings); }
#line 10686 "parse.cc" /* yacc.c:1646  */
    break;

  case 701:
#line 4543 "parse.y" /* yacc.c:1646  */
    { char*tmp = new char[strlen((yyvsp[-3].text))+3];
		  strcpy(tmp, (yyvsp[-3].text));
		  char*tp = tmp+strlen(tmp);
		  *tp++ = ':';
		  *tp++ = (yyvsp[-1].letter);
		  *tp++ = 0;
		  delete[](yyvsp[-3].text);
		  (yyval.text) = tmp;
		}
#line 10700 "parse.cc" /* yacc.c:1646  */
    break;

  case 702:
#line 4556 "parse.y" /* yacc.c:1646  */
    { list<string>*tmp = new list<string>;
		  tmp->push_back((yyvsp[0].text));
		  delete[](yyvsp[0].text);
		  (yyval.strings) = tmp;
		}
#line 10710 "parse.cc" /* yacc.c:1646  */
    break;

  case 703:
#line 4562 "parse.y" /* yacc.c:1646  */
    { list<string>*tmp = (yyvsp[-1].strings);
		  tmp->push_back((yyvsp[0].text));
		  delete[](yyvsp[0].text);
		  (yyval.strings) = tmp;
		}
#line 10720 "parse.cc" /* yacc.c:1646  */
    break;

  case 704:
#line 4571 "parse.y" /* yacc.c:1646  */
    { list<string>*tmp = new list<string>;
		  tmp->push_back((yyvsp[0].text));
		  delete[](yyvsp[0].text);
		  (yyval.strings) = tmp;
		}
#line 10730 "parse.cc" /* yacc.c:1646  */
    break;

  case 705:
#line 4577 "parse.y" /* yacc.c:1646  */
    { list<string>*tmp = (yyvsp[-1].strings);
		  tmp->push_back((yyvsp[0].text));
		  delete[](yyvsp[0].text);
		  (yyval.strings) = tmp;
		}
#line 10740 "parse.cc" /* yacc.c:1646  */
    break;

  case 706:
#line 4586 "parse.y" /* yacc.c:1646  */
    { char*tmp = new char[strlen((yyvsp[-5].text))+5];
		  strcpy(tmp, (yyvsp[-5].text));
		  char*tp = tmp+strlen(tmp);
		  *tp++ = ':';
		  *tp++ = (yyvsp[-3].letter);
		  *tp++ = ':';
		  *tp++ = (yyvsp[-1].letter);
		  *tp++ = 0;
		  (yyval.text) = tmp;
		}
#line 10755 "parse.cc" /* yacc.c:1646  */
    break;

  case 707:
#line 4600 "parse.y" /* yacc.c:1646  */
    { PExpr*etmp = new PENumber((yyvsp[-1].number));
		  PEIdent*itmp = new PEIdent(lex_strings.make((yyvsp[-3].text)));
		  PAssign*atmp = new PAssign(itmp, etmp);
		  FILE_NAME(atmp, (yylsp[-3]));
		  delete[](yyvsp[-3].text);
		  (yyval.statement) = atmp;
		}
#line 10767 "parse.cc" /* yacc.c:1646  */
    break;

  case 708:
#line 4610 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = (yyvsp[0].statement); }
#line 10773 "parse.cc" /* yacc.c:1646  */
    break;

  case 709:
#line 4611 "parse.y" /* yacc.c:1646  */
    { (yyval.statement) = 0; }
#line 10779 "parse.cc" /* yacc.c:1646  */
    break;

  case 710:
#line 4616 "parse.y" /* yacc.c:1646  */
    { char*tmp = new char[2];
		  tmp[0] = (yyvsp[0].letter);
		  tmp[1] = 0;
		  (yyval.text) = tmp;
		}
#line 10789 "parse.cc" /* yacc.c:1646  */
    break;

  case 711:
#line 4622 "parse.y" /* yacc.c:1646  */
    { char*tmp = new char[strlen((yyvsp[-1].text))+2];
		  strcpy(tmp, (yyvsp[-1].text));
		  char*tp = tmp+strlen(tmp);
		  *tp++ = (yyvsp[0].letter);
		  *tp++ = 0;
		  delete[](yyvsp[-1].text);
		  (yyval.text) = tmp;
		}
#line 10802 "parse.cc" /* yacc.c:1646  */
    break;

  case 712:
#line 4633 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '0'; }
#line 10808 "parse.cc" /* yacc.c:1646  */
    break;

  case 713:
#line 4634 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '1'; }
#line 10814 "parse.cc" /* yacc.c:1646  */
    break;

  case 714:
#line 4635 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'x'; }
#line 10820 "parse.cc" /* yacc.c:1646  */
    break;

  case 715:
#line 4636 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '?'; }
#line 10826 "parse.cc" /* yacc.c:1646  */
    break;

  case 716:
#line 4637 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'b'; }
#line 10832 "parse.cc" /* yacc.c:1646  */
    break;

  case 717:
#line 4638 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '*'; }
#line 10838 "parse.cc" /* yacc.c:1646  */
    break;

  case 718:
#line 4639 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '%'; }
#line 10844 "parse.cc" /* yacc.c:1646  */
    break;

  case 719:
#line 4640 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'f'; }
#line 10850 "parse.cc" /* yacc.c:1646  */
    break;

  case 720:
#line 4641 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'F'; }
#line 10856 "parse.cc" /* yacc.c:1646  */
    break;

  case 721:
#line 4642 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'l'; }
#line 10862 "parse.cc" /* yacc.c:1646  */
    break;

  case 722:
#line 4643 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'H'; }
#line 10868 "parse.cc" /* yacc.c:1646  */
    break;

  case 723:
#line 4644 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'B'; }
#line 10874 "parse.cc" /* yacc.c:1646  */
    break;

  case 724:
#line 4645 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'r'; }
#line 10880 "parse.cc" /* yacc.c:1646  */
    break;

  case 725:
#line 4646 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'R'; }
#line 10886 "parse.cc" /* yacc.c:1646  */
    break;

  case 726:
#line 4647 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'M'; }
#line 10892 "parse.cc" /* yacc.c:1646  */
    break;

  case 727:
#line 4648 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'n'; }
#line 10898 "parse.cc" /* yacc.c:1646  */
    break;

  case 728:
#line 4649 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'N'; }
#line 10904 "parse.cc" /* yacc.c:1646  */
    break;

  case 729:
#line 4650 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'p'; }
#line 10910 "parse.cc" /* yacc.c:1646  */
    break;

  case 730:
#line 4651 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'P'; }
#line 10916 "parse.cc" /* yacc.c:1646  */
    break;

  case 731:
#line 4652 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'Q'; }
#line 10922 "parse.cc" /* yacc.c:1646  */
    break;

  case 732:
#line 4653 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'q'; }
#line 10928 "parse.cc" /* yacc.c:1646  */
    break;

  case 733:
#line 4654 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '_'; }
#line 10934 "parse.cc" /* yacc.c:1646  */
    break;

  case 734:
#line 4655 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '+'; }
#line 10940 "parse.cc" /* yacc.c:1646  */
    break;

  case 735:
#line 4659 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '0'; }
#line 10946 "parse.cc" /* yacc.c:1646  */
    break;

  case 736:
#line 4660 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '1'; }
#line 10952 "parse.cc" /* yacc.c:1646  */
    break;

  case 737:
#line 4661 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = 'x'; }
#line 10958 "parse.cc" /* yacc.c:1646  */
    break;

  case 738:
#line 4662 "parse.y" /* yacc.c:1646  */
    { (yyval.letter) = '-'; }
#line 10964 "parse.cc" /* yacc.c:1646  */
    break;

  case 739:
#line 4670 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = pform_make_udp_input_ports((yyvsp[-1].perm_strings)); }
#line 10970 "parse.cc" /* yacc.c:1646  */
    break;

  case 740:
#line 4672 "parse.y" /* yacc.c:1646  */
    { perm_string pname = lex_strings.make((yyvsp[-1].text));
	PWire*pp = new PWire(pname, NetNet::IMPLICIT, NetNet::POUTPUT, (yyvsp[-2].sectype), IVL_VT_LOGIC);
	svector<PWire*>*tmp = new svector<PWire*>(1);
	(*tmp)[0] = pp;
	(yyval.wires) = tmp;
	delete[](yyvsp[-1].text);
      }
#line 10982 "parse.cc" /* yacc.c:1646  */
    break;

  case 741:
#line 4680 "parse.y" /* yacc.c:1646  */
    { perm_string pname = lex_strings.make((yyvsp[-1].text));
	PWire*pp = new PWire(pname, NetNet::REG, NetNet::PIMPLICIT, (yyvsp[-2].sectype), IVL_VT_LOGIC);
	svector<PWire*>*tmp = new svector<PWire*>(1);
	(*tmp)[0] = pp;
	(yyval.wires) = tmp;
	delete[](yyvsp[-1].text);
      }
#line 10994 "parse.cc" /* yacc.c:1646  */
    break;

  case 742:
#line 4688 "parse.y" /* yacc.c:1646  */
    { perm_string pname = lex_strings.make((yyvsp[-1].text));
	PWire*pp = new PWire(pname, NetNet::REG, NetNet::POUTPUT, (yyvsp[-2].sectype), IVL_VT_LOGIC);
	svector<PWire*>*tmp = new svector<PWire*>(1);
	(*tmp)[0] = pp;
	(yyval.wires) = tmp;
	delete[](yyvsp[-1].text);
      }
#line 11006 "parse.cc" /* yacc.c:1646  */
    break;

  case 743:
#line 4699 "parse.y" /* yacc.c:1646  */
    { (yyval.wires) = (yyvsp[0].wires); }
#line 11012 "parse.cc" /* yacc.c:1646  */
    break;

  case 744:
#line 4701 "parse.y" /* yacc.c:1646  */
    { svector<PWire*>*tmp = new svector<PWire*>(*(yyvsp[-1].wires), *(yyvsp[0].wires));
		  delete (yyvsp[-1].wires);
		  delete (yyvsp[0].wires);
		  (yyval.wires) = tmp;
		}
#line 11022 "parse.cc" /* yacc.c:1646  */
    break;

  case 745:
#line 4710 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = new list<perm_string>;
	tmp->push_back(lex_strings.make((yyvsp[0].text)));
	delete[](yyvsp[0].text);
	(yyval.perm_strings) = tmp;
      }
#line 11032 "parse.cc" /* yacc.c:1646  */
    break;

  case 746:
#line 4716 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = (yyvsp[-2].perm_strings);
	tmp->push_back(lex_strings.make((yyvsp[0].text)));
	delete[](yyvsp[0].text);
	(yyval.perm_strings) = tmp;
      }
#line 11042 "parse.cc" /* yacc.c:1646  */
    break;

  case 747:
#line 4723 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = true; }
#line 11048 "parse.cc" /* yacc.c:1646  */
    break;

  case 748:
#line 4723 "parse.y" /* yacc.c:1646  */
    { (yyval.flag) = false; }
#line 11054 "parse.cc" /* yacc.c:1646  */
    break;

  case 749:
#line 4726 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = (yyvsp[0].expr); }
#line 11060 "parse.cc" /* yacc.c:1646  */
    break;

  case 750:
#line 4727 "parse.y" /* yacc.c:1646  */
    { (yyval.expr) = 0; }
#line 11066 "parse.cc" /* yacc.c:1646  */
    break;

  case 751:
#line 4732 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = new list<perm_string>;
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 11076 "parse.cc" /* yacc.c:1646  */
    break;

  case 752:
#line 4738 "parse.y" /* yacc.c:1646  */
    { list<perm_string>*tmp = (yyvsp[-3].perm_strings);
		  tmp->push_back(lex_strings.make((yyvsp[0].text)));
		  (yyval.perm_strings) = tmp;
		  delete[](yyvsp[0].text);
		}
#line 11086 "parse.cc" /* yacc.c:1646  */
    break;

  case 753:
#line 4756 "parse.y" /* yacc.c:1646  */
    { perm_string tmp2 = lex_strings.make((yyvsp[-8].text));
		  pform_make_udp(tmp2, (yyvsp[-6].perm_strings), (yyvsp[-3].wires), (yyvsp[-1].strings), (yyvsp[-2].statement),
				 (yylsp[-8]).text, (yylsp[-8]).first_line);
		  delete[](yyvsp[-8].text);
		}
#line 11096 "parse.cc" /* yacc.c:1646  */
    break;

  case 754:
#line 4771 "parse.y" /* yacc.c:1646  */
    { perm_string tmp2 = lex_strings.make((yyvsp[-11].text));
		  perm_string tmp6 = lex_strings.make((yyvsp[-7].text));
		  pform_make_udp(tmp2, (yyvsp[-8].flag), tmp6, (yyvsp[-6].expr), (yyvsp[-4].perm_strings), (yyvsp[-1].strings),
				 (yylsp[-11]).text, (yylsp[-11]).first_line);
		  delete[](yyvsp[-11].text);
		  delete[](yyvsp[-7].text);
		}
#line 11108 "parse.cc" /* yacc.c:1646  */
    break;


#line 11112 "parse.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
